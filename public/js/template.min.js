/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./js/template.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./js/MobileMenu.js":
/*!**************************!*\
  !*** ./js/MobileMenu.js ***!
  \**************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nclass MobileMenu {\n  constructor() {\n    this.container = document.querySelector('.sidebar');\n    this.toggleButtons = Array.from(document.querySelectorAll('.toggle-sidebar'));\n    this.init();\n  }\n\n  init() {\n    this.toggleButtons.forEach(button => {\n      button.addEventListener('click', () => {\n        this.container.classList.toggle('sidebar--active');\n      });\n    });\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (MobileMenu);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9qcy9Nb2JpbGVNZW51LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vanMvTW9iaWxlTWVudS5qcz85NzhkIl0sInNvdXJjZXNDb250ZW50IjpbImNsYXNzIE1vYmlsZU1lbnUge1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5jb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2lkZWJhcicpO1xyXG4gICAgdGhpcy50b2dnbGVCdXR0b25zID0gQXJyYXkuZnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcudG9nZ2xlLXNpZGViYXInKSk7XHJcblxyXG4gICAgdGhpcy5pbml0KCk7XHJcbiAgfVxyXG5cclxuICBpbml0KCkge1xyXG4gICAgdGhpcy50b2dnbGVCdXR0b25zLmZvckVhY2goYnV0dG9uID0+IHtcclxuICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTGlzdC50b2dnbGUoJ3NpZGViYXItLWFjdGl2ZScpO1xyXG4gICAgICB9KTtcclxuICAgIH0pXHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBNb2JpbGVNZW51O1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBZkE7QUFDQTtBQWdCQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./js/MobileMenu.js\n");

/***/ }),

/***/ "./js/Shuffle.js":
/*!***********************!*\
  !*** ./js/Shuffle.js ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("(function (global, factory) {\n   true ? module.exports = factory() : undefined;\n})(this, function () {\n  'use strict';\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  function _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n  }\n\n  function _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        writable: true,\n        configurable: true\n      }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n  }\n\n  function _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n      return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n  }\n\n  function _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n      o.__proto__ = p;\n      return o;\n    };\n\n    return _setPrototypeOf(o, p);\n  }\n\n  function _assertThisInitialized(self) {\n    if (self === void 0) {\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n\n    return self;\n  }\n\n  function _possibleConstructorReturn(self, call) {\n    if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n      return call;\n    }\n\n    return _assertThisInitialized(self);\n  }\n\n  function E() {// Keep this empty so it's easier to inherit from\n    // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)\n  }\n\n  E.prototype = {\n    on: function (name, callback, ctx) {\n      var e = this.e || (this.e = {});\n      (e[name] || (e[name] = [])).push({\n        fn: callback,\n        ctx: ctx\n      });\n      return this;\n    },\n    once: function (name, callback, ctx) {\n      var self = this;\n\n      function listener() {\n        self.off(name, listener);\n        callback.apply(ctx, arguments);\n      }\n\n      listener._ = callback;\n      return this.on(name, listener, ctx);\n    },\n    emit: function (name) {\n      var data = [].slice.call(arguments, 1);\n      var evtArr = ((this.e || (this.e = {}))[name] || []).slice();\n      var i = 0;\n      var len = evtArr.length;\n\n      for (i; i < len; i++) {\n        evtArr[i].fn.apply(evtArr[i].ctx, data);\n      }\n\n      return this;\n    },\n    off: function (name, callback) {\n      var e = this.e || (this.e = {});\n      var evts = e[name];\n      var liveEvents = [];\n\n      if (evts && callback) {\n        for (var i = 0, len = evts.length; i < len; i++) {\n          if (evts[i].fn !== callback && evts[i].fn._ !== callback) liveEvents.push(evts[i]);\n        }\n      } // Remove event from queue to prevent memory leak\n      // Suggested by https://github.com/lazd\n      // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910\n\n\n      liveEvents.length ? e[name] = liveEvents : delete e[name];\n      return this;\n    }\n  };\n  var tinyEmitter = E;\n  var TinyEmitter = E;\n  tinyEmitter.TinyEmitter = TinyEmitter;\n  var proto = typeof Element !== 'undefined' ? Element.prototype : {};\n  var vendor = proto.matches || proto.matchesSelector || proto.webkitMatchesSelector || proto.mozMatchesSelector || proto.msMatchesSelector || proto.oMatchesSelector;\n  var matchesSelector = match;\n  /**\r\n   * Match `el` to `selector`.\r\n   *\r\n   * @param {Element} el\r\n   * @param {String} selector\r\n   * @return {Boolean}\r\n   * @api public\r\n   */\n\n  function match(el, selector) {\n    if (!el || el.nodeType !== 1) return false;\n    if (vendor) return vendor.call(el, selector);\n    var nodes = el.parentNode.querySelectorAll(selector);\n\n    for (var i = 0; i < nodes.length; i++) {\n      if (nodes[i] == el) return true;\n    }\n\n    return false;\n  }\n\n  var throttleit = throttle;\n  /**\r\n   * Returns a new function that, when invoked, invokes `func` at most once per `wait` milliseconds.\r\n   *\r\n   * @param {Function} func Function to wrap.\r\n   * @param {Number} wait Number of milliseconds that must elapse between `func` invocations.\r\n   * @return {Function} A new function that wraps the `func` function passed in.\r\n   */\n\n  function throttle(func, wait) {\n    var ctx, args, rtn, timeoutID; // caching\n\n    var last = 0;\n    return function throttled() {\n      ctx = this;\n      args = arguments;\n      var delta = new Date() - last;\n      if (!timeoutID) if (delta >= wait) call();else timeoutID = setTimeout(call, wait - delta);\n      return rtn;\n    };\n\n    function call() {\n      timeoutID = 0;\n      last = +new Date();\n      rtn = func.apply(ctx, args);\n      ctx = null;\n      args = null;\n    }\n  }\n\n  var arrayParallel = function parallel(fns, context, callback) {\n    if (!callback) {\n      if (typeof context === 'function') {\n        callback = context;\n        context = null;\n      } else {\n        callback = noop;\n      }\n    }\n\n    var pending = fns && fns.length;\n    if (!pending) return callback(null, []);\n    var finished = false;\n    var results = new Array(pending);\n    fns.forEach(context ? function (fn, i) {\n      fn.call(context, maybeDone(i));\n    } : function (fn, i) {\n      fn(maybeDone(i));\n    });\n\n    function maybeDone(i) {\n      return function (err, result) {\n        if (finished) return;\n\n        if (err) {\n          callback(err, results);\n          finished = true;\n          return;\n        }\n\n        results[i] = result;\n        if (! --pending) callback(null, results);\n      };\n    }\n  };\n\n  function noop() {}\n  /**\r\n   * Always returns a numeric value, given a value. Logic from jQuery's `isNumeric`.\r\n   * @param {*} value Possibly numeric value.\r\n   * @return {number} `value` or zero if `value` isn't numeric.\r\n   */\n\n\n  function getNumber(value) {\n    return parseFloat(value) || 0;\n  }\n\n  var Point =\n  /*#__PURE__*/\n  function () {\n    /**\r\n     * Represents a coordinate pair.\r\n     * @param {number} [x=0] X.\r\n     * @param {number} [y=0] Y.\r\n     */\n    function Point(x, y) {\n      _classCallCheck(this, Point);\n\n      this.x = getNumber(x);\n      this.y = getNumber(y);\n    }\n    /**\r\n     * Whether two points are equal.\r\n     * @param {Point} a Point A.\r\n     * @param {Point} b Point B.\r\n     * @return {boolean}\r\n     */\n\n\n    _createClass(Point, null, [{\n      key: \"equals\",\n      value: function equals(a, b) {\n        return a.x === b.x && a.y === b.y;\n      }\n    }]);\n\n    return Point;\n  }();\n\n  var Rect =\n  /*#__PURE__*/\n  function () {\n    /**\r\n     * Class for representing rectangular regions.\r\n     * https://github.com/google/closure-library/blob/master/closure/goog/math/rect.js\r\n     * @param {number} x Left.\r\n     * @param {number} y Top.\r\n     * @param {number} w Width.\r\n     * @param {number} h Height.\r\n     * @param {number} id Identifier\r\n     * @constructor\r\n     */\n    function Rect(x, y, w, h, id) {\n      _classCallCheck(this, Rect);\n\n      this.id = id;\n      /** @type {number} */\n\n      this.left = x;\n      /** @type {number} */\n\n      this.top = y;\n      /** @type {number} */\n\n      this.width = w;\n      /** @type {number} */\n\n      this.height = h;\n    }\n    /**\r\n     * Returns whether two rectangles intersect.\r\n     * @param {Rect} a A Rectangle.\r\n     * @param {Rect} b A Rectangle.\r\n     * @return {boolean} Whether a and b intersect.\r\n     */\n\n\n    _createClass(Rect, null, [{\n      key: \"intersects\",\n      value: function intersects(a, b) {\n        return a.left < b.left + b.width && b.left < a.left + a.width && a.top < b.top + b.height && b.top < a.top + a.height;\n      }\n    }]);\n\n    return Rect;\n  }();\n\n  var Classes = {\n    BASE: 'shuffle',\n    SHUFFLE_ITEM: 'shuffle-item',\n    VISIBLE: 'shuffle-item--visible',\n    HIDDEN: 'shuffle-item--hidden'\n  };\n  var id = 0;\n\n  var ShuffleItem =\n  /*#__PURE__*/\n  function () {\n    function ShuffleItem(element) {\n      _classCallCheck(this, ShuffleItem);\n\n      id += 1;\n      this.id = id;\n      this.element = element;\n      /**\r\n       * Used to separate items for layout and shrink.\r\n       */\n\n      this.isVisible = true;\n      /**\r\n       * Used to determine if a transition will happen. By the time the _layout\r\n       * and _shrink methods get the ShuffleItem instances, the `isVisible` value\r\n       * has already been changed by the separation methods, so this property is\r\n       * needed to know if the item was visible/hidden before the shrink/layout.\r\n       */\n\n      this.isHidden = false;\n    }\n\n    _createClass(ShuffleItem, [{\n      key: \"show\",\n      value: function show() {\n        this.isVisible = true;\n        this.element.classList.remove(Classes.HIDDEN);\n        this.element.classList.add(Classes.VISIBLE);\n        this.element.removeAttribute('aria-hidden');\n      }\n    }, {\n      key: \"hide\",\n      value: function hide() {\n        this.isVisible = false;\n        this.element.classList.remove(Classes.VISIBLE);\n        this.element.classList.add(Classes.HIDDEN);\n        this.element.setAttribute('aria-hidden', true);\n      }\n    }, {\n      key: \"init\",\n      value: function init() {\n        this.addClasses([Classes.SHUFFLE_ITEM, Classes.VISIBLE]);\n        this.applyCss(ShuffleItem.Css.INITIAL);\n        this.scale = ShuffleItem.Scale.VISIBLE;\n        this.point = new Point();\n      }\n    }, {\n      key: \"addClasses\",\n      value: function addClasses(classes) {\n        var _this = this;\n\n        classes.forEach(function (className) {\n          _this.element.classList.add(className);\n        });\n      }\n    }, {\n      key: \"removeClasses\",\n      value: function removeClasses(classes) {\n        var _this2 = this;\n\n        classes.forEach(function (className) {\n          _this2.element.classList.remove(className);\n        });\n      }\n    }, {\n      key: \"applyCss\",\n      value: function applyCss(obj) {\n        var _this3 = this;\n\n        Object.keys(obj).forEach(function (key) {\n          _this3.element.style[key] = obj[key];\n        });\n      }\n    }, {\n      key: \"dispose\",\n      value: function dispose() {\n        this.removeClasses([Classes.HIDDEN, Classes.VISIBLE, Classes.SHUFFLE_ITEM]);\n        this.element.removeAttribute('style');\n        this.element = null;\n      }\n    }]);\n\n    return ShuffleItem;\n  }();\n\n  ShuffleItem.Css = {\n    INITIAL: {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      visibility: 'visible',\n      willChange: 'transform'\n    },\n    VISIBLE: {\n      before: {\n        opacity: 1,\n        visibility: 'visible'\n      },\n      after: {\n        transitionDelay: ''\n      }\n    },\n    HIDDEN: {\n      before: {\n        opacity: 0\n      },\n      after: {\n        visibility: 'hidden',\n        transitionDelay: ''\n      }\n    }\n  };\n  ShuffleItem.Scale = {\n    VISIBLE: 1,\n    HIDDEN: 0.001\n  };\n  var value = null;\n\n  var testComputedSize = function () {\n    if (value !== null) {\n      return value;\n    }\n\n    var element = document.body || document.documentElement;\n    var e = document.createElement('div');\n    e.style.cssText = 'width:10px;padding:2px;box-sizing:border-box;';\n    element.appendChild(e);\n    value = window.getComputedStyle(e, null).width === '10px';\n    element.removeChild(e);\n    return value;\n  };\n  /**\r\n   * Retrieve the computed style for an element, parsed as a float.\r\n   * @param {Element} element Element to get style for.\r\n   * @param {string} style Style property.\r\n   * @param {CSSStyleDeclaration} [styles] Optionally include clean styles to\r\n   *     use instead of asking for them again.\r\n   * @return {number} The parsed computed value or zero if that fails because IE\r\n   *     will return 'auto' when the element doesn't have margins instead of\r\n   *     the computed style.\r\n   */\n\n\n  function getNumberStyle(element, style) {\n    var styles = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : window.getComputedStyle(element, null);\n    var value = getNumber(styles[style]); // Support IE<=11 and W3C spec.\n\n    if (!testComputedSize() && style === 'width') {\n      value += getNumber(styles.paddingLeft) + getNumber(styles.paddingRight) + getNumber(styles.borderLeftWidth) + getNumber(styles.borderRightWidth);\n    } else if (!testComputedSize() && style === 'height') {\n      value += getNumber(styles.paddingTop) + getNumber(styles.paddingBottom) + getNumber(styles.borderTopWidth) + getNumber(styles.borderBottomWidth);\n    }\n\n    return value;\n  }\n  /**\r\n   * Fisher-Yates shuffle.\r\n   * http://stackoverflow.com/a/962890/373422\r\n   * https://bost.ocks.org/mike/shuffle/\r\n   * @param {Array} array Array to shuffle.\r\n   * @return {Array} Randomly sorted array.\r\n   */\n\n\n  function randomize(array) {\n    var n = array.length;\n\n    while (n) {\n      n -= 1;\n      var i = Math.floor(Math.random() * (n + 1));\n      var temp = array[i];\n      array[i] = array[n];\n      array[n] = temp;\n    }\n\n    return array;\n  }\n\n  var defaults = {\n    // Use array.reverse() to reverse the results\n    reverse: false,\n    // Sorting function\n    by: null,\n    // Custom sort function\n    compare: null,\n    // If true, this will skip the sorting and return a randomized order in the array\n    randomize: false,\n    // Determines which property of each item in the array is passed to the\n    // sorting method.\n    key: 'element'\n  };\n  /**\r\n   * You can return `undefined` from the `by` function to revert to DOM order.\r\n   * @param {Array<T>} arr Array to sort.\r\n   * @param {SortOptions} options Sorting options.\r\n   * @return {Array<T>}\r\n   */\n\n  function sorter(arr, options) {\n    var opts = Object.assign({}, defaults, options);\n    var original = Array.from(arr);\n    var revert = false;\n\n    if (!arr.length) {\n      return [];\n    }\n\n    if (opts.randomize) {\n      return randomize(arr);\n    } // Sort the elements by the opts.by function.\n    // If we don't have opts.by, default to DOM order\n\n\n    if (typeof opts.by === 'function') {\n      arr.sort(function (a, b) {\n        // Exit early if we already know we want to revert\n        if (revert) {\n          return 0;\n        }\n\n        var valA = opts.by(a[opts.key]);\n        var valB = opts.by(b[opts.key]); // If both values are undefined, use the DOM order\n\n        if (valA === undefined && valB === undefined) {\n          revert = true;\n          return 0;\n        }\n\n        if (valA < valB || valA === 'sortFirst' || valB === 'sortLast') {\n          return -1;\n        }\n\n        if (valA > valB || valA === 'sortLast' || valB === 'sortFirst') {\n          return 1;\n        }\n\n        return 0;\n      });\n    } else if (typeof opts.compare === 'function') {\n      arr.sort(opts.compare);\n    } // Revert to the original array if necessary\n\n\n    if (revert) {\n      return original;\n    }\n\n    if (opts.reverse) {\n      arr.reverse();\n    }\n\n    return arr;\n  }\n\n  var transitions = {};\n  var eventName = 'transitionend';\n  var count = 0;\n\n  function uniqueId() {\n    count += 1;\n    return eventName + count;\n  }\n\n  function cancelTransitionEnd(id) {\n    if (transitions[id]) {\n      transitions[id].element.removeEventListener(eventName, transitions[id].listener);\n      transitions[id] = null;\n      return true;\n    }\n\n    return false;\n  }\n\n  function onTransitionEnd(element, callback) {\n    var id = uniqueId();\n\n    var listener = function listener(evt) {\n      if (evt.currentTarget === evt.target) {\n        cancelTransitionEnd(id);\n        callback(evt);\n      }\n    };\n\n    element.addEventListener(eventName, listener);\n    transitions[id] = {\n      element: element,\n      listener: listener\n    };\n    return id;\n  }\n\n  function arrayMax(array) {\n    return Math.max.apply(Math, array); // eslint-disable-line prefer-spread\n  }\n\n  function arrayMin(array) {\n    return Math.min.apply(Math, array); // eslint-disable-line prefer-spread\n  }\n  /**\r\n   * Determine the number of columns an items spans.\r\n   * @param {number} itemWidth Width of the item.\r\n   * @param {number} columnWidth Width of the column (includes gutter).\r\n   * @param {number} columns Total number of columns\r\n   * @param {number} threshold A buffer value for the size of the column to fit.\r\n   * @return {number}\r\n   */\n\n\n  function getColumnSpan(itemWidth, columnWidth, columns, threshold) {\n    var columnSpan = itemWidth / columnWidth; // If the difference between the rounded column span number and the\n    // calculated column span number is really small, round the number to\n    // make it fit.\n\n    if (Math.abs(Math.round(columnSpan) - columnSpan) < threshold) {\n      // e.g. columnSpan = 4.0089945390298745\n      columnSpan = Math.round(columnSpan);\n    } // Ensure the column span is not more than the amount of columns in the whole layout.\n\n\n    return Math.min(Math.ceil(columnSpan), columns);\n  }\n  /**\r\n   * Retrieves the column set to use for placement.\r\n   * @param {number} columnSpan The number of columns this current item spans.\r\n   * @param {number} columns The total columns in the grid.\r\n   * @return {Array.<number>} An array of numbers represeting the column set.\r\n   */\n\n\n  function getAvailablePositions(positions, columnSpan, columns) {\n    // The item spans only one column.\n    if (columnSpan === 1) {\n      return positions;\n    } // The item spans more than one column, figure out how many different\n    // places it could fit horizontally.\n    // The group count is the number of places within the positions this block\n    // could fit, ignoring the current positions of items.\n    // Imagine a 2 column brick as the second item in a 4 column grid with\n    // 10px height each. Find the places it would fit:\n    // [20, 10, 10, 0]\n    //  |   |   |\n    //  *   *   *\n    //\n    // Then take the places which fit and get the bigger of the two:\n    // max([20, 10]), max([10, 10]), max([10, 0]) = [20, 10, 10]\n    //\n    // Next, find the first smallest number (the short column).\n    // [20, 10, 10]\n    //      |\n    //      *\n    //\n    // And that's where it should be placed!\n    //\n    // Another example where the second column's item extends past the first:\n    // [10, 20, 10, 0] => [20, 20, 10] => 10\n\n\n    var available = []; // For how many possible positions for this item there are.\n\n    for (var i = 0; i <= columns - columnSpan; i++) {\n      // Find the bigger value for each place it could fit.\n      available.push(arrayMax(positions.slice(i, i + columnSpan)));\n    }\n\n    return available;\n  }\n  /**\r\n   * Find index of short column, the first from the left where this item will go.\r\n   *\r\n   * @param {Array.<number>} positions The array to search for the smallest number.\r\n   * @param {number} buffer Optional buffer which is very useful when the height\r\n   *     is a percentage of the width.\r\n   * @return {number} Index of the short column.\r\n   */\n\n\n  function getShortColumn(positions, buffer) {\n    var minPosition = arrayMin(positions);\n\n    for (var i = 0, len = positions.length; i < len; i++) {\n      if (positions[i] >= minPosition - buffer && positions[i] <= minPosition + buffer) {\n        return i;\n      }\n    }\n\n    return 0;\n  }\n  /**\r\n   * Determine the location of the next item, based on its size.\r\n   * @param {Object} itemSize Object with width and height.\r\n   * @param {Array.<number>} positions Positions of the other current items.\r\n   * @param {number} gridSize The column width or row height.\r\n   * @param {number} total The total number of columns or rows.\r\n   * @param {number} threshold Buffer value for the column to fit.\r\n   * @param {number} buffer Vertical buffer for the height of items.\r\n   * @return {Point}\r\n   */\n\n\n  function getItemPosition(_ref) {\n    var itemSize = _ref.itemSize,\n        positions = _ref.positions,\n        gridSize = _ref.gridSize,\n        total = _ref.total,\n        threshold = _ref.threshold,\n        buffer = _ref.buffer;\n    var span = getColumnSpan(itemSize.width, gridSize, total, threshold);\n    var setY = getAvailablePositions(positions, span, total);\n    var shortColumnIndex = getShortColumn(setY, buffer); // Position the item\n\n    var point = new Point(gridSize * shortColumnIndex, setY[shortColumnIndex]); // Update the columns array with the new values for each column.\n    // e.g. before the update the columns could be [250, 0, 0, 0] for an item\n    // which spans 2 columns. After it would be [250, itemHeight, itemHeight, 0].\n\n    var setHeight = setY[shortColumnIndex] + itemSize.height;\n\n    for (var i = 0; i < span; i++) {\n      positions[shortColumnIndex + i] = setHeight;\n    }\n\n    return point;\n  }\n  /**\r\n   * This method attempts to center items. This method could potentially be slow\r\n   * with a large number of items because it must place items, then check every\r\n   * previous item to ensure there is no overlap.\r\n   * @param {Array.<Rect>} itemRects Item data objects.\r\n   * @param {number} containerWidth Width of the containing element.\r\n   * @return {Array.<Point>}\r\n   */\n\n\n  function getCenteredPositions(itemRects, containerWidth) {\n    var rowMap = {}; // Populate rows by their offset because items could jump between rows like:\n    // a   c\n    //  bbb\n\n    itemRects.forEach(function (itemRect) {\n      if (rowMap[itemRect.top]) {\n        // Push the point to the last row array.\n        rowMap[itemRect.top].push(itemRect);\n      } else {\n        // Start of a new row.\n        rowMap[itemRect.top] = [itemRect];\n      }\n    }); // For each row, find the end of the last item, then calculate\n    // the remaining space by dividing it by 2. Then add that\n    // offset to the x position of each point.\n\n    var rects = [];\n    var rows = [];\n    var centeredRows = [];\n    Object.keys(rowMap).forEach(function (key) {\n      var itemRects = rowMap[key];\n      rows.push(itemRects);\n      var lastItem = itemRects[itemRects.length - 1];\n      var end = lastItem.left + lastItem.width;\n      var offset = Math.round((containerWidth - end) / 2);\n      var finalRects = itemRects;\n      var canMove = false;\n\n      if (offset > 0) {\n        var newRects = [];\n        canMove = itemRects.every(function (r) {\n          var newRect = new Rect(r.left + offset, r.top, r.width, r.height, r.id); // Check all current rects to make sure none overlap.\n\n          var noOverlap = !rects.some(function (r) {\n            return Rect.intersects(newRect, r);\n          });\n          newRects.push(newRect);\n          return noOverlap;\n        }); // If none of the rectangles overlapped, the whole group can be centered.\n\n        if (canMove) {\n          finalRects = newRects;\n        }\n      } // If the items are not going to be offset, ensure that the original\n      // placement for this row will not overlap previous rows (row-spanning\n      // elements could be in the way).\n\n\n      if (!canMove) {\n        var intersectingRect;\n        var hasOverlap = itemRects.some(function (itemRect) {\n          return rects.some(function (r) {\n            var intersects = Rect.intersects(itemRect, r);\n\n            if (intersects) {\n              intersectingRect = r;\n            }\n\n            return intersects;\n          });\n        }); // If there is any overlap, replace the overlapping row with the original.\n\n        if (hasOverlap) {\n          var rowIndex = centeredRows.findIndex(function (items) {\n            return items.includes(intersectingRect);\n          });\n          centeredRows.splice(rowIndex, 1, rows[rowIndex]);\n        }\n      }\n\n      rects = rects.concat(finalRects);\n      centeredRows.push(finalRects);\n    }); // Reduce array of arrays to a single array of points.\n    // https://stackoverflow.com/a/10865042/373422\n    // Then reset sort back to how the items were passed to this method.\n    // Remove the wrapper object with index, map to a Point.\n\n    return [].concat.apply([], centeredRows) // eslint-disable-line prefer-spread\n    .sort(function (a, b) {\n      return a.id - b.id;\n    }).map(function (itemRect) {\n      return new Point(itemRect.left, itemRect.top);\n    });\n  }\n  /**\r\n   * Hyphenates a javascript style string to a css one. For example:\r\n   * MozBoxSizing -> -moz-box-sizing.\r\n   * @param {string} str The string to hyphenate.\r\n   * @return {string} The hyphenated string.\r\n   */\n\n\n  function hyphenate(str) {\n    return str.replace(/([A-Z])/g, function (str, m1) {\n      return \"-\".concat(m1.toLowerCase());\n    });\n  }\n\n  function arrayUnique(x) {\n    return Array.from(new Set(x));\n  } // Used for unique instance variables\n\n\n  var id$1 = 0;\n\n  var Shuffle =\n  /*#__PURE__*/\n  function (_TinyEmitter) {\n    _inherits(Shuffle, _TinyEmitter);\n    /**\r\n     * Categorize, sort, and filter a responsive grid of items.\r\n     *\r\n     * @param {Element} element An element which is the parent container for the grid items.\r\n     * @param {Object} [options=Shuffle.options] Options object.\r\n     * @constructor\r\n     */\n\n\n    function Shuffle(element) {\n      var _this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      _classCallCheck(this, Shuffle);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(Shuffle).call(this));\n      _this.options = Object.assign({}, Shuffle.options, options); // Allow misspelling of delimiter since that's how it used to be.\n      // Remove in v6.\n\n      if (_this.options.delimeter) {\n        _this.options.delimiter = _this.options.delimeter;\n      }\n\n      _this.lastSort = {};\n      _this.group = Shuffle.ALL_ITEMS;\n      _this.lastFilter = Shuffle.ALL_ITEMS;\n      _this.isEnabled = true;\n      _this.isDestroyed = false;\n      _this.isInitialized = false;\n      _this._transitions = [];\n      _this.isTransitioning = false;\n      _this._queue = [];\n\n      var el = _this._getElementOption(element);\n\n      if (!el) {\n        throw new TypeError('Shuffle needs to be initialized with an element.');\n      }\n\n      _this.element = el;\n      _this.id = 'shuffle_' + id$1;\n      id$1 += 1;\n\n      _this._init();\n\n      _this.isInitialized = true;\n      return _this;\n    }\n\n    _createClass(Shuffle, [{\n      key: \"_init\",\n      value: function _init() {\n        this.items = this._getItems();\n        this.options.sizer = this._getElementOption(this.options.sizer); // Add class and invalidate styles\n\n        this.element.classList.add(Shuffle.Classes.BASE); // Set initial css for each item\n\n        this._initItems(this.items); // Bind resize events\n\n\n        this._onResize = this._getResizeFunction();\n        window.addEventListener('resize', this._onResize); // If the page has not already emitted the `load` event, call layout on load.\n        // This avoids layout issues caused by images and fonts loading after the\n        // instance has been initialized.\n\n        if (document.readyState !== 'complete') {\n          var layout = this.layout.bind(this);\n          window.addEventListener('load', function onLoad() {\n            window.removeEventListener('load', onLoad);\n            layout();\n          });\n        } // Get container css all in one request. Causes reflow\n\n\n        var containerCss = window.getComputedStyle(this.element, null);\n        var containerWidth = Shuffle.getSize(this.element).width; // Add styles to the container if it doesn't have them.\n\n        this._validateStyles(containerCss); // We already got the container's width above, no need to cause another\n        // reflow getting it again... Calculate the number of columns there will be\n\n\n        this._setColumns(containerWidth); // Kick off!\n\n\n        this.filter(this.options.group, this.options.initialSort); // The shuffle items haven't had transitions set on them yet so the user\n        // doesn't see the first layout. Set them now that the first layout is done.\n        // First, however, a synchronous layout must be caused for the previous\n        // styles to be applied without transitions.\n\n        this.element.offsetWidth; // eslint-disable-line no-unused-expressions\n\n        this.setItemTransitions(this.items);\n        this.element.style.transition = \"height \".concat(this.options.speed, \"ms \").concat(this.options.easing);\n      }\n      /**\r\n       * Returns a throttled and proxied function for the resize handler.\r\n       * @return {function}\r\n       * @private\r\n       */\n\n    }, {\n      key: \"_getResizeFunction\",\n      value: function _getResizeFunction() {\n        var resizeFunction = this._handleResize.bind(this);\n\n        return this.options.throttle ? this.options.throttle(resizeFunction, this.options.throttleTime) : resizeFunction;\n      }\n      /**\r\n       * Retrieve an element from an option.\r\n       * @param {string|jQuery|Element} option The option to check.\r\n       * @return {?Element} The plain element or null.\r\n       * @private\r\n       */\n\n    }, {\n      key: \"_getElementOption\",\n      value: function _getElementOption(option) {\n        // If column width is a string, treat is as a selector and search for the\n        // sizer element within the outermost container\n        if (typeof option === 'string') {\n          return this.element.querySelector(option);\n        } // Check for an element\n\n\n        if (option && option.nodeType && option.nodeType === 1) {\n          return option;\n        } // Check for jQuery object\n\n\n        if (option && option.jquery) {\n          return option[0];\n        }\n\n        return null;\n      }\n      /**\r\n       * Ensures the shuffle container has the css styles it needs applied to it.\r\n       * @param {Object} styles Key value pairs for position and overflow.\r\n       * @private\r\n       */\n\n    }, {\n      key: \"_validateStyles\",\n      value: function _validateStyles(styles) {\n        // Position cannot be static.\n        if (styles.position === 'static') {\n          this.element.style.position = 'relative';\n        } // Overflow has to be hidden.\n\n\n        if (styles.overflow !== 'hidden') {\n          this.element.style.overflow = 'hidden';\n        }\n      }\n      /**\r\n       * Filter the elements by a category.\r\n       * @param {string|string[]|function(Element):boolean} [category] Category to\r\n       *     filter by. If it's given, the last category will be used to filter the items.\r\n       * @param {Array} [collection] Optionally filter a collection. Defaults to\r\n       *     all the items.\r\n       * @return {{visible: ShuffleItem[], hidden: ShuffleItem[]}}\r\n       * @private\r\n       */\n\n    }, {\n      key: \"_filter\",\n      value: function _filter() {\n        var category = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.lastFilter;\n        var collection = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.items;\n\n        var set = this._getFilteredSets(category, collection); // Individually add/remove hidden/visible classes\n\n\n        this._toggleFilterClasses(set); // Save the last filter in case elements are appended.\n\n\n        this.lastFilter = category; // This is saved mainly because providing a filter function (like searching)\n        // will overwrite the `lastFilter` property every time its called.\n\n        if (typeof category === 'string') {\n          this.group = category;\n        }\n\n        return set;\n      }\n      /**\r\n       * Returns an object containing the visible and hidden elements.\r\n       * @param {string|string[]|function(Element):boolean} category Category or function to filter by.\r\n       * @param {ShuffleItem[]} items A collection of items to filter.\r\n       * @return {{visible: ShuffleItem[], hidden: ShuffleItem[]}}\r\n       * @private\r\n       */\n\n    }, {\n      key: \"_getFilteredSets\",\n      value: function _getFilteredSets(category, items) {\n        var _this2 = this;\n\n        var visible = [];\n        var hidden = []; // category === 'all', add visible class to everything\n\n        if (category === Shuffle.ALL_ITEMS) {\n          visible = items; // Loop through each item and use provided function to determine\n          // whether to hide it or not.\n        } else {\n          items.forEach(function (item) {\n            if (_this2._doesPassFilter(category, item.element)) {\n              visible.push(item);\n            } else {\n              hidden.push(item);\n            }\n          });\n        }\n\n        return {\n          visible: visible,\n          hidden: hidden\n        };\n      }\n      /**\r\n       * Test an item to see if it passes a category.\r\n       * @param {string|string[]|function():boolean} category Category or function to filter by.\r\n       * @param {Element} element An element to test.\r\n       * @return {boolean} Whether it passes the category/filter.\r\n       * @private\r\n       */\n\n    }, {\n      key: \"_doesPassFilter\",\n      value: function _doesPassFilter(category, element) {\n        if (typeof category === 'function') {\n          return category.call(element, element, this);\n        } // Check each element's data-groups attribute against the given category.\n\n\n        var attr = element.getAttribute('data-' + Shuffle.FILTER_ATTRIBUTE_KEY);\n        var keys = this.options.delimiter ? attr.split(this.options.delimiter) : JSON.parse(attr);\n\n        function testCategory(category) {\n          return keys.includes(category);\n        }\n\n        if (Array.isArray(category)) {\n          if (this.options.filterMode === Shuffle.FilterMode.ANY) {\n            return category.some(testCategory);\n          }\n\n          return category.every(testCategory);\n        }\n\n        return keys.includes(category);\n      }\n      /**\r\n       * Toggles the visible and hidden class names.\r\n       * @param {{visible, hidden}} Object with visible and hidden arrays.\r\n       * @private\r\n       */\n\n    }, {\n      key: \"_toggleFilterClasses\",\n      value: function _toggleFilterClasses(_ref) {\n        var visible = _ref.visible,\n            hidden = _ref.hidden;\n        visible.forEach(function (item) {\n          item.show();\n        });\n        hidden.forEach(function (item) {\n          item.hide();\n        });\n      }\n      /**\r\n       * Set the initial css for each item\r\n       * @param {ShuffleItem[]} items Set to initialize.\r\n       * @private\r\n       */\n\n    }, {\n      key: \"_initItems\",\n      value: function _initItems(items) {\n        items.forEach(function (item) {\n          item.init();\n        });\n      }\n      /**\r\n       * Remove element reference and styles.\r\n       * @param {ShuffleItem[]} items Set to dispose.\r\n       * @private\r\n       */\n\n    }, {\n      key: \"_disposeItems\",\n      value: function _disposeItems(items) {\n        items.forEach(function (item) {\n          item.dispose();\n        });\n      }\n      /**\r\n       * Updates the visible item count.\r\n       * @private\r\n       */\n\n    }, {\n      key: \"_updateItemCount\",\n      value: function _updateItemCount() {\n        this.visibleItems = this._getFilteredItems().length;\n      }\n      /**\r\n       * Sets css transform transition on a group of elements. This is not executed\r\n       * at the same time as `item.init` so that transitions don't occur upon\r\n       * initialization of a new Shuffle instance.\r\n       * @param {ShuffleItem[]} items Shuffle items to set transitions on.\r\n       * @protected\r\n       */\n\n    }, {\n      key: \"setItemTransitions\",\n      value: function setItemTransitions(items) {\n        var _this$options = this.options,\n            speed = _this$options.speed,\n            easing = _this$options.easing;\n        var positionProps = this.options.useTransforms ? ['transform'] : ['top', 'left']; // Allow users to transtion other properties if they exist in the `before`\n        // css mapping of the shuffle item.\n\n        var cssProps = Object.keys(ShuffleItem.Css.HIDDEN.before).map(function (k) {\n          return hyphenate(k);\n        });\n        var properties = positionProps.concat(cssProps).join();\n        items.forEach(function (item) {\n          item.element.style.transitionDuration = speed + 'ms';\n          item.element.style.transitionTimingFunction = easing;\n          item.element.style.transitionProperty = properties;\n        });\n      }\n    }, {\n      key: \"_getItems\",\n      value: function _getItems() {\n        var _this3 = this;\n\n        return Array.from(this.element.children).filter(function (el) {\n          return matchesSelector(el, _this3.options.itemSelector);\n        }).map(function (el) {\n          return new ShuffleItem(el);\n        });\n      }\n      /**\r\n       * Combine the current items array with a new one and sort it by DOM order.\r\n       * @param {ShuffleItem[]} items Items to track.\r\n       * @return {ShuffleItem[]}\r\n       */\n\n    }, {\n      key: \"_mergeNewItems\",\n      value: function _mergeNewItems(items) {\n        var children = Array.from(this.element.children);\n        return sorter(this.items.concat(items), {\n          by: function by(element) {\n            return children.indexOf(element);\n          }\n        });\n      }\n    }, {\n      key: \"_getFilteredItems\",\n      value: function _getFilteredItems() {\n        return this.items.filter(function (item) {\n          return item.isVisible;\n        });\n      }\n    }, {\n      key: \"_getConcealedItems\",\n      value: function _getConcealedItems() {\n        return this.items.filter(function (item) {\n          return !item.isVisible;\n        });\n      }\n      /**\r\n       * Returns the column size, based on column width and sizer options.\r\n       * @param {number} containerWidth Size of the parent container.\r\n       * @param {number} gutterSize Size of the gutters.\r\n       * @return {number}\r\n       * @private\r\n       */\n\n    }, {\n      key: \"_getColumnSize\",\n      value: function _getColumnSize(containerWidth, gutterSize) {\n        var size; // If the columnWidth property is a function, then the grid is fluid\n\n        if (typeof this.options.columnWidth === 'function') {\n          size = this.options.columnWidth(containerWidth); // columnWidth option isn't a function, are they using a sizing element?\n        } else if (this.options.sizer) {\n          size = Shuffle.getSize(this.options.sizer).width; // if not, how about the explicitly set option?\n        } else if (this.options.columnWidth) {\n          size = this.options.columnWidth; // or use the size of the first item\n        } else if (this.items.length > 0) {\n          size = Shuffle.getSize(this.items[0].element, true).width; // if there's no items, use size of container\n        } else {\n          size = containerWidth;\n        } // Don't let them set a column width of zero.\n\n\n        if (size === 0) {\n          size = containerWidth;\n        }\n\n        return size + gutterSize;\n      }\n      /**\r\n       * Returns the gutter size, based on gutter width and sizer options.\r\n       * @param {number} containerWidth Size of the parent container.\r\n       * @return {number}\r\n       * @private\r\n       */\n\n    }, {\n      key: \"_getGutterSize\",\n      value: function _getGutterSize(containerWidth) {\n        var size;\n\n        if (typeof this.options.gutterWidth === 'function') {\n          size = this.options.gutterWidth(containerWidth);\n        } else if (this.options.sizer) {\n          size = getNumberStyle(this.options.sizer, 'marginLeft');\n        } else {\n          size = this.options.gutterWidth;\n        }\n\n        return size;\n      }\n      /**\r\n       * Calculate the number of columns to be used. Gets css if using sizer element.\r\n       * @param {number} [containerWidth] Optionally specify a container width if\r\n       *    it's already available.\r\n       */\n\n    }, {\n      key: \"_setColumns\",\n      value: function _setColumns() {\n        var containerWidth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Shuffle.getSize(this.element).width;\n\n        var gutter = this._getGutterSize(containerWidth);\n\n        var columnWidth = this._getColumnSize(containerWidth, gutter);\n\n        var calculatedColumns = (containerWidth + gutter) / columnWidth; // Widths given from getStyles are not precise enough...\n\n        if (Math.abs(Math.round(calculatedColumns) - calculatedColumns) < this.options.columnThreshold) {\n          // e.g. calculatedColumns = 11.998876\n          calculatedColumns = Math.round(calculatedColumns);\n        }\n\n        this.cols = Math.max(Math.floor(calculatedColumns || 0), 1);\n        this.containerWidth = containerWidth;\n        this.colWidth = columnWidth;\n      }\n      /**\r\n       * Adjust the height of the grid\r\n       */\n\n    }, {\n      key: \"_setContainerSize\",\n      value: function _setContainerSize() {\n        this.element.style.height = this._getContainerSize() + 'px';\n      }\n      /**\r\n       * Based on the column heights, it returns the biggest one.\r\n       * @return {number}\r\n       * @private\r\n       */\n\n    }, {\n      key: \"_getContainerSize\",\n      value: function _getContainerSize() {\n        return arrayMax(this.positions);\n      }\n      /**\r\n       * Get the clamped stagger amount.\r\n       * @param {number} index Index of the item to be staggered.\r\n       * @return {number}\r\n       */\n\n    }, {\n      key: \"_getStaggerAmount\",\n      value: function _getStaggerAmount(index) {\n        return Math.min(index * this.options.staggerAmount, this.options.staggerAmountMax);\n      }\n      /**\r\n       * Emit an event from this instance.\r\n       * @param {string} name Event name.\r\n       * @param {Object} [data={}] Optional object data.\r\n       */\n\n    }, {\n      key: \"_dispatch\",\n      value: function _dispatch(name) {\n        var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        if (this.isDestroyed) {\n          return;\n        }\n\n        data.shuffle = this;\n        this.emit(name, data);\n      }\n      /**\r\n       * Zeros out the y columns array, which is used to determine item placement.\r\n       * @private\r\n       */\n\n    }, {\n      key: \"_resetCols\",\n      value: function _resetCols() {\n        var i = this.cols;\n        this.positions = [];\n\n        while (i) {\n          i -= 1;\n          this.positions.push(0);\n        }\n      }\n      /**\r\n       * Loops through each item that should be shown and calculates the x, y position.\r\n       * @param {ShuffleItem[]} items Array of items that will be shown/layed\r\n       *     out in order in their array.\r\n       */\n\n    }, {\n      key: \"_layout\",\n      value: function _layout(items) {\n        var _this4 = this;\n\n        var itemPositions = this._getNextPositions(items);\n\n        var count = 0;\n        items.forEach(function (item, i) {\n          function callback() {\n            item.applyCss(ShuffleItem.Css.VISIBLE.after);\n          } // If the item will not change its position, do not add it to the render\n          // queue. Transitions don't fire when setting a property to the same value.\n\n\n          if (Point.equals(item.point, itemPositions[i]) && !item.isHidden) {\n            item.applyCss(ShuffleItem.Css.VISIBLE.before);\n            callback();\n            return;\n          }\n\n          item.point = itemPositions[i];\n          item.scale = ShuffleItem.Scale.VISIBLE;\n          item.isHidden = false; // Clone the object so that the `before` object isn't modified when the\n          // transition delay is added.\n\n          var styles = _this4.getStylesForTransition(item, ShuffleItem.Css.VISIBLE.before);\n\n          styles.transitionDelay = _this4._getStaggerAmount(count) + 'ms';\n\n          _this4._queue.push({\n            item: item,\n            styles: styles,\n            callback: callback\n          });\n\n          count += 1;\n        });\n      }\n      /**\r\n       * Return an array of Point instances representing the future positions of\r\n       * each item.\r\n       * @param {ShuffleItem[]} items Array of sorted shuffle items.\r\n       * @return {Point[]}\r\n       * @private\r\n       */\n\n    }, {\n      key: \"_getNextPositions\",\n      value: function _getNextPositions(items) {\n        var _this5 = this; // If position data is going to be changed, add the item's size to the\n        // transformer to allow for calculations.\n\n\n        if (this.options.isCentered) {\n          var itemsData = items.map(function (item, i) {\n            var itemSize = Shuffle.getSize(item.element, true);\n\n            var point = _this5._getItemPosition(itemSize);\n\n            return new Rect(point.x, point.y, itemSize.width, itemSize.height, i);\n          });\n          return this.getTransformedPositions(itemsData, this.containerWidth);\n        } // If no transforms are going to happen, simply return an array of the\n        // future points of each item.\n\n\n        return items.map(function (item) {\n          return _this5._getItemPosition(Shuffle.getSize(item.element, true));\n        });\n      }\n      /**\r\n       * Determine the location of the next item, based on its size.\r\n       * @param {{width: number, height: number}} itemSize Object with width and height.\r\n       * @return {Point}\r\n       * @private\r\n       */\n\n    }, {\n      key: \"_getItemPosition\",\n      value: function _getItemPosition(itemSize) {\n        return getItemPosition({\n          itemSize: itemSize,\n          positions: this.positions,\n          gridSize: this.colWidth,\n          total: this.cols,\n          threshold: this.options.columnThreshold,\n          buffer: this.options.buffer\n        });\n      }\n      /**\r\n       * Mutate positions before they're applied.\r\n       * @param {Rect[]} itemRects Item data objects.\r\n       * @param {number} containerWidth Width of the containing element.\r\n       * @return {Point[]}\r\n       * @protected\r\n       */\n\n    }, {\n      key: \"getTransformedPositions\",\n      value: function getTransformedPositions(itemRects, containerWidth) {\n        return getCenteredPositions(itemRects, containerWidth);\n      }\n      /**\r\n       * Hides the elements that don't match our filter.\r\n       * @param {ShuffleItem[]} collection Collection to shrink.\r\n       * @private\r\n       */\n\n    }, {\n      key: \"_shrink\",\n      value: function _shrink() {\n        var _this6 = this;\n\n        var collection = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._getConcealedItems();\n        var count = 0;\n        collection.forEach(function (item) {\n          function callback() {\n            item.applyCss(ShuffleItem.Css.HIDDEN.after);\n          } // Continuing would add a transitionend event listener to the element, but\n          // that listener would not execute because the transform and opacity would\n          // stay the same.\n          // The callback is executed here because it is not guaranteed to be called\n          // after the transitionend event because the transitionend could be\n          // canceled if another animation starts.\n\n\n          if (item.isHidden) {\n            item.applyCss(ShuffleItem.Css.HIDDEN.before);\n            callback();\n            return;\n          }\n\n          item.scale = ShuffleItem.Scale.HIDDEN;\n          item.isHidden = true;\n\n          var styles = _this6.getStylesForTransition(item, ShuffleItem.Css.HIDDEN.before);\n\n          styles.transitionDelay = _this6._getStaggerAmount(count) + 'ms';\n\n          _this6._queue.push({\n            item: item,\n            styles: styles,\n            callback: callback\n          });\n\n          count += 1;\n        });\n      }\n      /**\r\n       * Resize handler.\r\n       * @private\r\n       */\n\n    }, {\n      key: \"_handleResize\",\n      value: function _handleResize() {\n        // If shuffle is disabled, destroyed, don't do anything\n        if (!this.isEnabled || this.isDestroyed) {\n          return;\n        }\n\n        this.update();\n      }\n      /**\r\n       * Returns styles which will be applied to the an item for a transition.\r\n       * @param {ShuffleItem} item Item to get styles for. Should have updated\r\n       *   scale and point properties.\r\n       * @param {Object} styleObject Extra styles that will be used in the transition.\r\n       * @return {!Object} Transforms for transitions, left/top for animate.\r\n       * @protected\r\n       */\n\n    }, {\n      key: \"getStylesForTransition\",\n      value: function getStylesForTransition(item, styleObject) {\n        // Clone the object to avoid mutating the original.\n        var styles = Object.assign({}, styleObject);\n\n        if (this.options.useTransforms) {\n          var x = this.options.roundTransforms ? Math.round(item.point.x) : item.point.x;\n          var y = this.options.roundTransforms ? Math.round(item.point.y) : item.point.y;\n          styles.transform = \"translate(\".concat(x, \"px, \").concat(y, \"px) scale(\").concat(item.scale, \")\");\n        } else {\n          styles.left = item.point.x + 'px';\n          styles.top = item.point.y + 'px';\n        }\n\n        return styles;\n      }\n      /**\r\n       * Listen for the transition end on an element and execute the itemCallback\r\n       * when it finishes.\r\n       * @param {Element} element Element to listen on.\r\n       * @param {function} itemCallback Callback for the item.\r\n       * @param {function} done Callback to notify `parallel` that this one is done.\r\n       */\n\n    }, {\n      key: \"_whenTransitionDone\",\n      value: function _whenTransitionDone(element, itemCallback, done) {\n        var id = onTransitionEnd(element, function (evt) {\n          itemCallback();\n          done(null, evt);\n        });\n\n        this._transitions.push(id);\n      }\n      /**\r\n       * Return a function which will set CSS styles and call the `done` function\r\n       * when (if) the transition finishes.\r\n       * @param {Object} opts Transition object.\r\n       * @return {function} A function to be called with a `done` function.\r\n       */\n\n    }, {\n      key: \"_getTransitionFunction\",\n      value: function _getTransitionFunction(opts) {\n        var _this7 = this;\n\n        return function (done) {\n          opts.item.applyCss(opts.styles);\n\n          _this7._whenTransitionDone(opts.item.element, opts.callback, done);\n        };\n      }\n      /**\r\n       * Execute the styles gathered in the style queue. This applies styles to elements,\r\n       * triggering transitions.\r\n       * @private\r\n       */\n\n    }, {\n      key: \"_processQueue\",\n      value: function _processQueue() {\n        if (this.isTransitioning) {\n          this._cancelMovement();\n        }\n\n        var hasSpeed = this.options.speed > 0;\n        var hasQueue = this._queue.length > 0;\n\n        if (hasQueue && hasSpeed && this.isInitialized) {\n          this._startTransitions(this._queue);\n        } else if (hasQueue) {\n          this._styleImmediately(this._queue);\n\n          this._dispatch(Shuffle.EventType.LAYOUT); // A call to layout happened, but none of the newly visible items will\n          // change position or the transition duration is zero, which will not trigger\n          // the transitionend event.\n\n        } else {\n          this._dispatch(Shuffle.EventType.LAYOUT);\n        } // Remove everything in the style queue\n\n\n        this._queue.length = 0;\n      }\n      /**\r\n       * Wait for each transition to finish, the emit the layout event.\r\n       * @param {Object[]} transitions Array of transition objects.\r\n       */\n\n    }, {\n      key: \"_startTransitions\",\n      value: function _startTransitions(transitions) {\n        var _this8 = this; // Set flag that shuffle is currently in motion.\n\n\n        this.isTransitioning = true; // Create an array of functions to be called.\n\n        var callbacks = transitions.map(function (obj) {\n          return _this8._getTransitionFunction(obj);\n        });\n        arrayParallel(callbacks, this._movementFinished.bind(this));\n      }\n    }, {\n      key: \"_cancelMovement\",\n      value: function _cancelMovement() {\n        // Remove the transition end event for each listener.\n        this._transitions.forEach(cancelTransitionEnd); // Reset the array.\n\n\n        this._transitions.length = 0; // Show it's no longer active.\n\n        this.isTransitioning = false;\n      }\n      /**\r\n       * Apply styles without a transition.\r\n       * @param {Object[]} objects Array of transition objects.\r\n       * @private\r\n       */\n\n    }, {\n      key: \"_styleImmediately\",\n      value: function _styleImmediately(objects) {\n        if (objects.length) {\n          var elements = objects.map(function (obj) {\n            return obj.item.element;\n          });\n\n          Shuffle._skipTransitions(elements, function () {\n            objects.forEach(function (obj) {\n              obj.item.applyCss(obj.styles);\n              obj.callback();\n            });\n          });\n        }\n      }\n    }, {\n      key: \"_movementFinished\",\n      value: function _movementFinished() {\n        this._transitions.length = 0;\n        this.isTransitioning = false;\n\n        this._dispatch(Shuffle.EventType.LAYOUT);\n      }\n      /**\r\n       * The magic. This is what makes the plugin 'shuffle'\r\n       * @param {string|string[]|function(Element):boolean} [category] Category to filter by.\r\n       *     Can be a function, string, or array of strings.\r\n       * @param {SortOptions} [sortOptions] A sort object which can sort the visible set\r\n       */\n\n    }, {\n      key: \"filter\",\n      value: function filter(category, sortOptions) {\n        if (!this.isEnabled) {\n          return;\n        }\n\n        if (!category || category && category.length === 0) {\n          category = Shuffle.ALL_ITEMS; // eslint-disable-line no-param-reassign\n        }\n\n        this._filter(category); // Shrink each hidden item\n\n\n        this._shrink(); // How many visible elements?\n\n\n        this._updateItemCount(); // Update transforms on visible elements so they will animate to their new positions.\n\n\n        this.sort(sortOptions);\n      }\n      /**\r\n       * Gets the visible elements, sorts them, and passes them to layout.\r\n       * @param {SortOptions} [sortOptions] The options object to pass to `sorter`.\r\n       */\n\n    }, {\n      key: \"sort\",\n      value: function sort() {\n        var sortOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.lastSort;\n\n        if (!this.isEnabled) {\n          return;\n        }\n\n        this._resetCols();\n\n        var items = sorter(this._getFilteredItems(), sortOptions);\n\n        this._layout(items); // `_layout` always happens after `_shrink`, so it's safe to process the style\n        // queue here with styles from the shrink method.\n\n\n        this._processQueue(); // Adjust the height of the container.\n\n\n        this._setContainerSize();\n\n        this.lastSort = sortOptions;\n      }\n      /**\r\n       * Reposition everything.\r\n       * @param {boolean} [isOnlyLayout=false] If true, column and gutter widths won't be recalculated.\r\n       */\n\n    }, {\n      key: \"update\",\n      value: function update() {\n        var isOnlyLayout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n        if (this.isEnabled) {\n          if (!isOnlyLayout) {\n            // Get updated colCount\n            this._setColumns();\n          } // Layout items\n\n\n          this.sort();\n        }\n      }\n      /**\r\n       * Use this instead of `update()` if you don't need the columns and gutters updated\r\n       * Maybe an image inside `shuffle` loaded (and now has a height), which means calculations\r\n       * could be off.\r\n       */\n\n    }, {\n      key: \"layout\",\n      value: function layout() {\n        this.update(true);\n      }\n      /**\r\n       * New items have been appended to shuffle. Mix them in with the current\r\n       * filter or sort status.\r\n       * @param {Element[]} newItems Collection of new items.\r\n       */\n\n    }, {\n      key: \"add\",\n      value: function add(newItems) {\n        var _this9 = this;\n\n        var items = arrayUnique(newItems).map(function (el) {\n          return new ShuffleItem(el);\n        }); // Add classes and set initial positions.\n\n        this._initItems(items); // Determine which items will go with the current filter.\n\n\n        this._resetCols();\n\n        var allItems = this._mergeNewItems(items);\n\n        var sortedItems = sorter(allItems, this.lastSort);\n\n        var allSortedItemsSet = this._filter(this.lastFilter, sortedItems);\n\n        var isNewItem = function isNewItem(item) {\n          return items.includes(item);\n        };\n\n        var applyHiddenState = function applyHiddenState(item) {\n          item.scale = ShuffleItem.Scale.HIDDEN;\n          item.isHidden = true;\n          item.applyCss(ShuffleItem.Css.HIDDEN.before);\n          item.applyCss(ShuffleItem.Css.HIDDEN.after);\n        }; // Layout all items again so that new items get positions.\n        // Synchonously apply positions.\n\n\n        var itemPositions = this._getNextPositions(allSortedItemsSet.visible);\n\n        allSortedItemsSet.visible.forEach(function (item, i) {\n          if (isNewItem(item)) {\n            item.point = itemPositions[i];\n            applyHiddenState(item);\n            item.applyCss(_this9.getStylesForTransition(item, {}));\n          }\n        });\n        allSortedItemsSet.hidden.forEach(function (item) {\n          if (isNewItem(item)) {\n            applyHiddenState(item);\n          }\n        }); // Cause layout so that the styles above are applied.\n\n        this.element.offsetWidth; // eslint-disable-line no-unused-expressions\n        // Add transition to each item.\n\n        this.setItemTransitions(items); // Update the list of items.\n\n        this.items = this._mergeNewItems(items); // Update layout/visibility of new and old items.\n\n        this.filter(this.lastFilter);\n      }\n      /**\r\n       * Disables shuffle from updating dimensions and layout on resize\r\n       */\n\n    }, {\n      key: \"disable\",\n      value: function disable() {\n        this.isEnabled = false;\n      }\n      /**\r\n       * Enables shuffle again\r\n       * @param {boolean} [isUpdateLayout=true] if undefined, shuffle will update columns and gutters\r\n       */\n\n    }, {\n      key: \"enable\",\n      value: function enable() {\n        var isUpdateLayout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        this.isEnabled = true;\n\n        if (isUpdateLayout) {\n          this.update();\n        }\n      }\n      /**\r\n       * Remove 1 or more shuffle items.\r\n       * @param {Element[]} elements An array containing one or more\r\n       *     elements in shuffle\r\n       * @return {Shuffle} The shuffle instance.\r\n       */\n\n    }, {\n      key: \"remove\",\n      value: function remove(elements) {\n        var _this10 = this;\n\n        if (!elements.length) {\n          return;\n        }\n\n        var collection = arrayUnique(elements);\n        var oldItems = collection.map(function (element) {\n          return _this10.getItemByElement(element);\n        }).filter(function (item) {\n          return !!item;\n        });\n\n        var handleLayout = function handleLayout() {\n          _this10._disposeItems(oldItems); // Remove the collection in the callback\n\n\n          collection.forEach(function (element) {\n            element.parentNode.removeChild(element);\n          });\n\n          _this10._dispatch(Shuffle.EventType.REMOVED, {\n            collection: collection\n          });\n        }; // Hide collection first.\n\n\n        this._toggleFilterClasses({\n          visible: [],\n          hidden: oldItems\n        });\n\n        this._shrink(oldItems);\n\n        this.sort(); // Update the list of items here because `remove` could be called again\n        // with an item that is in the process of being removed.\n\n        this.items = this.items.filter(function (item) {\n          return !oldItems.includes(item);\n        });\n\n        this._updateItemCount();\n\n        this.once(Shuffle.EventType.LAYOUT, handleLayout);\n      }\n      /**\r\n       * Retrieve a shuffle item by its element.\r\n       * @param {Element} element Element to look for.\r\n       * @return {?ShuffleItem} A shuffle item or undefined if it's not found.\r\n       */\n\n    }, {\n      key: \"getItemByElement\",\n      value: function getItemByElement(element) {\n        return this.items.find(function (item) {\n          return item.element === element;\n        });\n      }\n      /**\r\n       * Dump the elements currently stored and reinitialize all child elements which\r\n       * match the `itemSelector`.\r\n       */\n\n    }, {\n      key: \"resetItems\",\n      value: function resetItems() {\n        var _this11 = this; // Remove refs to current items.\n\n\n        this._disposeItems(this.items);\n\n        this.isInitialized = false; // Find new items in the DOM.\n\n        this.items = this._getItems(); // Set initial styles on the new items.\n\n        this._initItems(this.items);\n\n        this.once(Shuffle.EventType.LAYOUT, function () {\n          // Add transition to each item.\n          _this11.setItemTransitions(_this11.items);\n\n          _this11.isInitialized = true;\n        }); // Lay out all items.\n\n        this.filter(this.lastFilter);\n      }\n      /**\r\n       * Destroys shuffle, removes events, styles, and classes\r\n       */\n\n    }, {\n      key: \"destroy\",\n      value: function destroy() {\n        this._cancelMovement();\n\n        window.removeEventListener('resize', this._onResize); // Reset container styles\n\n        this.element.classList.remove('shuffle');\n        this.element.removeAttribute('style'); // Reset individual item styles\n\n        this._disposeItems(this.items);\n\n        this.items.length = 0;\n        this._transitions.length = 0; // Null DOM references\n\n        this.options.sizer = null;\n        this.element = null; // Set a flag so if a debounced resize has been triggered,\n        // it can first check if it is actually isDestroyed and not doing anything\n\n        this.isDestroyed = true;\n        this.isEnabled = false;\n      }\n      /**\r\n       * Returns the outer width of an element, optionally including its margins.\r\n       *\r\n       * There are a few different methods for getting the width of an element, none of\r\n       * which work perfectly for all Shuffle's use cases.\r\n       *\r\n       * 1. getBoundingClientRect() `left` and `right` properties.\r\n       *   - Accounts for transform scaled elements, making it useless for Shuffle\r\n       *   elements which have shrunk.\r\n       * 2. The `offsetWidth` property.\r\n       *   - This value stays the same regardless of the elements transform property,\r\n       *   however, it does not return subpixel values.\r\n       * 3. getComputedStyle()\r\n       *   - This works great Chrome, Firefox, Safari, but IE<=11 does not include\r\n       *   padding and border when box-sizing: border-box is set, requiring a feature\r\n       *   test and extra work to add the padding back for IE and other browsers which\r\n       *   follow the W3C spec here.\r\n       *\r\n       * @param {Element} element The element.\r\n       * @param {boolean} [includeMargins=false] Whether to include margins.\r\n       * @return {{width: number, height: number}} The width and height.\r\n       */\n\n    }], [{\n      key: \"getSize\",\n      value: function getSize(element) {\n        var includeMargins = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false; // Store the styles so that they can be used by others without asking for it again.\n\n        var styles = window.getComputedStyle(element, null);\n        var width = getNumberStyle(element, 'width', styles);\n        var height = getNumberStyle(element, 'height', styles);\n\n        if (includeMargins) {\n          var marginLeft = getNumberStyle(element, 'marginLeft', styles);\n          var marginRight = getNumberStyle(element, 'marginRight', styles);\n          var marginTop = getNumberStyle(element, 'marginTop', styles);\n          var marginBottom = getNumberStyle(element, 'marginBottom', styles);\n          width += marginLeft + marginRight;\n          height += marginTop + marginBottom;\n        }\n\n        return {\n          width: width,\n          height: height\n        };\n      }\n      /**\r\n       * Change a property or execute a function which will not have a transition\r\n       * @param {Element[]} elements DOM elements that won't be transitioned.\r\n       * @param {function} callback A function which will be called while transition\r\n       *     is set to 0ms.\r\n       * @private\r\n       */\n\n    }, {\n      key: \"_skipTransitions\",\n      value: function _skipTransitions(elements, callback) {\n        var zero = '0ms'; // Save current duration and delay.\n\n        var data = elements.map(function (element) {\n          var style = element.style;\n          var duration = style.transitionDuration;\n          var delay = style.transitionDelay; // Set the duration to zero so it happens immediately\n\n          style.transitionDuration = zero;\n          style.transitionDelay = zero;\n          return {\n            duration: duration,\n            delay: delay\n          };\n        });\n        callback(); // Cause forced synchronous layout.\n\n        elements[0].offsetWidth; // eslint-disable-line no-unused-expressions\n        // Put the duration back\n\n        elements.forEach(function (element, i) {\n          element.style.transitionDuration = data[i].duration;\n          element.style.transitionDelay = data[i].delay;\n        });\n      }\n    }]);\n\n    return Shuffle;\n  }(tinyEmitter);\n\n  Shuffle.ShuffleItem = ShuffleItem;\n  Shuffle.ALL_ITEMS = 'all';\n  Shuffle.FILTER_ATTRIBUTE_KEY = 'groups';\n  /** @enum {string} */\n\n  Shuffle.EventType = {\n    LAYOUT: 'shuffle:layout',\n    REMOVED: 'shuffle:removed'\n  };\n  /** @enum {string} */\n\n  Shuffle.Classes = Classes;\n  /** @enum {string} */\n\n  Shuffle.FilterMode = {\n    ANY: 'any',\n    ALL: 'all'\n  }; // Overrideable options\n\n  Shuffle.options = {\n    // Initial filter group.\n    group: Shuffle.ALL_ITEMS,\n    // Transition/animation speed (milliseconds).\n    speed: 250,\n    // CSS easing function to use.\n    easing: 'cubic-bezier(0.4, 0.0, 0.2, 1)',\n    // e.g. '.picture-item'.\n    itemSelector: '*',\n    // Element or selector string. Use an element to determine the size of columns\n    // and gutters.\n    sizer: null,\n    // A static number or function that tells the plugin how wide the gutters\n    // between columns are (in pixels).\n    gutterWidth: 0,\n    // A static number or function that returns a number which tells the plugin\n    // how wide the columns are (in pixels).\n    columnWidth: 0,\n    // If your group is not json, and is comma delimeted, you could set delimiter\n    // to ','.\n    delimiter: null,\n    // Useful for percentage based heights when they might not always be exactly\n    // the same (in pixels).\n    buffer: 0,\n    // Reading the width of elements isn't precise enough and can cause columns to\n    // jump between values.\n    columnThreshold: 0.01,\n    // Shuffle can be isInitialized with a sort object. It is the same object\n    // given to the sort method.\n    initialSort: null,\n    // By default, shuffle will throttle resize events. This can be changed or\n    // removed.\n    throttle: throttleit,\n    // How often shuffle can be called on resize (in milliseconds).\n    throttleTime: 300,\n    // Transition delay offset for each item in milliseconds.\n    staggerAmount: 15,\n    // Maximum stagger delay in milliseconds.\n    staggerAmountMax: 150,\n    // Whether to use transforms or absolute positioning.\n    useTransforms: true,\n    // Affects using an array with filter. e.g. `filter(['one', 'two'])`. With \"any\",\n    // the element passes the test if any of its groups are in the array. With \"all\",\n    // the element only passes if all groups are in the array.\n    filterMode: Shuffle.FilterMode.ANY,\n    // Attempt to center grid items in each row.\n    isCentered: false,\n    // Whether to round pixel values used in translate(x, y). This usually avoids\n    // blurriness.\n    roundTransforms: true\n  };\n  Shuffle.Point = Point;\n  Shuffle.Rect = Rect; // Expose for testing. Hack at your own risk.\n\n  Shuffle.__sorter = sorter;\n  Shuffle.__getColumnSpan = getColumnSpan;\n  Shuffle.__getAvailablePositions = getAvailablePositions;\n  Shuffle.__getShortColumn = getShortColumn;\n  Shuffle.__getCenteredPositions = getCenteredPositions;\n  return Shuffle;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9qcy9TaHVmZmxlLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vanMvU2h1ZmZsZS5qcz82YTNjIl0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XHJcbiAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxyXG4gIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShmYWN0b3J5KSA6XHJcbiAgKGdsb2JhbCA9IGdsb2JhbCB8fCBzZWxmLCBnbG9iYWwuU2h1ZmZsZSA9IGZhY3RvcnkoKSk7XHJcbn0odGhpcywgZnVuY3Rpb24gKCkgeyAndXNlIHN0cmljdCc7XHJcblxyXG4gIGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcclxuICAgIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XHJcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XHJcbiAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcclxuICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xyXG4gICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xyXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XHJcbiAgICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcclxuICAgIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcclxuICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xyXG4gICAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xyXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7XHJcbiAgICB9XHJcblxyXG4gICAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XHJcbiAgICAgIGNvbnN0cnVjdG9yOiB7XHJcbiAgICAgICAgdmFsdWU6IHN1YkNsYXNzLFxyXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtcclxuICAgIF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XHJcbiAgICAgIHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XHJcbiAgICBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcclxuICAgICAgby5fX3Byb3RvX18gPSBwO1xyXG4gICAgICByZXR1cm4gbztcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikge1xyXG4gICAgaWYgKHNlbGYgPT09IHZvaWQgMCkge1xyXG4gICAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHNlbGY7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XHJcbiAgICBpZiAoY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHtcclxuICAgICAgcmV0dXJuIGNhbGw7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBFICgpIHtcclxuICAgIC8vIEtlZXAgdGhpcyBlbXB0eSBzbyBpdCdzIGVhc2llciB0byBpbmhlcml0IGZyb21cclxuICAgIC8vICh2aWEgaHR0cHM6Ly9naXRodWIuY29tL2xpcHNtYWNrIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL3Njb3R0Y29yZ2FuL3RpbnktZW1pdHRlci9pc3N1ZXMvMylcclxuICB9XHJcblxyXG4gIEUucHJvdG90eXBlID0ge1xyXG4gICAgb246IGZ1bmN0aW9uIChuYW1lLCBjYWxsYmFjaywgY3R4KSB7XHJcbiAgICAgIHZhciBlID0gdGhpcy5lIHx8ICh0aGlzLmUgPSB7fSk7XHJcblxyXG4gICAgICAoZVtuYW1lXSB8fCAoZVtuYW1lXSA9IFtdKSkucHVzaCh7XHJcbiAgICAgICAgZm46IGNhbGxiYWNrLFxyXG4gICAgICAgIGN0eDogY3R4XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9LFxyXG5cclxuICAgIG9uY2U6IGZ1bmN0aW9uIChuYW1lLCBjYWxsYmFjaywgY3R4KSB7XHJcbiAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgZnVuY3Rpb24gbGlzdGVuZXIgKCkge1xyXG4gICAgICAgIHNlbGYub2ZmKG5hbWUsIGxpc3RlbmVyKTtcclxuICAgICAgICBjYWxsYmFjay5hcHBseShjdHgsIGFyZ3VtZW50cyk7XHJcbiAgICAgIH1cclxuICAgICAgbGlzdGVuZXIuXyA9IGNhbGxiYWNrO1xyXG4gICAgICByZXR1cm4gdGhpcy5vbihuYW1lLCBsaXN0ZW5lciwgY3R4KTtcclxuICAgIH0sXHJcblxyXG4gICAgZW1pdDogZnVuY3Rpb24gKG5hbWUpIHtcclxuICAgICAgdmFyIGRhdGEgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XHJcbiAgICAgIHZhciBldnRBcnIgPSAoKHRoaXMuZSB8fCAodGhpcy5lID0ge30pKVtuYW1lXSB8fCBbXSkuc2xpY2UoKTtcclxuICAgICAgdmFyIGkgPSAwO1xyXG4gICAgICB2YXIgbGVuID0gZXZ0QXJyLmxlbmd0aDtcclxuXHJcbiAgICAgIGZvciAoaTsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgZXZ0QXJyW2ldLmZuLmFwcGx5KGV2dEFycltpXS5jdHgsIGRhdGEpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gdGhpcztcclxuICAgIH0sXHJcblxyXG4gICAgb2ZmOiBmdW5jdGlvbiAobmFtZSwgY2FsbGJhY2spIHtcclxuICAgICAgdmFyIGUgPSB0aGlzLmUgfHwgKHRoaXMuZSA9IHt9KTtcclxuICAgICAgdmFyIGV2dHMgPSBlW25hbWVdO1xyXG4gICAgICB2YXIgbGl2ZUV2ZW50cyA9IFtdO1xyXG5cclxuICAgICAgaWYgKGV2dHMgJiYgY2FsbGJhY2spIHtcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gZXZ0cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgaWYgKGV2dHNbaV0uZm4gIT09IGNhbGxiYWNrICYmIGV2dHNbaV0uZm4uXyAhPT0gY2FsbGJhY2spXHJcbiAgICAgICAgICAgIGxpdmVFdmVudHMucHVzaChldnRzW2ldKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIFJlbW92ZSBldmVudCBmcm9tIHF1ZXVlIHRvIHByZXZlbnQgbWVtb3J5IGxlYWtcclxuICAgICAgLy8gU3VnZ2VzdGVkIGJ5IGh0dHBzOi8vZ2l0aHViLmNvbS9sYXpkXHJcbiAgICAgIC8vIFJlZjogaHR0cHM6Ly9naXRodWIuY29tL3Njb3R0Y29yZ2FuL3RpbnktZW1pdHRlci9jb21taXQvYzZlYmZhYTliYzk3M2IzM2QxMTBhODRhMzA3NzQyYjdjZjk0Yzk1MyNjb21taXRjb21tZW50LTUwMjQ5MTBcclxuXHJcbiAgICAgIChsaXZlRXZlbnRzLmxlbmd0aClcclxuICAgICAgICA/IGVbbmFtZV0gPSBsaXZlRXZlbnRzXHJcbiAgICAgICAgOiBkZWxldGUgZVtuYW1lXTtcclxuXHJcbiAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHZhciB0aW55RW1pdHRlciA9IEU7XHJcbiAgdmFyIFRpbnlFbWl0dGVyID0gRTtcclxuICB0aW55RW1pdHRlci5UaW55RW1pdHRlciA9IFRpbnlFbWl0dGVyO1xyXG5cclxuICB2YXIgcHJvdG8gPSB0eXBlb2YgRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcgPyBFbGVtZW50LnByb3RvdHlwZSA6IHt9O1xyXG4gIHZhciB2ZW5kb3IgPSBwcm90by5tYXRjaGVzXHJcbiAgICB8fCBwcm90by5tYXRjaGVzU2VsZWN0b3JcclxuICAgIHx8IHByb3RvLndlYmtpdE1hdGNoZXNTZWxlY3RvclxyXG4gICAgfHwgcHJvdG8ubW96TWF0Y2hlc1NlbGVjdG9yXHJcbiAgICB8fCBwcm90by5tc01hdGNoZXNTZWxlY3RvclxyXG4gICAgfHwgcHJvdG8ub01hdGNoZXNTZWxlY3RvcjtcclxuXHJcbiAgdmFyIG1hdGNoZXNTZWxlY3RvciA9IG1hdGNoO1xyXG5cclxuICAvKipcclxuICAgKiBNYXRjaCBgZWxgIHRvIGBzZWxlY3RvcmAuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsXHJcbiAgICogQHBhcmFtIHtTdHJpbmd9IHNlbGVjdG9yXHJcbiAgICogQHJldHVybiB7Qm9vbGVhbn1cclxuICAgKiBAYXBpIHB1YmxpY1xyXG4gICAqL1xyXG5cclxuICBmdW5jdGlvbiBtYXRjaChlbCwgc2VsZWN0b3IpIHtcclxuICAgIGlmICghZWwgfHwgZWwubm9kZVR5cGUgIT09IDEpIHJldHVybiBmYWxzZTtcclxuICAgIGlmICh2ZW5kb3IpIHJldHVybiB2ZW5kb3IuY2FsbChlbCwgc2VsZWN0b3IpO1xyXG4gICAgdmFyIG5vZGVzID0gZWwucGFyZW50Tm9kZS5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgaWYgKG5vZGVzW2ldID09IGVsKSByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcblxyXG4gIHZhciB0aHJvdHRsZWl0ID0gdGhyb3R0bGU7XHJcblxyXG4gIC8qKlxyXG4gICAqIFJldHVybnMgYSBuZXcgZnVuY3Rpb24gdGhhdCwgd2hlbiBpbnZva2VkLCBpbnZva2VzIGBmdW5jYCBhdCBtb3N0IG9uY2UgcGVyIGB3YWl0YCBtaWxsaXNlY29uZHMuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIEZ1bmN0aW9uIHRvIHdyYXAuXHJcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHdhaXQgTnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0aGF0IG11c3QgZWxhcHNlIGJldHdlZW4gYGZ1bmNgIGludm9jYXRpb25zLlxyXG4gICAqIEByZXR1cm4ge0Z1bmN0aW9ufSBBIG5ldyBmdW5jdGlvbiB0aGF0IHdyYXBzIHRoZSBgZnVuY2AgZnVuY3Rpb24gcGFzc2VkIGluLlxyXG4gICAqL1xyXG5cclxuICBmdW5jdGlvbiB0aHJvdHRsZSAoZnVuYywgd2FpdCkge1xyXG4gICAgdmFyIGN0eCwgYXJncywgcnRuLCB0aW1lb3V0SUQ7IC8vIGNhY2hpbmdcclxuICAgIHZhciBsYXN0ID0gMDtcclxuXHJcbiAgICByZXR1cm4gZnVuY3Rpb24gdGhyb3R0bGVkICgpIHtcclxuICAgICAgY3R4ID0gdGhpcztcclxuICAgICAgYXJncyA9IGFyZ3VtZW50cztcclxuICAgICAgdmFyIGRlbHRhID0gbmV3IERhdGUoKSAtIGxhc3Q7XHJcbiAgICAgIGlmICghdGltZW91dElEKVxyXG4gICAgICAgIGlmIChkZWx0YSA+PSB3YWl0KSBjYWxsKCk7XHJcbiAgICAgICAgZWxzZSB0aW1lb3V0SUQgPSBzZXRUaW1lb3V0KGNhbGwsIHdhaXQgLSBkZWx0YSk7XHJcbiAgICAgIHJldHVybiBydG47XHJcbiAgICB9O1xyXG5cclxuICAgIGZ1bmN0aW9uIGNhbGwgKCkge1xyXG4gICAgICB0aW1lb3V0SUQgPSAwO1xyXG4gICAgICBsYXN0ID0gK25ldyBEYXRlKCk7XHJcbiAgICAgIHJ0biA9IGZ1bmMuYXBwbHkoY3R4LCBhcmdzKTtcclxuICAgICAgY3R4ID0gbnVsbDtcclxuICAgICAgYXJncyA9IG51bGw7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICB2YXIgYXJyYXlQYXJhbGxlbCA9IGZ1bmN0aW9uIHBhcmFsbGVsKGZucywgY29udGV4dCwgY2FsbGJhY2spIHtcclxuICAgIGlmICghY2FsbGJhY2spIHtcclxuICAgICAgaWYgKHR5cGVvZiBjb250ZXh0ID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgY2FsbGJhY2sgPSBjb250ZXh0O1xyXG4gICAgICAgIGNvbnRleHQgPSBudWxsO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNhbGxiYWNrID0gbm9vcDtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHZhciBwZW5kaW5nID0gZm5zICYmIGZucy5sZW5ndGg7XHJcbiAgICBpZiAoIXBlbmRpbmcpIHJldHVybiBjYWxsYmFjayhudWxsLCBbXSk7XHJcblxyXG4gICAgdmFyIGZpbmlzaGVkID0gZmFsc2U7XHJcbiAgICB2YXIgcmVzdWx0cyA9IG5ldyBBcnJheShwZW5kaW5nKTtcclxuXHJcbiAgICBmbnMuZm9yRWFjaChjb250ZXh0ID8gZnVuY3Rpb24gKGZuLCBpKSB7XHJcbiAgICAgIGZuLmNhbGwoY29udGV4dCwgbWF5YmVEb25lKGkpKTtcclxuICAgIH0gOiBmdW5jdGlvbiAoZm4sIGkpIHtcclxuICAgICAgZm4obWF5YmVEb25lKGkpKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGZ1bmN0aW9uIG1heWJlRG9uZShpKSB7XHJcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoZXJyLCByZXN1bHQpIHtcclxuICAgICAgICBpZiAoZmluaXNoZWQpIHJldHVybjtcclxuXHJcbiAgICAgICAgaWYgKGVycikge1xyXG4gICAgICAgICAgY2FsbGJhY2soZXJyLCByZXN1bHRzKTtcclxuICAgICAgICAgIGZpbmlzaGVkID0gdHJ1ZTtcclxuICAgICAgICAgIHJldHVyblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmVzdWx0c1tpXSA9IHJlc3VsdDtcclxuXHJcbiAgICAgICAgaWYgKCEtLXBlbmRpbmcpIGNhbGxiYWNrKG51bGwsIHJlc3VsdHMpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgZnVuY3Rpb24gbm9vcCgpIHt9XHJcblxyXG4gIC8qKlxyXG4gICAqIEFsd2F5cyByZXR1cm5zIGEgbnVtZXJpYyB2YWx1ZSwgZ2l2ZW4gYSB2YWx1ZS4gTG9naWMgZnJvbSBqUXVlcnkncyBgaXNOdW1lcmljYC5cclxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFBvc3NpYmx5IG51bWVyaWMgdmFsdWUuXHJcbiAgICogQHJldHVybiB7bnVtYmVyfSBgdmFsdWVgIG9yIHplcm8gaWYgYHZhbHVlYCBpc24ndCBudW1lcmljLlxyXG4gICAqL1xyXG4gIGZ1bmN0aW9uIGdldE51bWJlcih2YWx1ZSkge1xyXG4gICAgcmV0dXJuIHBhcnNlRmxvYXQodmFsdWUpIHx8IDA7XHJcbiAgfVxyXG5cclxuICB2YXIgUG9pbnQgPVxyXG4gIC8qI19fUFVSRV9fKi9cclxuICBmdW5jdGlvbiAoKSB7XHJcbiAgICAvKipcclxuICAgICAqIFJlcHJlc2VudHMgYSBjb29yZGluYXRlIHBhaXIuXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3g9MF0gWC5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbeT0wXSBZLlxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBQb2ludCh4LCB5KSB7XHJcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQb2ludCk7XHJcblxyXG4gICAgICB0aGlzLnggPSBnZXROdW1iZXIoeCk7XHJcbiAgICAgIHRoaXMueSA9IGdldE51bWJlcih5KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogV2hldGhlciB0d28gcG9pbnRzIGFyZSBlcXVhbC5cclxuICAgICAqIEBwYXJhbSB7UG9pbnR9IGEgUG9pbnQgQS5cclxuICAgICAqIEBwYXJhbSB7UG9pbnR9IGIgUG9pbnQgQi5cclxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuXHJcblxyXG4gICAgX2NyZWF0ZUNsYXNzKFBvaW50LCBudWxsLCBbe1xyXG4gICAgICBrZXk6IFwiZXF1YWxzXCIsXHJcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBlcXVhbHMoYSwgYikge1xyXG4gICAgICAgIHJldHVybiBhLnggPT09IGIueCAmJiBhLnkgPT09IGIueTtcclxuICAgICAgfVxyXG4gICAgfV0pO1xyXG5cclxuICAgIHJldHVybiBQb2ludDtcclxuICB9KCk7XHJcblxyXG4gIHZhciBSZWN0ID1cclxuICAvKiNfX1BVUkVfXyovXHJcbiAgZnVuY3Rpb24gKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBDbGFzcyBmb3IgcmVwcmVzZW50aW5nIHJlY3Rhbmd1bGFyIHJlZ2lvbnMuXHJcbiAgICAgKiBodHRwczovL2dpdGh1Yi5jb20vZ29vZ2xlL2Nsb3N1cmUtbGlicmFyeS9ibG9iL21hc3Rlci9jbG9zdXJlL2dvb2cvbWF0aC9yZWN0LmpzXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0geCBMZWZ0LlxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHkgVG9wLlxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHcgV2lkdGguXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaCBIZWlnaHQuXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaWQgSWRlbnRpZmllclxyXG4gICAgICogQGNvbnN0cnVjdG9yXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIFJlY3QoeCwgeSwgdywgaCwgaWQpIHtcclxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlY3QpO1xyXG5cclxuICAgICAgdGhpcy5pZCA9IGlkO1xyXG4gICAgICAvKiogQHR5cGUge251bWJlcn0gKi9cclxuXHJcbiAgICAgIHRoaXMubGVmdCA9IHg7XHJcbiAgICAgIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xyXG5cclxuICAgICAgdGhpcy50b3AgPSB5O1xyXG4gICAgICAvKiogQHR5cGUge251bWJlcn0gKi9cclxuXHJcbiAgICAgIHRoaXMud2lkdGggPSB3O1xyXG4gICAgICAvKiogQHR5cGUge251bWJlcn0gKi9cclxuXHJcbiAgICAgIHRoaXMuaGVpZ2h0ID0gaDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB3aGV0aGVyIHR3byByZWN0YW5nbGVzIGludGVyc2VjdC5cclxuICAgICAqIEBwYXJhbSB7UmVjdH0gYSBBIFJlY3RhbmdsZS5cclxuICAgICAqIEBwYXJhbSB7UmVjdH0gYiBBIFJlY3RhbmdsZS5cclxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgYSBhbmQgYiBpbnRlcnNlY3QuXHJcbiAgICAgKi9cclxuXHJcblxyXG4gICAgX2NyZWF0ZUNsYXNzKFJlY3QsIG51bGwsIFt7XHJcbiAgICAgIGtleTogXCJpbnRlcnNlY3RzXCIsXHJcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBpbnRlcnNlY3RzKGEsIGIpIHtcclxuICAgICAgICByZXR1cm4gYS5sZWZ0IDwgYi5sZWZ0ICsgYi53aWR0aCAmJiBiLmxlZnQgPCBhLmxlZnQgKyBhLndpZHRoICYmIGEudG9wIDwgYi50b3AgKyBiLmhlaWdodCAmJiBiLnRvcCA8IGEudG9wICsgYS5oZWlnaHQ7XHJcbiAgICAgIH1cclxuICAgIH1dKTtcclxuXHJcbiAgICByZXR1cm4gUmVjdDtcclxuICB9KCk7XHJcblxyXG4gIHZhciBDbGFzc2VzID0ge1xyXG4gICAgQkFTRTogJ3NodWZmbGUnLFxyXG4gICAgU0hVRkZMRV9JVEVNOiAnc2h1ZmZsZS1pdGVtJyxcclxuICAgIFZJU0lCTEU6ICdzaHVmZmxlLWl0ZW0tLXZpc2libGUnLFxyXG4gICAgSElEREVOOiAnc2h1ZmZsZS1pdGVtLS1oaWRkZW4nXHJcbiAgfTtcclxuXHJcbiAgdmFyIGlkID0gMDtcclxuXHJcbiAgdmFyIFNodWZmbGVJdGVtID1cclxuICAvKiNfX1BVUkVfXyovXHJcbiAgZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gU2h1ZmZsZUl0ZW0oZWxlbWVudCkge1xyXG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2h1ZmZsZUl0ZW0pO1xyXG5cclxuICAgICAgaWQgKz0gMTtcclxuICAgICAgdGhpcy5pZCA9IGlkO1xyXG4gICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xyXG4gICAgICAvKipcclxuICAgICAgICogVXNlZCB0byBzZXBhcmF0ZSBpdGVtcyBmb3IgbGF5b3V0IGFuZCBzaHJpbmsuXHJcbiAgICAgICAqL1xyXG5cclxuICAgICAgdGhpcy5pc1Zpc2libGUgPSB0cnVlO1xyXG4gICAgICAvKipcclxuICAgICAgICogVXNlZCB0byBkZXRlcm1pbmUgaWYgYSB0cmFuc2l0aW9uIHdpbGwgaGFwcGVuLiBCeSB0aGUgdGltZSB0aGUgX2xheW91dFxyXG4gICAgICAgKiBhbmQgX3NocmluayBtZXRob2RzIGdldCB0aGUgU2h1ZmZsZUl0ZW0gaW5zdGFuY2VzLCB0aGUgYGlzVmlzaWJsZWAgdmFsdWVcclxuICAgICAgICogaGFzIGFscmVhZHkgYmVlbiBjaGFuZ2VkIGJ5IHRoZSBzZXBhcmF0aW9uIG1ldGhvZHMsIHNvIHRoaXMgcHJvcGVydHkgaXNcclxuICAgICAgICogbmVlZGVkIHRvIGtub3cgaWYgdGhlIGl0ZW0gd2FzIHZpc2libGUvaGlkZGVuIGJlZm9yZSB0aGUgc2hyaW5rL2xheW91dC5cclxuICAgICAgICovXHJcblxyXG4gICAgICB0aGlzLmlzSGlkZGVuID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgX2NyZWF0ZUNsYXNzKFNodWZmbGVJdGVtLCBbe1xyXG4gICAgICBrZXk6IFwic2hvd1wiLFxyXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc2hvdygpIHtcclxuICAgICAgICB0aGlzLmlzVmlzaWJsZSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoQ2xhc3Nlcy5ISURERU4pO1xyXG4gICAgICAgIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKENsYXNzZXMuVklTSUJMRSk7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nKTtcclxuICAgICAgfVxyXG4gICAgfSwge1xyXG4gICAgICBrZXk6IFwiaGlkZVwiLFxyXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gaGlkZSgpIHtcclxuICAgICAgICB0aGlzLmlzVmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKENsYXNzZXMuVklTSUJMRSk7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQoQ2xhc3Nlcy5ISURERU4pO1xyXG4gICAgICAgIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgdHJ1ZSk7XHJcbiAgICAgIH1cclxuICAgIH0sIHtcclxuICAgICAga2V5OiBcImluaXRcIixcclxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGluaXQoKSB7XHJcbiAgICAgICAgdGhpcy5hZGRDbGFzc2VzKFtDbGFzc2VzLlNIVUZGTEVfSVRFTSwgQ2xhc3Nlcy5WSVNJQkxFXSk7XHJcbiAgICAgICAgdGhpcy5hcHBseUNzcyhTaHVmZmxlSXRlbS5Dc3MuSU5JVElBTCk7XHJcbiAgICAgICAgdGhpcy5zY2FsZSA9IFNodWZmbGVJdGVtLlNjYWxlLlZJU0lCTEU7XHJcbiAgICAgICAgdGhpcy5wb2ludCA9IG5ldyBQb2ludCgpO1xyXG4gICAgICB9XHJcbiAgICB9LCB7XHJcbiAgICAgIGtleTogXCJhZGRDbGFzc2VzXCIsXHJcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRDbGFzc2VzKGNsYXNzZXMpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgICAgICBjbGFzc2VzLmZvckVhY2goZnVuY3Rpb24gKGNsYXNzTmFtZSkge1xyXG4gICAgICAgICAgX3RoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH0sIHtcclxuICAgICAga2V5OiBcInJlbW92ZUNsYXNzZXNcIixcclxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZUNsYXNzZXMoY2xhc3Nlcykge1xyXG4gICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xyXG5cclxuICAgICAgICBjbGFzc2VzLmZvckVhY2goZnVuY3Rpb24gKGNsYXNzTmFtZSkge1xyXG4gICAgICAgICAgX3RoaXMyLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9LCB7XHJcbiAgICAgIGtleTogXCJhcHBseUNzc1wiLFxyXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gYXBwbHlDc3Mob2JqKSB7XHJcbiAgICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XHJcblxyXG4gICAgICAgIE9iamVjdC5rZXlzKG9iaikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgICBfdGhpczMuZWxlbWVudC5zdHlsZVtrZXldID0gb2JqW2tleV07XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH0sIHtcclxuICAgICAga2V5OiBcImRpc3Bvc2VcIixcclxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XHJcbiAgICAgICAgdGhpcy5yZW1vdmVDbGFzc2VzKFtDbGFzc2VzLkhJRERFTiwgQ2xhc3Nlcy5WSVNJQkxFLCBDbGFzc2VzLlNIVUZGTEVfSVRFTV0pO1xyXG4gICAgICAgIHRoaXMuZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ3N0eWxlJyk7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gbnVsbDtcclxuICAgICAgfVxyXG4gICAgfV0pO1xyXG5cclxuICAgIHJldHVybiBTaHVmZmxlSXRlbTtcclxuICB9KCk7XHJcblxyXG4gIFNodWZmbGVJdGVtLkNzcyA9IHtcclxuICAgIElOSVRJQUw6IHtcclxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXHJcbiAgICAgIHRvcDogMCxcclxuICAgICAgbGVmdDogMCxcclxuICAgICAgdmlzaWJpbGl0eTogJ3Zpc2libGUnLFxyXG4gICAgICB3aWxsQ2hhbmdlOiAndHJhbnNmb3JtJ1xyXG4gICAgfSxcclxuICAgIFZJU0lCTEU6IHtcclxuICAgICAgYmVmb3JlOiB7XHJcbiAgICAgICAgb3BhY2l0eTogMSxcclxuICAgICAgICB2aXNpYmlsaXR5OiAndmlzaWJsZSdcclxuICAgICAgfSxcclxuICAgICAgYWZ0ZXI6IHtcclxuICAgICAgICB0cmFuc2l0aW9uRGVsYXk6ICcnXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBISURERU46IHtcclxuICAgICAgYmVmb3JlOiB7XHJcbiAgICAgICAgb3BhY2l0eTogMFxyXG4gICAgICB9LFxyXG4gICAgICBhZnRlcjoge1xyXG4gICAgICAgIHZpc2liaWxpdHk6ICdoaWRkZW4nLFxyXG4gICAgICAgIHRyYW5zaXRpb25EZWxheTogJydcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH07XHJcbiAgU2h1ZmZsZUl0ZW0uU2NhbGUgPSB7XHJcbiAgICBWSVNJQkxFOiAxLFxyXG4gICAgSElEREVOOiAwLjAwMVxyXG4gIH07XHJcblxyXG4gIHZhciB2YWx1ZSA9IG51bGw7XHJcbiAgdmFyIHRlc3RDb21wdXRlZFNpemUgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgaWYgKHZhbHVlICE9PSBudWxsKSB7XHJcbiAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmJvZHkgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xyXG4gICAgdmFyIGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIGUuc3R5bGUuY3NzVGV4dCA9ICd3aWR0aDoxMHB4O3BhZGRpbmc6MnB4O2JveC1zaXppbmc6Ym9yZGVyLWJveDsnO1xyXG4gICAgZWxlbWVudC5hcHBlbmRDaGlsZChlKTtcclxuICAgIHZhbHVlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZSwgbnVsbCkud2lkdGggPT09ICcxMHB4JztcclxuICAgIGVsZW1lbnQucmVtb3ZlQ2hpbGQoZSk7XHJcbiAgICByZXR1cm4gdmFsdWU7XHJcbiAgfSk7XHJcblxyXG4gIC8qKlxyXG4gICAqIFJldHJpZXZlIHRoZSBjb21wdXRlZCBzdHlsZSBmb3IgYW4gZWxlbWVudCwgcGFyc2VkIGFzIGEgZmxvYXQuXHJcbiAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IEVsZW1lbnQgdG8gZ2V0IHN0eWxlIGZvci5cclxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3R5bGUgU3R5bGUgcHJvcGVydHkuXHJcbiAgICogQHBhcmFtIHtDU1NTdHlsZURlY2xhcmF0aW9ufSBbc3R5bGVzXSBPcHRpb25hbGx5IGluY2x1ZGUgY2xlYW4gc3R5bGVzIHRvXHJcbiAgICogICAgIHVzZSBpbnN0ZWFkIG9mIGFza2luZyBmb3IgdGhlbSBhZ2Fpbi5cclxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBwYXJzZWQgY29tcHV0ZWQgdmFsdWUgb3IgemVybyBpZiB0aGF0IGZhaWxzIGJlY2F1c2UgSUVcclxuICAgKiAgICAgd2lsbCByZXR1cm4gJ2F1dG8nIHdoZW4gdGhlIGVsZW1lbnQgZG9lc24ndCBoYXZlIG1hcmdpbnMgaW5zdGVhZCBvZlxyXG4gICAqICAgICB0aGUgY29tcHV0ZWQgc3R5bGUuXHJcbiAgICovXHJcblxyXG4gIGZ1bmN0aW9uIGdldE51bWJlclN0eWxlKGVsZW1lbnQsIHN0eWxlKSB7XHJcbiAgICB2YXIgc3R5bGVzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50LCBudWxsKTtcclxuICAgIHZhciB2YWx1ZSA9IGdldE51bWJlcihzdHlsZXNbc3R5bGVdKTsgLy8gU3VwcG9ydCBJRTw9MTEgYW5kIFczQyBzcGVjLlxyXG5cclxuICAgIGlmICghdGVzdENvbXB1dGVkU2l6ZSgpICYmIHN0eWxlID09PSAnd2lkdGgnKSB7XHJcbiAgICAgIHZhbHVlICs9IGdldE51bWJlcihzdHlsZXMucGFkZGluZ0xlZnQpICsgZ2V0TnVtYmVyKHN0eWxlcy5wYWRkaW5nUmlnaHQpICsgZ2V0TnVtYmVyKHN0eWxlcy5ib3JkZXJMZWZ0V2lkdGgpICsgZ2V0TnVtYmVyKHN0eWxlcy5ib3JkZXJSaWdodFdpZHRoKTtcclxuICAgIH0gZWxzZSBpZiAoIXRlc3RDb21wdXRlZFNpemUoKSAmJiBzdHlsZSA9PT0gJ2hlaWdodCcpIHtcclxuICAgICAgdmFsdWUgKz0gZ2V0TnVtYmVyKHN0eWxlcy5wYWRkaW5nVG9wKSArIGdldE51bWJlcihzdHlsZXMucGFkZGluZ0JvdHRvbSkgKyBnZXROdW1iZXIoc3R5bGVzLmJvcmRlclRvcFdpZHRoKSArIGdldE51bWJlcihzdHlsZXMuYm9yZGVyQm90dG9tV2lkdGgpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB2YWx1ZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEZpc2hlci1ZYXRlcyBzaHVmZmxlLlxyXG4gICAqIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzk2Mjg5MC8zNzM0MjJcclxuICAgKiBodHRwczovL2Jvc3Qub2Nrcy5vcmcvbWlrZS9zaHVmZmxlL1xyXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IEFycmF5IHRvIHNodWZmbGUuXHJcbiAgICogQHJldHVybiB7QXJyYXl9IFJhbmRvbWx5IHNvcnRlZCBhcnJheS5cclxuICAgKi9cclxuICBmdW5jdGlvbiByYW5kb21pemUoYXJyYXkpIHtcclxuICAgIHZhciBuID0gYXJyYXkubGVuZ3RoO1xyXG5cclxuICAgIHdoaWxlIChuKSB7XHJcbiAgICAgIG4gLT0gMTtcclxuICAgICAgdmFyIGkgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobiArIDEpKTtcclxuICAgICAgdmFyIHRlbXAgPSBhcnJheVtpXTtcclxuICAgICAgYXJyYXlbaV0gPSBhcnJheVtuXTtcclxuICAgICAgYXJyYXlbbl0gPSB0ZW1wO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBhcnJheTtcclxuICB9XHJcblxyXG4gIHZhciBkZWZhdWx0cyA9IHtcclxuICAgIC8vIFVzZSBhcnJheS5yZXZlcnNlKCkgdG8gcmV2ZXJzZSB0aGUgcmVzdWx0c1xyXG4gICAgcmV2ZXJzZTogZmFsc2UsXHJcbiAgICAvLyBTb3J0aW5nIGZ1bmN0aW9uXHJcbiAgICBieTogbnVsbCxcclxuICAgIC8vIEN1c3RvbSBzb3J0IGZ1bmN0aW9uXHJcbiAgICBjb21wYXJlOiBudWxsLFxyXG4gICAgLy8gSWYgdHJ1ZSwgdGhpcyB3aWxsIHNraXAgdGhlIHNvcnRpbmcgYW5kIHJldHVybiBhIHJhbmRvbWl6ZWQgb3JkZXIgaW4gdGhlIGFycmF5XHJcbiAgICByYW5kb21pemU6IGZhbHNlLFxyXG4gICAgLy8gRGV0ZXJtaW5lcyB3aGljaCBwcm9wZXJ0eSBvZiBlYWNoIGl0ZW0gaW4gdGhlIGFycmF5IGlzIHBhc3NlZCB0byB0aGVcclxuICAgIC8vIHNvcnRpbmcgbWV0aG9kLlxyXG4gICAga2V5OiAnZWxlbWVudCdcclxuICB9O1xyXG4gIC8qKlxyXG4gICAqIFlvdSBjYW4gcmV0dXJuIGB1bmRlZmluZWRgIGZyb20gdGhlIGBieWAgZnVuY3Rpb24gdG8gcmV2ZXJ0IHRvIERPTSBvcmRlci5cclxuICAgKiBAcGFyYW0ge0FycmF5PFQ+fSBhcnIgQXJyYXkgdG8gc29ydC5cclxuICAgKiBAcGFyYW0ge1NvcnRPcHRpb25zfSBvcHRpb25zIFNvcnRpbmcgb3B0aW9ucy5cclxuICAgKiBAcmV0dXJuIHtBcnJheTxUPn1cclxuICAgKi9cclxuXHJcbiAgZnVuY3Rpb24gc29ydGVyKGFyciwgb3B0aW9ucykge1xyXG4gICAgdmFyIG9wdHMgPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0cywgb3B0aW9ucyk7XHJcbiAgICB2YXIgb3JpZ2luYWwgPSBBcnJheS5mcm9tKGFycik7XHJcbiAgICB2YXIgcmV2ZXJ0ID0gZmFsc2U7XHJcblxyXG4gICAgaWYgKCFhcnIubGVuZ3RoKSB7XHJcbiAgICAgIHJldHVybiBbXTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAob3B0cy5yYW5kb21pemUpIHtcclxuICAgICAgcmV0dXJuIHJhbmRvbWl6ZShhcnIpO1xyXG4gICAgfSAvLyBTb3J0IHRoZSBlbGVtZW50cyBieSB0aGUgb3B0cy5ieSBmdW5jdGlvbi5cclxuICAgIC8vIElmIHdlIGRvbid0IGhhdmUgb3B0cy5ieSwgZGVmYXVsdCB0byBET00gb3JkZXJcclxuXHJcblxyXG4gICAgaWYgKHR5cGVvZiBvcHRzLmJ5ID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgIGFyci5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XHJcbiAgICAgICAgLy8gRXhpdCBlYXJseSBpZiB3ZSBhbHJlYWR5IGtub3cgd2Ugd2FudCB0byByZXZlcnRcclxuICAgICAgICBpZiAocmV2ZXJ0KSB7XHJcbiAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciB2YWxBID0gb3B0cy5ieShhW29wdHMua2V5XSk7XHJcbiAgICAgICAgdmFyIHZhbEIgPSBvcHRzLmJ5KGJbb3B0cy5rZXldKTsgLy8gSWYgYm90aCB2YWx1ZXMgYXJlIHVuZGVmaW5lZCwgdXNlIHRoZSBET00gb3JkZXJcclxuXHJcbiAgICAgICAgaWYgKHZhbEEgPT09IHVuZGVmaW5lZCAmJiB2YWxCID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgIHJldmVydCA9IHRydWU7XHJcbiAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh2YWxBIDwgdmFsQiB8fCB2YWxBID09PSAnc29ydEZpcnN0JyB8fCB2YWxCID09PSAnc29ydExhc3QnKSB7XHJcbiAgICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodmFsQSA+IHZhbEIgfHwgdmFsQSA9PT0gJ3NvcnRMYXN0JyB8fCB2YWxCID09PSAnc29ydEZpcnN0Jykge1xyXG4gICAgICAgICAgcmV0dXJuIDE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gMDtcclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBvcHRzLmNvbXBhcmUgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgYXJyLnNvcnQob3B0cy5jb21wYXJlKTtcclxuICAgIH0gLy8gUmV2ZXJ0IHRvIHRoZSBvcmlnaW5hbCBhcnJheSBpZiBuZWNlc3NhcnlcclxuXHJcblxyXG4gICAgaWYgKHJldmVydCkge1xyXG4gICAgICByZXR1cm4gb3JpZ2luYWw7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG9wdHMucmV2ZXJzZSkge1xyXG4gICAgICBhcnIucmV2ZXJzZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBhcnI7XHJcbiAgfVxyXG5cclxuICB2YXIgdHJhbnNpdGlvbnMgPSB7fTtcclxuICB2YXIgZXZlbnROYW1lID0gJ3RyYW5zaXRpb25lbmQnO1xyXG4gIHZhciBjb3VudCA9IDA7XHJcblxyXG4gIGZ1bmN0aW9uIHVuaXF1ZUlkKCkge1xyXG4gICAgY291bnQgKz0gMTtcclxuICAgIHJldHVybiBldmVudE5hbWUgKyBjb3VudDtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGNhbmNlbFRyYW5zaXRpb25FbmQoaWQpIHtcclxuICAgIGlmICh0cmFuc2l0aW9uc1tpZF0pIHtcclxuICAgICAgdHJhbnNpdGlvbnNbaWRdLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIHRyYW5zaXRpb25zW2lkXS5saXN0ZW5lcik7XHJcbiAgICAgIHRyYW5zaXRpb25zW2lkXSA9IG51bGw7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcbiAgZnVuY3Rpb24gb25UcmFuc2l0aW9uRW5kKGVsZW1lbnQsIGNhbGxiYWNrKSB7XHJcbiAgICB2YXIgaWQgPSB1bmlxdWVJZCgpO1xyXG5cclxuICAgIHZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uIGxpc3RlbmVyKGV2dCkge1xyXG4gICAgICBpZiAoZXZ0LmN1cnJlbnRUYXJnZXQgPT09IGV2dC50YXJnZXQpIHtcclxuICAgICAgICBjYW5jZWxUcmFuc2l0aW9uRW5kKGlkKTtcclxuICAgICAgICBjYWxsYmFjayhldnQpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGxpc3RlbmVyKTtcclxuICAgIHRyYW5zaXRpb25zW2lkXSA9IHtcclxuICAgICAgZWxlbWVudDogZWxlbWVudCxcclxuICAgICAgbGlzdGVuZXI6IGxpc3RlbmVyXHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIGlkO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gYXJyYXlNYXgoYXJyYXkpIHtcclxuICAgIHJldHVybiBNYXRoLm1heC5hcHBseShNYXRoLCBhcnJheSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcHJlZmVyLXNwcmVhZFxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gYXJyYXlNaW4oYXJyYXkpIHtcclxuICAgIHJldHVybiBNYXRoLm1pbi5hcHBseShNYXRoLCBhcnJheSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcHJlZmVyLXNwcmVhZFxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRGV0ZXJtaW5lIHRoZSBudW1iZXIgb2YgY29sdW1ucyBhbiBpdGVtcyBzcGFucy5cclxuICAgKiBAcGFyYW0ge251bWJlcn0gaXRlbVdpZHRoIFdpZHRoIG9mIHRoZSBpdGVtLlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBjb2x1bW5XaWR0aCBXaWR0aCBvZiB0aGUgY29sdW1uIChpbmNsdWRlcyBndXR0ZXIpLlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBjb2x1bW5zIFRvdGFsIG51bWJlciBvZiBjb2x1bW5zXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IHRocmVzaG9sZCBBIGJ1ZmZlciB2YWx1ZSBmb3IgdGhlIHNpemUgb2YgdGhlIGNvbHVtbiB0byBmaXQuXHJcbiAgICogQHJldHVybiB7bnVtYmVyfVxyXG4gICAqL1xyXG5cclxuICBmdW5jdGlvbiBnZXRDb2x1bW5TcGFuKGl0ZW1XaWR0aCwgY29sdW1uV2lkdGgsIGNvbHVtbnMsIHRocmVzaG9sZCkge1xyXG4gICAgdmFyIGNvbHVtblNwYW4gPSBpdGVtV2lkdGggLyBjb2x1bW5XaWR0aDsgLy8gSWYgdGhlIGRpZmZlcmVuY2UgYmV0d2VlbiB0aGUgcm91bmRlZCBjb2x1bW4gc3BhbiBudW1iZXIgYW5kIHRoZVxyXG4gICAgLy8gY2FsY3VsYXRlZCBjb2x1bW4gc3BhbiBudW1iZXIgaXMgcmVhbGx5IHNtYWxsLCByb3VuZCB0aGUgbnVtYmVyIHRvXHJcbiAgICAvLyBtYWtlIGl0IGZpdC5cclxuXHJcbiAgICBpZiAoTWF0aC5hYnMoTWF0aC5yb3VuZChjb2x1bW5TcGFuKSAtIGNvbHVtblNwYW4pIDwgdGhyZXNob2xkKSB7XHJcbiAgICAgIC8vIGUuZy4gY29sdW1uU3BhbiA9IDQuMDA4OTk0NTM5MDI5ODc0NVxyXG4gICAgICBjb2x1bW5TcGFuID0gTWF0aC5yb3VuZChjb2x1bW5TcGFuKTtcclxuICAgIH0gLy8gRW5zdXJlIHRoZSBjb2x1bW4gc3BhbiBpcyBub3QgbW9yZSB0aGFuIHRoZSBhbW91bnQgb2YgY29sdW1ucyBpbiB0aGUgd2hvbGUgbGF5b3V0LlxyXG5cclxuXHJcbiAgICByZXR1cm4gTWF0aC5taW4oTWF0aC5jZWlsKGNvbHVtblNwYW4pLCBjb2x1bW5zKTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICogUmV0cmlldmVzIHRoZSBjb2x1bW4gc2V0IHRvIHVzZSBmb3IgcGxhY2VtZW50LlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBjb2x1bW5TcGFuIFRoZSBudW1iZXIgb2YgY29sdW1ucyB0aGlzIGN1cnJlbnQgaXRlbSBzcGFucy5cclxuICAgKiBAcGFyYW0ge251bWJlcn0gY29sdW1ucyBUaGUgdG90YWwgY29sdW1ucyBpbiB0aGUgZ3JpZC5cclxuICAgKiBAcmV0dXJuIHtBcnJheS48bnVtYmVyPn0gQW4gYXJyYXkgb2YgbnVtYmVycyByZXByZXNldGluZyB0aGUgY29sdW1uIHNldC5cclxuICAgKi9cclxuXHJcbiAgZnVuY3Rpb24gZ2V0QXZhaWxhYmxlUG9zaXRpb25zKHBvc2l0aW9ucywgY29sdW1uU3BhbiwgY29sdW1ucykge1xyXG4gICAgLy8gVGhlIGl0ZW0gc3BhbnMgb25seSBvbmUgY29sdW1uLlxyXG4gICAgaWYgKGNvbHVtblNwYW4gPT09IDEpIHtcclxuICAgICAgcmV0dXJuIHBvc2l0aW9ucztcclxuICAgIH0gLy8gVGhlIGl0ZW0gc3BhbnMgbW9yZSB0aGFuIG9uZSBjb2x1bW4sIGZpZ3VyZSBvdXQgaG93IG1hbnkgZGlmZmVyZW50XHJcbiAgICAvLyBwbGFjZXMgaXQgY291bGQgZml0IGhvcml6b250YWxseS5cclxuICAgIC8vIFRoZSBncm91cCBjb3VudCBpcyB0aGUgbnVtYmVyIG9mIHBsYWNlcyB3aXRoaW4gdGhlIHBvc2l0aW9ucyB0aGlzIGJsb2NrXHJcbiAgICAvLyBjb3VsZCBmaXQsIGlnbm9yaW5nIHRoZSBjdXJyZW50IHBvc2l0aW9ucyBvZiBpdGVtcy5cclxuICAgIC8vIEltYWdpbmUgYSAyIGNvbHVtbiBicmljayBhcyB0aGUgc2Vjb25kIGl0ZW0gaW4gYSA0IGNvbHVtbiBncmlkIHdpdGhcclxuICAgIC8vIDEwcHggaGVpZ2h0IGVhY2guIEZpbmQgdGhlIHBsYWNlcyBpdCB3b3VsZCBmaXQ6XHJcbiAgICAvLyBbMjAsIDEwLCAxMCwgMF1cclxuICAgIC8vICB8ICAgfCAgIHxcclxuICAgIC8vICAqICAgKiAgICpcclxuICAgIC8vXHJcbiAgICAvLyBUaGVuIHRha2UgdGhlIHBsYWNlcyB3aGljaCBmaXQgYW5kIGdldCB0aGUgYmlnZ2VyIG9mIHRoZSB0d286XHJcbiAgICAvLyBtYXgoWzIwLCAxMF0pLCBtYXgoWzEwLCAxMF0pLCBtYXgoWzEwLCAwXSkgPSBbMjAsIDEwLCAxMF1cclxuICAgIC8vXHJcbiAgICAvLyBOZXh0LCBmaW5kIHRoZSBmaXJzdCBzbWFsbGVzdCBudW1iZXIgKHRoZSBzaG9ydCBjb2x1bW4pLlxyXG4gICAgLy8gWzIwLCAxMCwgMTBdXHJcbiAgICAvLyAgICAgIHxcclxuICAgIC8vICAgICAgKlxyXG4gICAgLy9cclxuICAgIC8vIEFuZCB0aGF0J3Mgd2hlcmUgaXQgc2hvdWxkIGJlIHBsYWNlZCFcclxuICAgIC8vXHJcbiAgICAvLyBBbm90aGVyIGV4YW1wbGUgd2hlcmUgdGhlIHNlY29uZCBjb2x1bW4ncyBpdGVtIGV4dGVuZHMgcGFzdCB0aGUgZmlyc3Q6XHJcbiAgICAvLyBbMTAsIDIwLCAxMCwgMF0gPT4gWzIwLCAyMCwgMTBdID0+IDEwXHJcblxyXG5cclxuICAgIHZhciBhdmFpbGFibGUgPSBbXTsgLy8gRm9yIGhvdyBtYW55IHBvc3NpYmxlIHBvc2l0aW9ucyBmb3IgdGhpcyBpdGVtIHRoZXJlIGFyZS5cclxuXHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8PSBjb2x1bW5zIC0gY29sdW1uU3BhbjsgaSsrKSB7XHJcbiAgICAgIC8vIEZpbmQgdGhlIGJpZ2dlciB2YWx1ZSBmb3IgZWFjaCBwbGFjZSBpdCBjb3VsZCBmaXQuXHJcbiAgICAgIGF2YWlsYWJsZS5wdXNoKGFycmF5TWF4KHBvc2l0aW9ucy5zbGljZShpLCBpICsgY29sdW1uU3BhbikpKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gYXZhaWxhYmxlO1xyXG4gIH1cclxuICAvKipcclxuICAgKiBGaW5kIGluZGV4IG9mIHNob3J0IGNvbHVtbiwgdGhlIGZpcnN0IGZyb20gdGhlIGxlZnQgd2hlcmUgdGhpcyBpdGVtIHdpbGwgZ28uXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge0FycmF5LjxudW1iZXI+fSBwb3NpdGlvbnMgVGhlIGFycmF5IHRvIHNlYXJjaCBmb3IgdGhlIHNtYWxsZXN0IG51bWJlci5cclxuICAgKiBAcGFyYW0ge251bWJlcn0gYnVmZmVyIE9wdGlvbmFsIGJ1ZmZlciB3aGljaCBpcyB2ZXJ5IHVzZWZ1bCB3aGVuIHRoZSBoZWlnaHRcclxuICAgKiAgICAgaXMgYSBwZXJjZW50YWdlIG9mIHRoZSB3aWR0aC5cclxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IEluZGV4IG9mIHRoZSBzaG9ydCBjb2x1bW4uXHJcbiAgICovXHJcblxyXG4gIGZ1bmN0aW9uIGdldFNob3J0Q29sdW1uKHBvc2l0aW9ucywgYnVmZmVyKSB7XHJcbiAgICB2YXIgbWluUG9zaXRpb24gPSBhcnJheU1pbihwb3NpdGlvbnMpO1xyXG5cclxuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBwb3NpdGlvbnMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgaWYgKHBvc2l0aW9uc1tpXSA+PSBtaW5Qb3NpdGlvbiAtIGJ1ZmZlciAmJiBwb3NpdGlvbnNbaV0gPD0gbWluUG9zaXRpb24gKyBidWZmZXIpIHtcclxuICAgICAgICByZXR1cm4gaTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiAwO1xyXG4gIH1cclxuICAvKipcclxuICAgKiBEZXRlcm1pbmUgdGhlIGxvY2F0aW9uIG9mIHRoZSBuZXh0IGl0ZW0sIGJhc2VkIG9uIGl0cyBzaXplLlxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBpdGVtU2l6ZSBPYmplY3Qgd2l0aCB3aWR0aCBhbmQgaGVpZ2h0LlxyXG4gICAqIEBwYXJhbSB7QXJyYXkuPG51bWJlcj59IHBvc2l0aW9ucyBQb3NpdGlvbnMgb2YgdGhlIG90aGVyIGN1cnJlbnQgaXRlbXMuXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGdyaWRTaXplIFRoZSBjb2x1bW4gd2lkdGggb3Igcm93IGhlaWdodC5cclxuICAgKiBAcGFyYW0ge251bWJlcn0gdG90YWwgVGhlIHRvdGFsIG51bWJlciBvZiBjb2x1bW5zIG9yIHJvd3MuXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IHRocmVzaG9sZCBCdWZmZXIgdmFsdWUgZm9yIHRoZSBjb2x1bW4gdG8gZml0LlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBidWZmZXIgVmVydGljYWwgYnVmZmVyIGZvciB0aGUgaGVpZ2h0IG9mIGl0ZW1zLlxyXG4gICAqIEByZXR1cm4ge1BvaW50fVxyXG4gICAqL1xyXG5cclxuICBmdW5jdGlvbiBnZXRJdGVtUG9zaXRpb24oX3JlZikge1xyXG4gICAgdmFyIGl0ZW1TaXplID0gX3JlZi5pdGVtU2l6ZSxcclxuICAgICAgICBwb3NpdGlvbnMgPSBfcmVmLnBvc2l0aW9ucyxcclxuICAgICAgICBncmlkU2l6ZSA9IF9yZWYuZ3JpZFNpemUsXHJcbiAgICAgICAgdG90YWwgPSBfcmVmLnRvdGFsLFxyXG4gICAgICAgIHRocmVzaG9sZCA9IF9yZWYudGhyZXNob2xkLFxyXG4gICAgICAgIGJ1ZmZlciA9IF9yZWYuYnVmZmVyO1xyXG4gICAgdmFyIHNwYW4gPSBnZXRDb2x1bW5TcGFuKGl0ZW1TaXplLndpZHRoLCBncmlkU2l6ZSwgdG90YWwsIHRocmVzaG9sZCk7XHJcbiAgICB2YXIgc2V0WSA9IGdldEF2YWlsYWJsZVBvc2l0aW9ucyhwb3NpdGlvbnMsIHNwYW4sIHRvdGFsKTtcclxuICAgIHZhciBzaG9ydENvbHVtbkluZGV4ID0gZ2V0U2hvcnRDb2x1bW4oc2V0WSwgYnVmZmVyKTsgLy8gUG9zaXRpb24gdGhlIGl0ZW1cclxuXHJcbiAgICB2YXIgcG9pbnQgPSBuZXcgUG9pbnQoZ3JpZFNpemUgKiBzaG9ydENvbHVtbkluZGV4LCBzZXRZW3Nob3J0Q29sdW1uSW5kZXhdKTsgLy8gVXBkYXRlIHRoZSBjb2x1bW5zIGFycmF5IHdpdGggdGhlIG5ldyB2YWx1ZXMgZm9yIGVhY2ggY29sdW1uLlxyXG4gICAgLy8gZS5nLiBiZWZvcmUgdGhlIHVwZGF0ZSB0aGUgY29sdW1ucyBjb3VsZCBiZSBbMjUwLCAwLCAwLCAwXSBmb3IgYW4gaXRlbVxyXG4gICAgLy8gd2hpY2ggc3BhbnMgMiBjb2x1bW5zLiBBZnRlciBpdCB3b3VsZCBiZSBbMjUwLCBpdGVtSGVpZ2h0LCBpdGVtSGVpZ2h0LCAwXS5cclxuXHJcbiAgICB2YXIgc2V0SGVpZ2h0ID0gc2V0WVtzaG9ydENvbHVtbkluZGV4XSArIGl0ZW1TaXplLmhlaWdodDtcclxuXHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNwYW47IGkrKykge1xyXG4gICAgICBwb3NpdGlvbnNbc2hvcnRDb2x1bW5JbmRleCArIGldID0gc2V0SGVpZ2h0O1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBwb2ludDtcclxuICB9XHJcbiAgLyoqXHJcbiAgICogVGhpcyBtZXRob2QgYXR0ZW1wdHMgdG8gY2VudGVyIGl0ZW1zLiBUaGlzIG1ldGhvZCBjb3VsZCBwb3RlbnRpYWxseSBiZSBzbG93XHJcbiAgICogd2l0aCBhIGxhcmdlIG51bWJlciBvZiBpdGVtcyBiZWNhdXNlIGl0IG11c3QgcGxhY2UgaXRlbXMsIHRoZW4gY2hlY2sgZXZlcnlcclxuICAgKiBwcmV2aW91cyBpdGVtIHRvIGVuc3VyZSB0aGVyZSBpcyBubyBvdmVybGFwLlxyXG4gICAqIEBwYXJhbSB7QXJyYXkuPFJlY3Q+fSBpdGVtUmVjdHMgSXRlbSBkYXRhIG9iamVjdHMuXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGNvbnRhaW5lcldpZHRoIFdpZHRoIG9mIHRoZSBjb250YWluaW5nIGVsZW1lbnQuXHJcbiAgICogQHJldHVybiB7QXJyYXkuPFBvaW50Pn1cclxuICAgKi9cclxuXHJcbiAgZnVuY3Rpb24gZ2V0Q2VudGVyZWRQb3NpdGlvbnMoaXRlbVJlY3RzLCBjb250YWluZXJXaWR0aCkge1xyXG4gICAgdmFyIHJvd01hcCA9IHt9OyAvLyBQb3B1bGF0ZSByb3dzIGJ5IHRoZWlyIG9mZnNldCBiZWNhdXNlIGl0ZW1zIGNvdWxkIGp1bXAgYmV0d2VlbiByb3dzIGxpa2U6XHJcbiAgICAvLyBhICAgY1xyXG4gICAgLy8gIGJiYlxyXG5cclxuICAgIGl0ZW1SZWN0cy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtUmVjdCkge1xyXG4gICAgICBpZiAocm93TWFwW2l0ZW1SZWN0LnRvcF0pIHtcclxuICAgICAgICAvLyBQdXNoIHRoZSBwb2ludCB0byB0aGUgbGFzdCByb3cgYXJyYXkuXHJcbiAgICAgICAgcm93TWFwW2l0ZW1SZWN0LnRvcF0ucHVzaChpdGVtUmVjdCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gU3RhcnQgb2YgYSBuZXcgcm93LlxyXG4gICAgICAgIHJvd01hcFtpdGVtUmVjdC50b3BdID0gW2l0ZW1SZWN0XTtcclxuICAgICAgfVxyXG4gICAgfSk7IC8vIEZvciBlYWNoIHJvdywgZmluZCB0aGUgZW5kIG9mIHRoZSBsYXN0IGl0ZW0sIHRoZW4gY2FsY3VsYXRlXHJcbiAgICAvLyB0aGUgcmVtYWluaW5nIHNwYWNlIGJ5IGRpdmlkaW5nIGl0IGJ5IDIuIFRoZW4gYWRkIHRoYXRcclxuICAgIC8vIG9mZnNldCB0byB0aGUgeCBwb3NpdGlvbiBvZiBlYWNoIHBvaW50LlxyXG5cclxuICAgIHZhciByZWN0cyA9IFtdO1xyXG4gICAgdmFyIHJvd3MgPSBbXTtcclxuICAgIHZhciBjZW50ZXJlZFJvd3MgPSBbXTtcclxuICAgIE9iamVjdC5rZXlzKHJvd01hcCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgIHZhciBpdGVtUmVjdHMgPSByb3dNYXBba2V5XTtcclxuICAgICAgcm93cy5wdXNoKGl0ZW1SZWN0cyk7XHJcbiAgICAgIHZhciBsYXN0SXRlbSA9IGl0ZW1SZWN0c1tpdGVtUmVjdHMubGVuZ3RoIC0gMV07XHJcbiAgICAgIHZhciBlbmQgPSBsYXN0SXRlbS5sZWZ0ICsgbGFzdEl0ZW0ud2lkdGg7XHJcbiAgICAgIHZhciBvZmZzZXQgPSBNYXRoLnJvdW5kKChjb250YWluZXJXaWR0aCAtIGVuZCkgLyAyKTtcclxuICAgICAgdmFyIGZpbmFsUmVjdHMgPSBpdGVtUmVjdHM7XHJcbiAgICAgIHZhciBjYW5Nb3ZlID0gZmFsc2U7XHJcblxyXG4gICAgICBpZiAob2Zmc2V0ID4gMCkge1xyXG4gICAgICAgIHZhciBuZXdSZWN0cyA9IFtdO1xyXG4gICAgICAgIGNhbk1vdmUgPSBpdGVtUmVjdHMuZXZlcnkoZnVuY3Rpb24gKHIpIHtcclxuICAgICAgICAgIHZhciBuZXdSZWN0ID0gbmV3IFJlY3Qoci5sZWZ0ICsgb2Zmc2V0LCByLnRvcCwgci53aWR0aCwgci5oZWlnaHQsIHIuaWQpOyAvLyBDaGVjayBhbGwgY3VycmVudCByZWN0cyB0byBtYWtlIHN1cmUgbm9uZSBvdmVybGFwLlxyXG5cclxuICAgICAgICAgIHZhciBub092ZXJsYXAgPSAhcmVjdHMuc29tZShmdW5jdGlvbiAocikge1xyXG4gICAgICAgICAgICByZXR1cm4gUmVjdC5pbnRlcnNlY3RzKG5ld1JlY3QsIHIpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICBuZXdSZWN0cy5wdXNoKG5ld1JlY3QpO1xyXG4gICAgICAgICAgcmV0dXJuIG5vT3ZlcmxhcDtcclxuICAgICAgICB9KTsgLy8gSWYgbm9uZSBvZiB0aGUgcmVjdGFuZ2xlcyBvdmVybGFwcGVkLCB0aGUgd2hvbGUgZ3JvdXAgY2FuIGJlIGNlbnRlcmVkLlxyXG5cclxuICAgICAgICBpZiAoY2FuTW92ZSkge1xyXG4gICAgICAgICAgZmluYWxSZWN0cyA9IG5ld1JlY3RzO1xyXG4gICAgICAgIH1cclxuICAgICAgfSAvLyBJZiB0aGUgaXRlbXMgYXJlIG5vdCBnb2luZyB0byBiZSBvZmZzZXQsIGVuc3VyZSB0aGF0IHRoZSBvcmlnaW5hbFxyXG4gICAgICAvLyBwbGFjZW1lbnQgZm9yIHRoaXMgcm93IHdpbGwgbm90IG92ZXJsYXAgcHJldmlvdXMgcm93cyAocm93LXNwYW5uaW5nXHJcbiAgICAgIC8vIGVsZW1lbnRzIGNvdWxkIGJlIGluIHRoZSB3YXkpLlxyXG5cclxuXHJcbiAgICAgIGlmICghY2FuTW92ZSkge1xyXG4gICAgICAgIHZhciBpbnRlcnNlY3RpbmdSZWN0O1xyXG4gICAgICAgIHZhciBoYXNPdmVybGFwID0gaXRlbVJlY3RzLnNvbWUoZnVuY3Rpb24gKGl0ZW1SZWN0KSB7XHJcbiAgICAgICAgICByZXR1cm4gcmVjdHMuc29tZShmdW5jdGlvbiAocikge1xyXG4gICAgICAgICAgICB2YXIgaW50ZXJzZWN0cyA9IFJlY3QuaW50ZXJzZWN0cyhpdGVtUmVjdCwgcik7XHJcblxyXG4gICAgICAgICAgICBpZiAoaW50ZXJzZWN0cykge1xyXG4gICAgICAgICAgICAgIGludGVyc2VjdGluZ1JlY3QgPSByO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gaW50ZXJzZWN0cztcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pOyAvLyBJZiB0aGVyZSBpcyBhbnkgb3ZlcmxhcCwgcmVwbGFjZSB0aGUgb3ZlcmxhcHBpbmcgcm93IHdpdGggdGhlIG9yaWdpbmFsLlxyXG5cclxuICAgICAgICBpZiAoaGFzT3ZlcmxhcCkge1xyXG4gICAgICAgICAgdmFyIHJvd0luZGV4ID0gY2VudGVyZWRSb3dzLmZpbmRJbmRleChmdW5jdGlvbiAoaXRlbXMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGl0ZW1zLmluY2x1ZGVzKGludGVyc2VjdGluZ1JlY3QpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICBjZW50ZXJlZFJvd3Muc3BsaWNlKHJvd0luZGV4LCAxLCByb3dzW3Jvd0luZGV4XSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICByZWN0cyA9IHJlY3RzLmNvbmNhdChmaW5hbFJlY3RzKTtcclxuICAgICAgY2VudGVyZWRSb3dzLnB1c2goZmluYWxSZWN0cyk7XHJcbiAgICB9KTsgLy8gUmVkdWNlIGFycmF5IG9mIGFycmF5cyB0byBhIHNpbmdsZSBhcnJheSBvZiBwb2ludHMuXHJcbiAgICAvLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTA4NjUwNDIvMzczNDIyXHJcbiAgICAvLyBUaGVuIHJlc2V0IHNvcnQgYmFjayB0byBob3cgdGhlIGl0ZW1zIHdlcmUgcGFzc2VkIHRvIHRoaXMgbWV0aG9kLlxyXG4gICAgLy8gUmVtb3ZlIHRoZSB3cmFwcGVyIG9iamVjdCB3aXRoIGluZGV4LCBtYXAgdG8gYSBQb2ludC5cclxuXHJcbiAgICByZXR1cm4gW10uY29uY2F0LmFwcGx5KFtdLCBjZW50ZXJlZFJvd3MpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcHJlZmVyLXNwcmVhZFxyXG4gICAgLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcclxuICAgICAgcmV0dXJuIGEuaWQgLSBiLmlkO1xyXG4gICAgfSkubWFwKGZ1bmN0aW9uIChpdGVtUmVjdCkge1xyXG4gICAgICByZXR1cm4gbmV3IFBvaW50KGl0ZW1SZWN0LmxlZnQsIGl0ZW1SZWN0LnRvcCk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEh5cGhlbmF0ZXMgYSBqYXZhc2NyaXB0IHN0eWxlIHN0cmluZyB0byBhIGNzcyBvbmUuIEZvciBleGFtcGxlOlxyXG4gICAqIE1vekJveFNpemluZyAtPiAtbW96LWJveC1zaXppbmcuXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0ciBUaGUgc3RyaW5nIHRvIGh5cGhlbmF0ZS5cclxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBoeXBoZW5hdGVkIHN0cmluZy5cclxuICAgKi9cclxuICBmdW5jdGlvbiBoeXBoZW5hdGUoc3RyKSB7XHJcbiAgICByZXR1cm4gc3RyLnJlcGxhY2UoLyhbQS1aXSkvZywgZnVuY3Rpb24gKHN0ciwgbTEpIHtcclxuICAgICAgcmV0dXJuIFwiLVwiLmNvbmNhdChtMS50b0xvd2VyQ2FzZSgpKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gYXJyYXlVbmlxdWUoeCkge1xyXG4gICAgcmV0dXJuIEFycmF5LmZyb20obmV3IFNldCh4KSk7XHJcbiAgfSAvLyBVc2VkIGZvciB1bmlxdWUgaW5zdGFuY2UgdmFyaWFibGVzXHJcblxyXG5cclxuICB2YXIgaWQkMSA9IDA7XHJcblxyXG4gIHZhciBTaHVmZmxlID1cclxuICAvKiNfX1BVUkVfXyovXHJcbiAgZnVuY3Rpb24gKF9UaW55RW1pdHRlcikge1xyXG4gICAgX2luaGVyaXRzKFNodWZmbGUsIF9UaW55RW1pdHRlcik7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDYXRlZ29yaXplLCBzb3J0LCBhbmQgZmlsdGVyIGEgcmVzcG9uc2l2ZSBncmlkIG9mIGl0ZW1zLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBBbiBlbGVtZW50IHdoaWNoIGlzIHRoZSBwYXJlbnQgY29udGFpbmVyIGZvciB0aGUgZ3JpZCBpdGVtcy5cclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz1TaHVmZmxlLm9wdGlvbnNdIE9wdGlvbnMgb2JqZWN0LlxyXG4gICAgICogQGNvbnN0cnVjdG9yXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIFNodWZmbGUoZWxlbWVudCkge1xyXG4gICAgICB2YXIgX3RoaXM7XHJcblxyXG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XHJcblxyXG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2h1ZmZsZSk7XHJcblxyXG4gICAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihTaHVmZmxlKS5jYWxsKHRoaXMpKTtcclxuICAgICAgX3RoaXMub3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIFNodWZmbGUub3B0aW9ucywgb3B0aW9ucyk7IC8vIEFsbG93IG1pc3NwZWxsaW5nIG9mIGRlbGltaXRlciBzaW5jZSB0aGF0J3MgaG93IGl0IHVzZWQgdG8gYmUuXHJcbiAgICAgIC8vIFJlbW92ZSBpbiB2Ni5cclxuXHJcbiAgICAgIGlmIChfdGhpcy5vcHRpb25zLmRlbGltZXRlcikge1xyXG4gICAgICAgIF90aGlzLm9wdGlvbnMuZGVsaW1pdGVyID0gX3RoaXMub3B0aW9ucy5kZWxpbWV0ZXI7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIF90aGlzLmxhc3RTb3J0ID0ge307XHJcbiAgICAgIF90aGlzLmdyb3VwID0gU2h1ZmZsZS5BTExfSVRFTVM7XHJcbiAgICAgIF90aGlzLmxhc3RGaWx0ZXIgPSBTaHVmZmxlLkFMTF9JVEVNUztcclxuICAgICAgX3RoaXMuaXNFbmFibGVkID0gdHJ1ZTtcclxuICAgICAgX3RoaXMuaXNEZXN0cm95ZWQgPSBmYWxzZTtcclxuICAgICAgX3RoaXMuaXNJbml0aWFsaXplZCA9IGZhbHNlO1xyXG4gICAgICBfdGhpcy5fdHJhbnNpdGlvbnMgPSBbXTtcclxuICAgICAgX3RoaXMuaXNUcmFuc2l0aW9uaW5nID0gZmFsc2U7XHJcbiAgICAgIF90aGlzLl9xdWV1ZSA9IFtdO1xyXG5cclxuICAgICAgdmFyIGVsID0gX3RoaXMuX2dldEVsZW1lbnRPcHRpb24oZWxlbWVudCk7XHJcblxyXG4gICAgICBpZiAoIWVsKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignU2h1ZmZsZSBuZWVkcyB0byBiZSBpbml0aWFsaXplZCB3aXRoIGFuIGVsZW1lbnQuJyk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIF90aGlzLmVsZW1lbnQgPSBlbDtcclxuICAgICAgX3RoaXMuaWQgPSAnc2h1ZmZsZV8nICsgaWQkMTtcclxuICAgICAgaWQkMSArPSAxO1xyXG5cclxuICAgICAgX3RoaXMuX2luaXQoKTtcclxuXHJcbiAgICAgIF90aGlzLmlzSW5pdGlhbGl6ZWQgPSB0cnVlO1xyXG4gICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgX2NyZWF0ZUNsYXNzKFNodWZmbGUsIFt7XHJcbiAgICAgIGtleTogXCJfaW5pdFwiLFxyXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX2luaXQoKSB7XHJcbiAgICAgICAgdGhpcy5pdGVtcyA9IHRoaXMuX2dldEl0ZW1zKCk7XHJcbiAgICAgICAgdGhpcy5vcHRpb25zLnNpemVyID0gdGhpcy5fZ2V0RWxlbWVudE9wdGlvbih0aGlzLm9wdGlvbnMuc2l6ZXIpOyAvLyBBZGQgY2xhc3MgYW5kIGludmFsaWRhdGUgc3R5bGVzXHJcblxyXG4gICAgICAgIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKFNodWZmbGUuQ2xhc3Nlcy5CQVNFKTsgLy8gU2V0IGluaXRpYWwgY3NzIGZvciBlYWNoIGl0ZW1cclxuXHJcbiAgICAgICAgdGhpcy5faW5pdEl0ZW1zKHRoaXMuaXRlbXMpOyAvLyBCaW5kIHJlc2l6ZSBldmVudHNcclxuXHJcblxyXG4gICAgICAgIHRoaXMuX29uUmVzaXplID0gdGhpcy5fZ2V0UmVzaXplRnVuY3Rpb24oKTtcclxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5fb25SZXNpemUpOyAvLyBJZiB0aGUgcGFnZSBoYXMgbm90IGFscmVhZHkgZW1pdHRlZCB0aGUgYGxvYWRgIGV2ZW50LCBjYWxsIGxheW91dCBvbiBsb2FkLlxyXG4gICAgICAgIC8vIFRoaXMgYXZvaWRzIGxheW91dCBpc3N1ZXMgY2F1c2VkIGJ5IGltYWdlcyBhbmQgZm9udHMgbG9hZGluZyBhZnRlciB0aGVcclxuICAgICAgICAvLyBpbnN0YW5jZSBoYXMgYmVlbiBpbml0aWFsaXplZC5cclxuXHJcbiAgICAgICAgaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgIT09ICdjb21wbGV0ZScpIHtcclxuICAgICAgICAgIHZhciBsYXlvdXQgPSB0aGlzLmxheW91dC5iaW5kKHRoaXMpO1xyXG4gICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBmdW5jdGlvbiBvbkxvYWQoKSB7XHJcbiAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdsb2FkJywgb25Mb2FkKTtcclxuICAgICAgICAgICAgbGF5b3V0KCk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9IC8vIEdldCBjb250YWluZXIgY3NzIGFsbCBpbiBvbmUgcmVxdWVzdC4gQ2F1c2VzIHJlZmxvd1xyXG5cclxuXHJcbiAgICAgICAgdmFyIGNvbnRhaW5lckNzcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRoaXMuZWxlbWVudCwgbnVsbCk7XHJcbiAgICAgICAgdmFyIGNvbnRhaW5lcldpZHRoID0gU2h1ZmZsZS5nZXRTaXplKHRoaXMuZWxlbWVudCkud2lkdGg7IC8vIEFkZCBzdHlsZXMgdG8gdGhlIGNvbnRhaW5lciBpZiBpdCBkb2Vzbid0IGhhdmUgdGhlbS5cclxuXHJcbiAgICAgICAgdGhpcy5fdmFsaWRhdGVTdHlsZXMoY29udGFpbmVyQ3NzKTsgLy8gV2UgYWxyZWFkeSBnb3QgdGhlIGNvbnRhaW5lcidzIHdpZHRoIGFib3ZlLCBubyBuZWVkIHRvIGNhdXNlIGFub3RoZXJcclxuICAgICAgICAvLyByZWZsb3cgZ2V0dGluZyBpdCBhZ2Fpbi4uLiBDYWxjdWxhdGUgdGhlIG51bWJlciBvZiBjb2x1bW5zIHRoZXJlIHdpbGwgYmVcclxuXHJcblxyXG4gICAgICAgIHRoaXMuX3NldENvbHVtbnMoY29udGFpbmVyV2lkdGgpOyAvLyBLaWNrIG9mZiFcclxuXHJcblxyXG4gICAgICAgIHRoaXMuZmlsdGVyKHRoaXMub3B0aW9ucy5ncm91cCwgdGhpcy5vcHRpb25zLmluaXRpYWxTb3J0KTsgLy8gVGhlIHNodWZmbGUgaXRlbXMgaGF2ZW4ndCBoYWQgdHJhbnNpdGlvbnMgc2V0IG9uIHRoZW0geWV0IHNvIHRoZSB1c2VyXHJcbiAgICAgICAgLy8gZG9lc24ndCBzZWUgdGhlIGZpcnN0IGxheW91dC4gU2V0IHRoZW0gbm93IHRoYXQgdGhlIGZpcnN0IGxheW91dCBpcyBkb25lLlxyXG4gICAgICAgIC8vIEZpcnN0LCBob3dldmVyLCBhIHN5bmNocm9ub3VzIGxheW91dCBtdXN0IGJlIGNhdXNlZCBmb3IgdGhlIHByZXZpb3VzXHJcbiAgICAgICAgLy8gc3R5bGVzIHRvIGJlIGFwcGxpZWQgd2l0aG91dCB0cmFuc2l0aW9ucy5cclxuXHJcbiAgICAgICAgdGhpcy5lbGVtZW50Lm9mZnNldFdpZHRoOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC1leHByZXNzaW9uc1xyXG5cclxuICAgICAgICB0aGlzLnNldEl0ZW1UcmFuc2l0aW9ucyh0aGlzLml0ZW1zKTtcclxuICAgICAgICB0aGlzLmVsZW1lbnQuc3R5bGUudHJhbnNpdGlvbiA9IFwiaGVpZ2h0IFwiLmNvbmNhdCh0aGlzLm9wdGlvbnMuc3BlZWQsIFwibXMgXCIpLmNvbmNhdCh0aGlzLm9wdGlvbnMuZWFzaW5nKTtcclxuICAgICAgfVxyXG4gICAgICAvKipcclxuICAgICAgICogUmV0dXJucyBhIHRocm90dGxlZCBhbmQgcHJveGllZCBmdW5jdGlvbiBmb3IgdGhlIHJlc2l6ZSBoYW5kbGVyLlxyXG4gICAgICAgKiBAcmV0dXJuIHtmdW5jdGlvbn1cclxuICAgICAgICogQHByaXZhdGVcclxuICAgICAgICovXHJcblxyXG4gICAgfSwge1xyXG4gICAgICBrZXk6IFwiX2dldFJlc2l6ZUZ1bmN0aW9uXCIsXHJcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0UmVzaXplRnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIHJlc2l6ZUZ1bmN0aW9uID0gdGhpcy5faGFuZGxlUmVzaXplLmJpbmQodGhpcyk7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMudGhyb3R0bGUgPyB0aGlzLm9wdGlvbnMudGhyb3R0bGUocmVzaXplRnVuY3Rpb24sIHRoaXMub3B0aW9ucy50aHJvdHRsZVRpbWUpIDogcmVzaXplRnVuY3Rpb247XHJcbiAgICAgIH1cclxuICAgICAgLyoqXHJcbiAgICAgICAqIFJldHJpZXZlIGFuIGVsZW1lbnQgZnJvbSBhbiBvcHRpb24uXHJcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfGpRdWVyeXxFbGVtZW50fSBvcHRpb24gVGhlIG9wdGlvbiB0byBjaGVjay5cclxuICAgICAgICogQHJldHVybiB7P0VsZW1lbnR9IFRoZSBwbGFpbiBlbGVtZW50IG9yIG51bGwuXHJcbiAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAqL1xyXG5cclxuICAgIH0sIHtcclxuICAgICAga2V5OiBcIl9nZXRFbGVtZW50T3B0aW9uXCIsXHJcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0RWxlbWVudE9wdGlvbihvcHRpb24pIHtcclxuICAgICAgICAvLyBJZiBjb2x1bW4gd2lkdGggaXMgYSBzdHJpbmcsIHRyZWF0IGlzIGFzIGEgc2VsZWN0b3IgYW5kIHNlYXJjaCBmb3IgdGhlXHJcbiAgICAgICAgLy8gc2l6ZXIgZWxlbWVudCB3aXRoaW4gdGhlIG91dGVybW9zdCBjb250YWluZXJcclxuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvcihvcHRpb24pO1xyXG4gICAgICAgIH0gLy8gQ2hlY2sgZm9yIGFuIGVsZW1lbnRcclxuXHJcblxyXG4gICAgICAgIGlmIChvcHRpb24gJiYgb3B0aW9uLm5vZGVUeXBlICYmIG9wdGlvbi5ub2RlVHlwZSA9PT0gMSkge1xyXG4gICAgICAgICAgcmV0dXJuIG9wdGlvbjtcclxuICAgICAgICB9IC8vIENoZWNrIGZvciBqUXVlcnkgb2JqZWN0XHJcblxyXG5cclxuICAgICAgICBpZiAob3B0aW9uICYmIG9wdGlvbi5qcXVlcnkpIHtcclxuICAgICAgICAgIHJldHVybiBvcHRpb25bMF07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgfVxyXG4gICAgICAvKipcclxuICAgICAgICogRW5zdXJlcyB0aGUgc2h1ZmZsZSBjb250YWluZXIgaGFzIHRoZSBjc3Mgc3R5bGVzIGl0IG5lZWRzIGFwcGxpZWQgdG8gaXQuXHJcbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzdHlsZXMgS2V5IHZhbHVlIHBhaXJzIGZvciBwb3NpdGlvbiBhbmQgb3ZlcmZsb3cuXHJcbiAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAqL1xyXG5cclxuICAgIH0sIHtcclxuICAgICAga2V5OiBcIl92YWxpZGF0ZVN0eWxlc1wiLFxyXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX3ZhbGlkYXRlU3R5bGVzKHN0eWxlcykge1xyXG4gICAgICAgIC8vIFBvc2l0aW9uIGNhbm5vdCBiZSBzdGF0aWMuXHJcbiAgICAgICAgaWYgKHN0eWxlcy5wb3NpdGlvbiA9PT0gJ3N0YXRpYycpIHtcclxuICAgICAgICAgIHRoaXMuZWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9ICdyZWxhdGl2ZSc7XHJcbiAgICAgICAgfSAvLyBPdmVyZmxvdyBoYXMgdG8gYmUgaGlkZGVuLlxyXG5cclxuXHJcbiAgICAgICAgaWYgKHN0eWxlcy5vdmVyZmxvdyAhPT0gJ2hpZGRlbicpIHtcclxuICAgICAgICAgIHRoaXMuZWxlbWVudC5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICAvKipcclxuICAgICAgICogRmlsdGVyIHRoZSBlbGVtZW50cyBieSBhIGNhdGVnb3J5LlxyXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ3xzdHJpbmdbXXxmdW5jdGlvbihFbGVtZW50KTpib29sZWFufSBbY2F0ZWdvcnldIENhdGVnb3J5IHRvXHJcbiAgICAgICAqICAgICBmaWx0ZXIgYnkuIElmIGl0J3MgZ2l2ZW4sIHRoZSBsYXN0IGNhdGVnb3J5IHdpbGwgYmUgdXNlZCB0byBmaWx0ZXIgdGhlIGl0ZW1zLlxyXG4gICAgICAgKiBAcGFyYW0ge0FycmF5fSBbY29sbGVjdGlvbl0gT3B0aW9uYWxseSBmaWx0ZXIgYSBjb2xsZWN0aW9uLiBEZWZhdWx0cyB0b1xyXG4gICAgICAgKiAgICAgYWxsIHRoZSBpdGVtcy5cclxuICAgICAgICogQHJldHVybiB7e3Zpc2libGU6IFNodWZmbGVJdGVtW10sIGhpZGRlbjogU2h1ZmZsZUl0ZW1bXX19XHJcbiAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAqL1xyXG5cclxuICAgIH0sIHtcclxuICAgICAga2V5OiBcIl9maWx0ZXJcIixcclxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9maWx0ZXIoKSB7XHJcbiAgICAgICAgdmFyIGNhdGVnb3J5ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB0aGlzLmxhc3RGaWx0ZXI7XHJcbiAgICAgICAgdmFyIGNvbGxlY3Rpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRoaXMuaXRlbXM7XHJcblxyXG4gICAgICAgIHZhciBzZXQgPSB0aGlzLl9nZXRGaWx0ZXJlZFNldHMoY2F0ZWdvcnksIGNvbGxlY3Rpb24pOyAvLyBJbmRpdmlkdWFsbHkgYWRkL3JlbW92ZSBoaWRkZW4vdmlzaWJsZSBjbGFzc2VzXHJcblxyXG5cclxuICAgICAgICB0aGlzLl90b2dnbGVGaWx0ZXJDbGFzc2VzKHNldCk7IC8vIFNhdmUgdGhlIGxhc3QgZmlsdGVyIGluIGNhc2UgZWxlbWVudHMgYXJlIGFwcGVuZGVkLlxyXG5cclxuXHJcbiAgICAgICAgdGhpcy5sYXN0RmlsdGVyID0gY2F0ZWdvcnk7IC8vIFRoaXMgaXMgc2F2ZWQgbWFpbmx5IGJlY2F1c2UgcHJvdmlkaW5nIGEgZmlsdGVyIGZ1bmN0aW9uIChsaWtlIHNlYXJjaGluZylcclxuICAgICAgICAvLyB3aWxsIG92ZXJ3cml0ZSB0aGUgYGxhc3RGaWx0ZXJgIHByb3BlcnR5IGV2ZXJ5IHRpbWUgaXRzIGNhbGxlZC5cclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiBjYXRlZ29yeSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgIHRoaXMuZ3JvdXAgPSBjYXRlZ29yeTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBzZXQ7XHJcbiAgICAgIH1cclxuICAgICAgLyoqXHJcbiAgICAgICAqIFJldHVybnMgYW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIHZpc2libGUgYW5kIGhpZGRlbiBlbGVtZW50cy5cclxuICAgICAgICogQHBhcmFtIHtzdHJpbmd8c3RyaW5nW118ZnVuY3Rpb24oRWxlbWVudCk6Ym9vbGVhbn0gY2F0ZWdvcnkgQ2F0ZWdvcnkgb3IgZnVuY3Rpb24gdG8gZmlsdGVyIGJ5LlxyXG4gICAgICAgKiBAcGFyYW0ge1NodWZmbGVJdGVtW119IGl0ZW1zIEEgY29sbGVjdGlvbiBvZiBpdGVtcyB0byBmaWx0ZXIuXHJcbiAgICAgICAqIEByZXR1cm4ge3t2aXNpYmxlOiBTaHVmZmxlSXRlbVtdLCBoaWRkZW46IFNodWZmbGVJdGVtW119fVxyXG4gICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgKi9cclxuXHJcbiAgICB9LCB7XHJcbiAgICAgIGtleTogXCJfZ2V0RmlsdGVyZWRTZXRzXCIsXHJcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0RmlsdGVyZWRTZXRzKGNhdGVnb3J5LCBpdGVtcykge1xyXG4gICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xyXG5cclxuICAgICAgICB2YXIgdmlzaWJsZSA9IFtdO1xyXG4gICAgICAgIHZhciBoaWRkZW4gPSBbXTsgLy8gY2F0ZWdvcnkgPT09ICdhbGwnLCBhZGQgdmlzaWJsZSBjbGFzcyB0byBldmVyeXRoaW5nXHJcblxyXG4gICAgICAgIGlmIChjYXRlZ29yeSA9PT0gU2h1ZmZsZS5BTExfSVRFTVMpIHtcclxuICAgICAgICAgIHZpc2libGUgPSBpdGVtczsgLy8gTG9vcCB0aHJvdWdoIGVhY2ggaXRlbSBhbmQgdXNlIHByb3ZpZGVkIGZ1bmN0aW9uIHRvIGRldGVybWluZVxyXG4gICAgICAgICAgLy8gd2hldGhlciB0byBoaWRlIGl0IG9yIG5vdC5cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgaXRlbXMuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgICAgICBpZiAoX3RoaXMyLl9kb2VzUGFzc0ZpbHRlcihjYXRlZ29yeSwgaXRlbS5lbGVtZW50KSkge1xyXG4gICAgICAgICAgICAgIHZpc2libGUucHVzaChpdGVtKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICBoaWRkZW4ucHVzaChpdGVtKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgdmlzaWJsZTogdmlzaWJsZSxcclxuICAgICAgICAgIGhpZGRlbjogaGlkZGVuXHJcbiAgICAgICAgfTtcclxuICAgICAgfVxyXG4gICAgICAvKipcclxuICAgICAgICogVGVzdCBhbiBpdGVtIHRvIHNlZSBpZiBpdCBwYXNzZXMgYSBjYXRlZ29yeS5cclxuICAgICAgICogQHBhcmFtIHtzdHJpbmd8c3RyaW5nW118ZnVuY3Rpb24oKTpib29sZWFufSBjYXRlZ29yeSBDYXRlZ29yeSBvciBmdW5jdGlvbiB0byBmaWx0ZXIgYnkuXHJcbiAgICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBBbiBlbGVtZW50IHRvIHRlc3QuXHJcbiAgICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgaXQgcGFzc2VzIHRoZSBjYXRlZ29yeS9maWx0ZXIuXHJcbiAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAqL1xyXG5cclxuICAgIH0sIHtcclxuICAgICAga2V5OiBcIl9kb2VzUGFzc0ZpbHRlclwiLFxyXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX2RvZXNQYXNzRmlsdGVyKGNhdGVnb3J5LCBlbGVtZW50KSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBjYXRlZ29yeSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgcmV0dXJuIGNhdGVnb3J5LmNhbGwoZWxlbWVudCwgZWxlbWVudCwgdGhpcyk7XHJcbiAgICAgICAgfSAvLyBDaGVjayBlYWNoIGVsZW1lbnQncyBkYXRhLWdyb3VwcyBhdHRyaWJ1dGUgYWdhaW5zdCB0aGUgZ2l2ZW4gY2F0ZWdvcnkuXHJcblxyXG5cclxuICAgICAgICB2YXIgYXR0ciA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLScgKyBTaHVmZmxlLkZJTFRFUl9BVFRSSUJVVEVfS0VZKTtcclxuICAgICAgICB2YXIga2V5cyA9IHRoaXMub3B0aW9ucy5kZWxpbWl0ZXIgPyBhdHRyLnNwbGl0KHRoaXMub3B0aW9ucy5kZWxpbWl0ZXIpIDogSlNPTi5wYXJzZShhdHRyKTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gdGVzdENhdGVnb3J5KGNhdGVnb3J5KSB7XHJcbiAgICAgICAgICByZXR1cm4ga2V5cy5pbmNsdWRlcyhjYXRlZ29yeSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShjYXRlZ29yeSkpIHtcclxuICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZmlsdGVyTW9kZSA9PT0gU2h1ZmZsZS5GaWx0ZXJNb2RlLkFOWSkge1xyXG4gICAgICAgICAgICByZXR1cm4gY2F0ZWdvcnkuc29tZSh0ZXN0Q2F0ZWdvcnkpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIHJldHVybiBjYXRlZ29yeS5ldmVyeSh0ZXN0Q2F0ZWdvcnkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGtleXMuaW5jbHVkZXMoY2F0ZWdvcnkpO1xyXG4gICAgICB9XHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBUb2dnbGVzIHRoZSB2aXNpYmxlIGFuZCBoaWRkZW4gY2xhc3MgbmFtZXMuXHJcbiAgICAgICAqIEBwYXJhbSB7e3Zpc2libGUsIGhpZGRlbn19IE9iamVjdCB3aXRoIHZpc2libGUgYW5kIGhpZGRlbiBhcnJheXMuXHJcbiAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAqL1xyXG5cclxuICAgIH0sIHtcclxuICAgICAga2V5OiBcIl90b2dnbGVGaWx0ZXJDbGFzc2VzXCIsXHJcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfdG9nZ2xlRmlsdGVyQ2xhc3NlcyhfcmVmKSB7XHJcbiAgICAgICAgdmFyIHZpc2libGUgPSBfcmVmLnZpc2libGUsXHJcbiAgICAgICAgICAgIGhpZGRlbiA9IF9yZWYuaGlkZGVuO1xyXG4gICAgICAgIHZpc2libGUuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgICAgaXRlbS5zaG93KCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaGlkZGVuLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICAgIGl0ZW0uaGlkZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBTZXQgdGhlIGluaXRpYWwgY3NzIGZvciBlYWNoIGl0ZW1cclxuICAgICAgICogQHBhcmFtIHtTaHVmZmxlSXRlbVtdfSBpdGVtcyBTZXQgdG8gaW5pdGlhbGl6ZS5cclxuICAgICAgICogQHByaXZhdGVcclxuICAgICAgICovXHJcblxyXG4gICAgfSwge1xyXG4gICAgICBrZXk6IFwiX2luaXRJdGVtc1wiLFxyXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX2luaXRJdGVtcyhpdGVtcykge1xyXG4gICAgICAgIGl0ZW1zLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICAgIGl0ZW0uaW5pdCgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBSZW1vdmUgZWxlbWVudCByZWZlcmVuY2UgYW5kIHN0eWxlcy5cclxuICAgICAgICogQHBhcmFtIHtTaHVmZmxlSXRlbVtdfSBpdGVtcyBTZXQgdG8gZGlzcG9zZS5cclxuICAgICAgICogQHByaXZhdGVcclxuICAgICAgICovXHJcblxyXG4gICAgfSwge1xyXG4gICAgICBrZXk6IFwiX2Rpc3Bvc2VJdGVtc1wiLFxyXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX2Rpc3Bvc2VJdGVtcyhpdGVtcykge1xyXG4gICAgICAgIGl0ZW1zLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICAgIGl0ZW0uZGlzcG9zZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBVcGRhdGVzIHRoZSB2aXNpYmxlIGl0ZW0gY291bnQuXHJcbiAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAqL1xyXG5cclxuICAgIH0sIHtcclxuICAgICAga2V5OiBcIl91cGRhdGVJdGVtQ291bnRcIixcclxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF91cGRhdGVJdGVtQ291bnQoKSB7XHJcbiAgICAgICAgdGhpcy52aXNpYmxlSXRlbXMgPSB0aGlzLl9nZXRGaWx0ZXJlZEl0ZW1zKCkubGVuZ3RoO1xyXG4gICAgICB9XHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBTZXRzIGNzcyB0cmFuc2Zvcm0gdHJhbnNpdGlvbiBvbiBhIGdyb3VwIG9mIGVsZW1lbnRzLiBUaGlzIGlzIG5vdCBleGVjdXRlZFxyXG4gICAgICAgKiBhdCB0aGUgc2FtZSB0aW1lIGFzIGBpdGVtLmluaXRgIHNvIHRoYXQgdHJhbnNpdGlvbnMgZG9uJ3Qgb2NjdXIgdXBvblxyXG4gICAgICAgKiBpbml0aWFsaXphdGlvbiBvZiBhIG5ldyBTaHVmZmxlIGluc3RhbmNlLlxyXG4gICAgICAgKiBAcGFyYW0ge1NodWZmbGVJdGVtW119IGl0ZW1zIFNodWZmbGUgaXRlbXMgdG8gc2V0IHRyYW5zaXRpb25zIG9uLlxyXG4gICAgICAgKiBAcHJvdGVjdGVkXHJcbiAgICAgICAqL1xyXG5cclxuICAgIH0sIHtcclxuICAgICAga2V5OiBcInNldEl0ZW1UcmFuc2l0aW9uc1wiLFxyXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0SXRlbVRyYW5zaXRpb25zKGl0ZW1zKSB7XHJcbiAgICAgICAgdmFyIF90aGlzJG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsXHJcbiAgICAgICAgICAgIHNwZWVkID0gX3RoaXMkb3B0aW9ucy5zcGVlZCxcclxuICAgICAgICAgICAgZWFzaW5nID0gX3RoaXMkb3B0aW9ucy5lYXNpbmc7XHJcbiAgICAgICAgdmFyIHBvc2l0aW9uUHJvcHMgPSB0aGlzLm9wdGlvbnMudXNlVHJhbnNmb3JtcyA/IFsndHJhbnNmb3JtJ10gOiBbJ3RvcCcsICdsZWZ0J107IC8vIEFsbG93IHVzZXJzIHRvIHRyYW5zdGlvbiBvdGhlciBwcm9wZXJ0aWVzIGlmIHRoZXkgZXhpc3QgaW4gdGhlIGBiZWZvcmVgXHJcbiAgICAgICAgLy8gY3NzIG1hcHBpbmcgb2YgdGhlIHNodWZmbGUgaXRlbS5cclxuXHJcbiAgICAgICAgdmFyIGNzc1Byb3BzID0gT2JqZWN0LmtleXMoU2h1ZmZsZUl0ZW0uQ3NzLkhJRERFTi5iZWZvcmUpLm1hcChmdW5jdGlvbiAoaykge1xyXG4gICAgICAgICAgcmV0dXJuIGh5cGhlbmF0ZShrKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB2YXIgcHJvcGVydGllcyA9IHBvc2l0aW9uUHJvcHMuY29uY2F0KGNzc1Byb3BzKS5qb2luKCk7XHJcbiAgICAgICAgaXRlbXMuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgICAgaXRlbS5lbGVtZW50LnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IHNwZWVkICsgJ21zJztcclxuICAgICAgICAgIGl0ZW0uZWxlbWVudC5zdHlsZS50cmFuc2l0aW9uVGltaW5nRnVuY3Rpb24gPSBlYXNpbmc7XHJcbiAgICAgICAgICBpdGVtLmVsZW1lbnQuc3R5bGUudHJhbnNpdGlvblByb3BlcnR5ID0gcHJvcGVydGllcztcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfSwge1xyXG4gICAgICBrZXk6IFwiX2dldEl0ZW1zXCIsXHJcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0SXRlbXMoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XHJcblxyXG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMuZWxlbWVudC5jaGlsZHJlbikuZmlsdGVyKGZ1bmN0aW9uIChlbCkge1xyXG4gICAgICAgICAgcmV0dXJuIG1hdGNoZXNTZWxlY3RvcihlbCwgX3RoaXMzLm9wdGlvbnMuaXRlbVNlbGVjdG9yKTtcclxuICAgICAgICB9KS5tYXAoZnVuY3Rpb24gKGVsKSB7XHJcbiAgICAgICAgICByZXR1cm4gbmV3IFNodWZmbGVJdGVtKGVsKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgICAvKipcclxuICAgICAgICogQ29tYmluZSB0aGUgY3VycmVudCBpdGVtcyBhcnJheSB3aXRoIGEgbmV3IG9uZSBhbmQgc29ydCBpdCBieSBET00gb3JkZXIuXHJcbiAgICAgICAqIEBwYXJhbSB7U2h1ZmZsZUl0ZW1bXX0gaXRlbXMgSXRlbXMgdG8gdHJhY2suXHJcbiAgICAgICAqIEByZXR1cm4ge1NodWZmbGVJdGVtW119XHJcbiAgICAgICAqL1xyXG5cclxuICAgIH0sIHtcclxuICAgICAga2V5OiBcIl9tZXJnZU5ld0l0ZW1zXCIsXHJcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfbWVyZ2VOZXdJdGVtcyhpdGVtcykge1xyXG4gICAgICAgIHZhciBjaGlsZHJlbiA9IEFycmF5LmZyb20odGhpcy5lbGVtZW50LmNoaWxkcmVuKTtcclxuICAgICAgICByZXR1cm4gc29ydGVyKHRoaXMuaXRlbXMuY29uY2F0KGl0ZW1zKSwge1xyXG4gICAgICAgICAgYnk6IGZ1bmN0aW9uIGJ5KGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNoaWxkcmVuLmluZGV4T2YoZWxlbWVudCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH0sIHtcclxuICAgICAga2V5OiBcIl9nZXRGaWx0ZXJlZEl0ZW1zXCIsXHJcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0RmlsdGVyZWRJdGVtcygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5pdGVtcy5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICAgIHJldHVybiBpdGVtLmlzVmlzaWJsZTtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfSwge1xyXG4gICAgICBrZXk6IFwiX2dldENvbmNlYWxlZEl0ZW1zXCIsXHJcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0Q29uY2VhbGVkSXRlbXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaXRlbXMuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgICByZXR1cm4gIWl0ZW0uaXNWaXNpYmxlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBSZXR1cm5zIHRoZSBjb2x1bW4gc2l6ZSwgYmFzZWQgb24gY29sdW1uIHdpZHRoIGFuZCBzaXplciBvcHRpb25zLlxyXG4gICAgICAgKiBAcGFyYW0ge251bWJlcn0gY29udGFpbmVyV2lkdGggU2l6ZSBvZiB0aGUgcGFyZW50IGNvbnRhaW5lci5cclxuICAgICAgICogQHBhcmFtIHtudW1iZXJ9IGd1dHRlclNpemUgU2l6ZSBvZiB0aGUgZ3V0dGVycy5cclxuICAgICAgICogQHJldHVybiB7bnVtYmVyfVxyXG4gICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgKi9cclxuXHJcbiAgICB9LCB7XHJcbiAgICAgIGtleTogXCJfZ2V0Q29sdW1uU2l6ZVwiLFxyXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX2dldENvbHVtblNpemUoY29udGFpbmVyV2lkdGgsIGd1dHRlclNpemUpIHtcclxuICAgICAgICB2YXIgc2l6ZTsgLy8gSWYgdGhlIGNvbHVtbldpZHRoIHByb3BlcnR5IGlzIGEgZnVuY3Rpb24sIHRoZW4gdGhlIGdyaWQgaXMgZmx1aWRcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm9wdGlvbnMuY29sdW1uV2lkdGggPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgIHNpemUgPSB0aGlzLm9wdGlvbnMuY29sdW1uV2lkdGgoY29udGFpbmVyV2lkdGgpOyAvLyBjb2x1bW5XaWR0aCBvcHRpb24gaXNuJ3QgYSBmdW5jdGlvbiwgYXJlIHRoZXkgdXNpbmcgYSBzaXppbmcgZWxlbWVudD9cclxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMub3B0aW9ucy5zaXplcikge1xyXG4gICAgICAgICAgc2l6ZSA9IFNodWZmbGUuZ2V0U2l6ZSh0aGlzLm9wdGlvbnMuc2l6ZXIpLndpZHRoOyAvLyBpZiBub3QsIGhvdyBhYm91dCB0aGUgZXhwbGljaXRseSBzZXQgb3B0aW9uP1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5vcHRpb25zLmNvbHVtbldpZHRoKSB7XHJcbiAgICAgICAgICBzaXplID0gdGhpcy5vcHRpb25zLmNvbHVtbldpZHRoOyAvLyBvciB1c2UgdGhlIHNpemUgb2YgdGhlIGZpcnN0IGl0ZW1cclxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXRlbXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgc2l6ZSA9IFNodWZmbGUuZ2V0U2l6ZSh0aGlzLml0ZW1zWzBdLmVsZW1lbnQsIHRydWUpLndpZHRoOyAvLyBpZiB0aGVyZSdzIG5vIGl0ZW1zLCB1c2Ugc2l6ZSBvZiBjb250YWluZXJcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgc2l6ZSA9IGNvbnRhaW5lcldpZHRoO1xyXG4gICAgICAgIH0gLy8gRG9uJ3QgbGV0IHRoZW0gc2V0IGEgY29sdW1uIHdpZHRoIG9mIHplcm8uXHJcblxyXG5cclxuICAgICAgICBpZiAoc2l6ZSA9PT0gMCkge1xyXG4gICAgICAgICAgc2l6ZSA9IGNvbnRhaW5lcldpZHRoO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHNpemUgKyBndXR0ZXJTaXplO1xyXG4gICAgICB9XHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBSZXR1cm5zIHRoZSBndXR0ZXIgc2l6ZSwgYmFzZWQgb24gZ3V0dGVyIHdpZHRoIGFuZCBzaXplciBvcHRpb25zLlxyXG4gICAgICAgKiBAcGFyYW0ge251bWJlcn0gY29udGFpbmVyV2lkdGggU2l6ZSBvZiB0aGUgcGFyZW50IGNvbnRhaW5lci5cclxuICAgICAgICogQHJldHVybiB7bnVtYmVyfVxyXG4gICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgKi9cclxuXHJcbiAgICB9LCB7XHJcbiAgICAgIGtleTogXCJfZ2V0R3V0dGVyU2l6ZVwiLFxyXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX2dldEd1dHRlclNpemUoY29udGFpbmVyV2lkdGgpIHtcclxuICAgICAgICB2YXIgc2l6ZTtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm9wdGlvbnMuZ3V0dGVyV2lkdGggPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgIHNpemUgPSB0aGlzLm9wdGlvbnMuZ3V0dGVyV2lkdGgoY29udGFpbmVyV2lkdGgpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5vcHRpb25zLnNpemVyKSB7XHJcbiAgICAgICAgICBzaXplID0gZ2V0TnVtYmVyU3R5bGUodGhpcy5vcHRpb25zLnNpemVyLCAnbWFyZ2luTGVmdCcpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBzaXplID0gdGhpcy5vcHRpb25zLmd1dHRlcldpZHRoO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHNpemU7XHJcbiAgICAgIH1cclxuICAgICAgLyoqXHJcbiAgICAgICAqIENhbGN1bGF0ZSB0aGUgbnVtYmVyIG9mIGNvbHVtbnMgdG8gYmUgdXNlZC4gR2V0cyBjc3MgaWYgdXNpbmcgc2l6ZXIgZWxlbWVudC5cclxuICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtjb250YWluZXJXaWR0aF0gT3B0aW9uYWxseSBzcGVjaWZ5IGEgY29udGFpbmVyIHdpZHRoIGlmXHJcbiAgICAgICAqICAgIGl0J3MgYWxyZWFkeSBhdmFpbGFibGUuXHJcbiAgICAgICAqL1xyXG5cclxuICAgIH0sIHtcclxuICAgICAga2V5OiBcIl9zZXRDb2x1bW5zXCIsXHJcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0Q29sdW1ucygpIHtcclxuICAgICAgICB2YXIgY29udGFpbmVyV2lkdGggPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IFNodWZmbGUuZ2V0U2l6ZSh0aGlzLmVsZW1lbnQpLndpZHRoO1xyXG5cclxuICAgICAgICB2YXIgZ3V0dGVyID0gdGhpcy5fZ2V0R3V0dGVyU2l6ZShjb250YWluZXJXaWR0aCk7XHJcblxyXG4gICAgICAgIHZhciBjb2x1bW5XaWR0aCA9IHRoaXMuX2dldENvbHVtblNpemUoY29udGFpbmVyV2lkdGgsIGd1dHRlcik7XHJcblxyXG4gICAgICAgIHZhciBjYWxjdWxhdGVkQ29sdW1ucyA9IChjb250YWluZXJXaWR0aCArIGd1dHRlcikgLyBjb2x1bW5XaWR0aDsgLy8gV2lkdGhzIGdpdmVuIGZyb20gZ2V0U3R5bGVzIGFyZSBub3QgcHJlY2lzZSBlbm91Z2guLi5cclxuXHJcbiAgICAgICAgaWYgKE1hdGguYWJzKE1hdGgucm91bmQoY2FsY3VsYXRlZENvbHVtbnMpIC0gY2FsY3VsYXRlZENvbHVtbnMpIDwgdGhpcy5vcHRpb25zLmNvbHVtblRocmVzaG9sZCkge1xyXG4gICAgICAgICAgLy8gZS5nLiBjYWxjdWxhdGVkQ29sdW1ucyA9IDExLjk5ODg3NlxyXG4gICAgICAgICAgY2FsY3VsYXRlZENvbHVtbnMgPSBNYXRoLnJvdW5kKGNhbGN1bGF0ZWRDb2x1bW5zKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuY29scyA9IE1hdGgubWF4KE1hdGguZmxvb3IoY2FsY3VsYXRlZENvbHVtbnMgfHwgMCksIDEpO1xyXG4gICAgICAgIHRoaXMuY29udGFpbmVyV2lkdGggPSBjb250YWluZXJXaWR0aDtcclxuICAgICAgICB0aGlzLmNvbFdpZHRoID0gY29sdW1uV2lkdGg7XHJcbiAgICAgIH1cclxuICAgICAgLyoqXHJcbiAgICAgICAqIEFkanVzdCB0aGUgaGVpZ2h0IG9mIHRoZSBncmlkXHJcbiAgICAgICAqL1xyXG5cclxuICAgIH0sIHtcclxuICAgICAga2V5OiBcIl9zZXRDb250YWluZXJTaXplXCIsXHJcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0Q29udGFpbmVyU2l6ZSgpIHtcclxuICAgICAgICB0aGlzLmVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gdGhpcy5fZ2V0Q29udGFpbmVyU2l6ZSgpICsgJ3B4JztcclxuICAgICAgfVxyXG4gICAgICAvKipcclxuICAgICAgICogQmFzZWQgb24gdGhlIGNvbHVtbiBoZWlnaHRzLCBpdCByZXR1cm5zIHRoZSBiaWdnZXN0IG9uZS5cclxuICAgICAgICogQHJldHVybiB7bnVtYmVyfVxyXG4gICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgKi9cclxuXHJcbiAgICB9LCB7XHJcbiAgICAgIGtleTogXCJfZ2V0Q29udGFpbmVyU2l6ZVwiLFxyXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX2dldENvbnRhaW5lclNpemUoKSB7XHJcbiAgICAgICAgcmV0dXJuIGFycmF5TWF4KHRoaXMucG9zaXRpb25zKTtcclxuICAgICAgfVxyXG4gICAgICAvKipcclxuICAgICAgICogR2V0IHRoZSBjbGFtcGVkIHN0YWdnZXIgYW1vdW50LlxyXG4gICAgICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggSW5kZXggb2YgdGhlIGl0ZW0gdG8gYmUgc3RhZ2dlcmVkLlxyXG4gICAgICAgKiBAcmV0dXJuIHtudW1iZXJ9XHJcbiAgICAgICAqL1xyXG5cclxuICAgIH0sIHtcclxuICAgICAga2V5OiBcIl9nZXRTdGFnZ2VyQW1vdW50XCIsXHJcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0U3RhZ2dlckFtb3VudChpbmRleCkge1xyXG4gICAgICAgIHJldHVybiBNYXRoLm1pbihpbmRleCAqIHRoaXMub3B0aW9ucy5zdGFnZ2VyQW1vdW50LCB0aGlzLm9wdGlvbnMuc3RhZ2dlckFtb3VudE1heCk7XHJcbiAgICAgIH1cclxuICAgICAgLyoqXHJcbiAgICAgICAqIEVtaXQgYW4gZXZlbnQgZnJvbSB0aGlzIGluc3RhbmNlLlxyXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBFdmVudCBuYW1lLlxyXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gW2RhdGE9e31dIE9wdGlvbmFsIG9iamVjdCBkYXRhLlxyXG4gICAgICAgKi9cclxuXHJcbiAgICB9LCB7XHJcbiAgICAgIGtleTogXCJfZGlzcGF0Y2hcIixcclxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9kaXNwYXRjaChuYW1lKSB7XHJcbiAgICAgICAgdmFyIGRhdGEgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xyXG5cclxuICAgICAgICBpZiAodGhpcy5pc0Rlc3Ryb3llZCkge1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZGF0YS5zaHVmZmxlID0gdGhpcztcclxuICAgICAgICB0aGlzLmVtaXQobmFtZSwgZGF0YSk7XHJcbiAgICAgIH1cclxuICAgICAgLyoqXHJcbiAgICAgICAqIFplcm9zIG91dCB0aGUgeSBjb2x1bW5zIGFycmF5LCB3aGljaCBpcyB1c2VkIHRvIGRldGVybWluZSBpdGVtIHBsYWNlbWVudC5cclxuICAgICAgICogQHByaXZhdGVcclxuICAgICAgICovXHJcblxyXG4gICAgfSwge1xyXG4gICAgICBrZXk6IFwiX3Jlc2V0Q29sc1wiLFxyXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX3Jlc2V0Q29scygpIHtcclxuICAgICAgICB2YXIgaSA9IHRoaXMuY29scztcclxuICAgICAgICB0aGlzLnBvc2l0aW9ucyA9IFtdO1xyXG5cclxuICAgICAgICB3aGlsZSAoaSkge1xyXG4gICAgICAgICAgaSAtPSAxO1xyXG4gICAgICAgICAgdGhpcy5wb3NpdGlvbnMucHVzaCgwKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgLyoqXHJcbiAgICAgICAqIExvb3BzIHRocm91Z2ggZWFjaCBpdGVtIHRoYXQgc2hvdWxkIGJlIHNob3duIGFuZCBjYWxjdWxhdGVzIHRoZSB4LCB5IHBvc2l0aW9uLlxyXG4gICAgICAgKiBAcGFyYW0ge1NodWZmbGVJdGVtW119IGl0ZW1zIEFycmF5IG9mIGl0ZW1zIHRoYXQgd2lsbCBiZSBzaG93bi9sYXllZFxyXG4gICAgICAgKiAgICAgb3V0IGluIG9yZGVyIGluIHRoZWlyIGFycmF5LlxyXG4gICAgICAgKi9cclxuXHJcbiAgICB9LCB7XHJcbiAgICAgIGtleTogXCJfbGF5b3V0XCIsXHJcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfbGF5b3V0KGl0ZW1zKSB7XHJcbiAgICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XHJcblxyXG4gICAgICAgIHZhciBpdGVtUG9zaXRpb25zID0gdGhpcy5fZ2V0TmV4dFBvc2l0aW9ucyhpdGVtcyk7XHJcblxyXG4gICAgICAgIHZhciBjb3VudCA9IDA7XHJcbiAgICAgICAgaXRlbXMuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSwgaSkge1xyXG4gICAgICAgICAgZnVuY3Rpb24gY2FsbGJhY2soKSB7XHJcbiAgICAgICAgICAgIGl0ZW0uYXBwbHlDc3MoU2h1ZmZsZUl0ZW0uQ3NzLlZJU0lCTEUuYWZ0ZXIpO1xyXG4gICAgICAgICAgfSAvLyBJZiB0aGUgaXRlbSB3aWxsIG5vdCBjaGFuZ2UgaXRzIHBvc2l0aW9uLCBkbyBub3QgYWRkIGl0IHRvIHRoZSByZW5kZXJcclxuICAgICAgICAgIC8vIHF1ZXVlLiBUcmFuc2l0aW9ucyBkb24ndCBmaXJlIHdoZW4gc2V0dGluZyBhIHByb3BlcnR5IHRvIHRoZSBzYW1lIHZhbHVlLlxyXG5cclxuXHJcbiAgICAgICAgICBpZiAoUG9pbnQuZXF1YWxzKGl0ZW0ucG9pbnQsIGl0ZW1Qb3NpdGlvbnNbaV0pICYmICFpdGVtLmlzSGlkZGVuKSB7XHJcbiAgICAgICAgICAgIGl0ZW0uYXBwbHlDc3MoU2h1ZmZsZUl0ZW0uQ3NzLlZJU0lCTEUuYmVmb3JlKTtcclxuICAgICAgICAgICAgY2FsbGJhY2soKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGl0ZW0ucG9pbnQgPSBpdGVtUG9zaXRpb25zW2ldO1xyXG4gICAgICAgICAgaXRlbS5zY2FsZSA9IFNodWZmbGVJdGVtLlNjYWxlLlZJU0lCTEU7XHJcbiAgICAgICAgICBpdGVtLmlzSGlkZGVuID0gZmFsc2U7IC8vIENsb25lIHRoZSBvYmplY3Qgc28gdGhhdCB0aGUgYGJlZm9yZWAgb2JqZWN0IGlzbid0IG1vZGlmaWVkIHdoZW4gdGhlXHJcbiAgICAgICAgICAvLyB0cmFuc2l0aW9uIGRlbGF5IGlzIGFkZGVkLlxyXG5cclxuICAgICAgICAgIHZhciBzdHlsZXMgPSBfdGhpczQuZ2V0U3R5bGVzRm9yVHJhbnNpdGlvbihpdGVtLCBTaHVmZmxlSXRlbS5Dc3MuVklTSUJMRS5iZWZvcmUpO1xyXG5cclxuICAgICAgICAgIHN0eWxlcy50cmFuc2l0aW9uRGVsYXkgPSBfdGhpczQuX2dldFN0YWdnZXJBbW91bnQoY291bnQpICsgJ21zJztcclxuXHJcbiAgICAgICAgICBfdGhpczQuX3F1ZXVlLnB1c2goe1xyXG4gICAgICAgICAgICBpdGVtOiBpdGVtLFxyXG4gICAgICAgICAgICBzdHlsZXM6IHN0eWxlcyxcclxuICAgICAgICAgICAgY2FsbGJhY2s6IGNhbGxiYWNrXHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICBjb3VudCArPSAxO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBSZXR1cm4gYW4gYXJyYXkgb2YgUG9pbnQgaW5zdGFuY2VzIHJlcHJlc2VudGluZyB0aGUgZnV0dXJlIHBvc2l0aW9ucyBvZlxyXG4gICAgICAgKiBlYWNoIGl0ZW0uXHJcbiAgICAgICAqIEBwYXJhbSB7U2h1ZmZsZUl0ZW1bXX0gaXRlbXMgQXJyYXkgb2Ygc29ydGVkIHNodWZmbGUgaXRlbXMuXHJcbiAgICAgICAqIEByZXR1cm4ge1BvaW50W119XHJcbiAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAqL1xyXG5cclxuICAgIH0sIHtcclxuICAgICAga2V5OiBcIl9nZXROZXh0UG9zaXRpb25zXCIsXHJcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0TmV4dFBvc2l0aW9ucyhpdGVtcykge1xyXG4gICAgICAgIHZhciBfdGhpczUgPSB0aGlzO1xyXG5cclxuICAgICAgICAvLyBJZiBwb3NpdGlvbiBkYXRhIGlzIGdvaW5nIHRvIGJlIGNoYW5nZWQsIGFkZCB0aGUgaXRlbSdzIHNpemUgdG8gdGhlXHJcbiAgICAgICAgLy8gdHJhbnNmb3JtZXIgdG8gYWxsb3cgZm9yIGNhbGN1bGF0aW9ucy5cclxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmlzQ2VudGVyZWQpIHtcclxuICAgICAgICAgIHZhciBpdGVtc0RhdGEgPSBpdGVtcy5tYXAoZnVuY3Rpb24gKGl0ZW0sIGkpIHtcclxuICAgICAgICAgICAgdmFyIGl0ZW1TaXplID0gU2h1ZmZsZS5nZXRTaXplKGl0ZW0uZWxlbWVudCwgdHJ1ZSk7XHJcblxyXG4gICAgICAgICAgICB2YXIgcG9pbnQgPSBfdGhpczUuX2dldEl0ZW1Qb3NpdGlvbihpdGVtU2l6ZSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFJlY3QocG9pbnQueCwgcG9pbnQueSwgaXRlbVNpemUud2lkdGgsIGl0ZW1TaXplLmhlaWdodCwgaSk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIHJldHVybiB0aGlzLmdldFRyYW5zZm9ybWVkUG9zaXRpb25zKGl0ZW1zRGF0YSwgdGhpcy5jb250YWluZXJXaWR0aCk7XHJcbiAgICAgICAgfSAvLyBJZiBubyB0cmFuc2Zvcm1zIGFyZSBnb2luZyB0byBoYXBwZW4sIHNpbXBseSByZXR1cm4gYW4gYXJyYXkgb2YgdGhlXHJcbiAgICAgICAgLy8gZnV0dXJlIHBvaW50cyBvZiBlYWNoIGl0ZW0uXHJcblxyXG5cclxuICAgICAgICByZXR1cm4gaXRlbXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgICByZXR1cm4gX3RoaXM1Ll9nZXRJdGVtUG9zaXRpb24oU2h1ZmZsZS5nZXRTaXplKGl0ZW0uZWxlbWVudCwgdHJ1ZSkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBEZXRlcm1pbmUgdGhlIGxvY2F0aW9uIG9mIHRoZSBuZXh0IGl0ZW0sIGJhc2VkIG9uIGl0cyBzaXplLlxyXG4gICAgICAgKiBAcGFyYW0ge3t3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcn19IGl0ZW1TaXplIE9iamVjdCB3aXRoIHdpZHRoIGFuZCBoZWlnaHQuXHJcbiAgICAgICAqIEByZXR1cm4ge1BvaW50fVxyXG4gICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgKi9cclxuXHJcbiAgICB9LCB7XHJcbiAgICAgIGtleTogXCJfZ2V0SXRlbVBvc2l0aW9uXCIsXHJcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0SXRlbVBvc2l0aW9uKGl0ZW1TaXplKSB7XHJcbiAgICAgICAgcmV0dXJuIGdldEl0ZW1Qb3NpdGlvbih7XHJcbiAgICAgICAgICBpdGVtU2l6ZTogaXRlbVNpemUsXHJcbiAgICAgICAgICBwb3NpdGlvbnM6IHRoaXMucG9zaXRpb25zLFxyXG4gICAgICAgICAgZ3JpZFNpemU6IHRoaXMuY29sV2lkdGgsXHJcbiAgICAgICAgICB0b3RhbDogdGhpcy5jb2xzLFxyXG4gICAgICAgICAgdGhyZXNob2xkOiB0aGlzLm9wdGlvbnMuY29sdW1uVGhyZXNob2xkLFxyXG4gICAgICAgICAgYnVmZmVyOiB0aGlzLm9wdGlvbnMuYnVmZmVyXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgICAgLyoqXHJcbiAgICAgICAqIE11dGF0ZSBwb3NpdGlvbnMgYmVmb3JlIHRoZXkncmUgYXBwbGllZC5cclxuICAgICAgICogQHBhcmFtIHtSZWN0W119IGl0ZW1SZWN0cyBJdGVtIGRhdGEgb2JqZWN0cy5cclxuICAgICAgICogQHBhcmFtIHtudW1iZXJ9IGNvbnRhaW5lcldpZHRoIFdpZHRoIG9mIHRoZSBjb250YWluaW5nIGVsZW1lbnQuXHJcbiAgICAgICAqIEByZXR1cm4ge1BvaW50W119XHJcbiAgICAgICAqIEBwcm90ZWN0ZWRcclxuICAgICAgICovXHJcblxyXG4gICAgfSwge1xyXG4gICAgICBrZXk6IFwiZ2V0VHJhbnNmb3JtZWRQb3NpdGlvbnNcIixcclxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFRyYW5zZm9ybWVkUG9zaXRpb25zKGl0ZW1SZWN0cywgY29udGFpbmVyV2lkdGgpIHtcclxuICAgICAgICByZXR1cm4gZ2V0Q2VudGVyZWRQb3NpdGlvbnMoaXRlbVJlY3RzLCBjb250YWluZXJXaWR0aCk7XHJcbiAgICAgIH1cclxuICAgICAgLyoqXHJcbiAgICAgICAqIEhpZGVzIHRoZSBlbGVtZW50cyB0aGF0IGRvbid0IG1hdGNoIG91ciBmaWx0ZXIuXHJcbiAgICAgICAqIEBwYXJhbSB7U2h1ZmZsZUl0ZW1bXX0gY29sbGVjdGlvbiBDb2xsZWN0aW9uIHRvIHNocmluay5cclxuICAgICAgICogQHByaXZhdGVcclxuICAgICAgICovXHJcblxyXG4gICAgfSwge1xyXG4gICAgICBrZXk6IFwiX3Nocmlua1wiLFxyXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX3NocmluaygpIHtcclxuICAgICAgICB2YXIgX3RoaXM2ID0gdGhpcztcclxuXHJcbiAgICAgICAgdmFyIGNvbGxlY3Rpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHRoaXMuX2dldENvbmNlYWxlZEl0ZW1zKCk7XHJcbiAgICAgICAgdmFyIGNvdW50ID0gMDtcclxuICAgICAgICBjb2xsZWN0aW9uLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICAgIGZ1bmN0aW9uIGNhbGxiYWNrKCkge1xyXG4gICAgICAgICAgICBpdGVtLmFwcGx5Q3NzKFNodWZmbGVJdGVtLkNzcy5ISURERU4uYWZ0ZXIpO1xyXG4gICAgICAgICAgfSAvLyBDb250aW51aW5nIHdvdWxkIGFkZCBhIHRyYW5zaXRpb25lbmQgZXZlbnQgbGlzdGVuZXIgdG8gdGhlIGVsZW1lbnQsIGJ1dFxyXG4gICAgICAgICAgLy8gdGhhdCBsaXN0ZW5lciB3b3VsZCBub3QgZXhlY3V0ZSBiZWNhdXNlIHRoZSB0cmFuc2Zvcm0gYW5kIG9wYWNpdHkgd291bGRcclxuICAgICAgICAgIC8vIHN0YXkgdGhlIHNhbWUuXHJcbiAgICAgICAgICAvLyBUaGUgY2FsbGJhY2sgaXMgZXhlY3V0ZWQgaGVyZSBiZWNhdXNlIGl0IGlzIG5vdCBndWFyYW50ZWVkIHRvIGJlIGNhbGxlZFxyXG4gICAgICAgICAgLy8gYWZ0ZXIgdGhlIHRyYW5zaXRpb25lbmQgZXZlbnQgYmVjYXVzZSB0aGUgdHJhbnNpdGlvbmVuZCBjb3VsZCBiZVxyXG4gICAgICAgICAgLy8gY2FuY2VsZWQgaWYgYW5vdGhlciBhbmltYXRpb24gc3RhcnRzLlxyXG5cclxuXHJcbiAgICAgICAgICBpZiAoaXRlbS5pc0hpZGRlbikge1xyXG4gICAgICAgICAgICBpdGVtLmFwcGx5Q3NzKFNodWZmbGVJdGVtLkNzcy5ISURERU4uYmVmb3JlKTtcclxuICAgICAgICAgICAgY2FsbGJhY2soKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGl0ZW0uc2NhbGUgPSBTaHVmZmxlSXRlbS5TY2FsZS5ISURERU47XHJcbiAgICAgICAgICBpdGVtLmlzSGlkZGVuID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICB2YXIgc3R5bGVzID0gX3RoaXM2LmdldFN0eWxlc0ZvclRyYW5zaXRpb24oaXRlbSwgU2h1ZmZsZUl0ZW0uQ3NzLkhJRERFTi5iZWZvcmUpO1xyXG5cclxuICAgICAgICAgIHN0eWxlcy50cmFuc2l0aW9uRGVsYXkgPSBfdGhpczYuX2dldFN0YWdnZXJBbW91bnQoY291bnQpICsgJ21zJztcclxuXHJcbiAgICAgICAgICBfdGhpczYuX3F1ZXVlLnB1c2goe1xyXG4gICAgICAgICAgICBpdGVtOiBpdGVtLFxyXG4gICAgICAgICAgICBzdHlsZXM6IHN0eWxlcyxcclxuICAgICAgICAgICAgY2FsbGJhY2s6IGNhbGxiYWNrXHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICBjb3VudCArPSAxO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBSZXNpemUgaGFuZGxlci5cclxuICAgICAgICogQHByaXZhdGVcclxuICAgICAgICovXHJcblxyXG4gICAgfSwge1xyXG4gICAgICBrZXk6IFwiX2hhbmRsZVJlc2l6ZVwiLFxyXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX2hhbmRsZVJlc2l6ZSgpIHtcclxuICAgICAgICAvLyBJZiBzaHVmZmxlIGlzIGRpc2FibGVkLCBkZXN0cm95ZWQsIGRvbid0IGRvIGFueXRoaW5nXHJcbiAgICAgICAgaWYgKCF0aGlzLmlzRW5hYmxlZCB8fCB0aGlzLmlzRGVzdHJveWVkKSB7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnVwZGF0ZSgpO1xyXG4gICAgICB9XHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBSZXR1cm5zIHN0eWxlcyB3aGljaCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIGFuIGl0ZW0gZm9yIGEgdHJhbnNpdGlvbi5cclxuICAgICAgICogQHBhcmFtIHtTaHVmZmxlSXRlbX0gaXRlbSBJdGVtIHRvIGdldCBzdHlsZXMgZm9yLiBTaG91bGQgaGF2ZSB1cGRhdGVkXHJcbiAgICAgICAqICAgc2NhbGUgYW5kIHBvaW50IHByb3BlcnRpZXMuXHJcbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzdHlsZU9iamVjdCBFeHRyYSBzdHlsZXMgdGhhdCB3aWxsIGJlIHVzZWQgaW4gdGhlIHRyYW5zaXRpb24uXHJcbiAgICAgICAqIEByZXR1cm4geyFPYmplY3R9IFRyYW5zZm9ybXMgZm9yIHRyYW5zaXRpb25zLCBsZWZ0L3RvcCBmb3IgYW5pbWF0ZS5cclxuICAgICAgICogQHByb3RlY3RlZFxyXG4gICAgICAgKi9cclxuXHJcbiAgICB9LCB7XHJcbiAgICAgIGtleTogXCJnZXRTdHlsZXNGb3JUcmFuc2l0aW9uXCIsXHJcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRTdHlsZXNGb3JUcmFuc2l0aW9uKGl0ZW0sIHN0eWxlT2JqZWN0KSB7XHJcbiAgICAgICAgLy8gQ2xvbmUgdGhlIG9iamVjdCB0byBhdm9pZCBtdXRhdGluZyB0aGUgb3JpZ2luYWwuXHJcbiAgICAgICAgdmFyIHN0eWxlcyA9IE9iamVjdC5hc3NpZ24oe30sIHN0eWxlT2JqZWN0KTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy51c2VUcmFuc2Zvcm1zKSB7XHJcbiAgICAgICAgICB2YXIgeCA9IHRoaXMub3B0aW9ucy5yb3VuZFRyYW5zZm9ybXMgPyBNYXRoLnJvdW5kKGl0ZW0ucG9pbnQueCkgOiBpdGVtLnBvaW50Lng7XHJcbiAgICAgICAgICB2YXIgeSA9IHRoaXMub3B0aW9ucy5yb3VuZFRyYW5zZm9ybXMgPyBNYXRoLnJvdW5kKGl0ZW0ucG9pbnQueSkgOiBpdGVtLnBvaW50Lnk7XHJcbiAgICAgICAgICBzdHlsZXMudHJhbnNmb3JtID0gXCJ0cmFuc2xhdGUoXCIuY29uY2F0KHgsIFwicHgsIFwiKS5jb25jYXQoeSwgXCJweCkgc2NhbGUoXCIpLmNvbmNhdChpdGVtLnNjYWxlLCBcIilcIik7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHN0eWxlcy5sZWZ0ID0gaXRlbS5wb2ludC54ICsgJ3B4JztcclxuICAgICAgICAgIHN0eWxlcy50b3AgPSBpdGVtLnBvaW50LnkgKyAncHgnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHN0eWxlcztcclxuICAgICAgfVxyXG4gICAgICAvKipcclxuICAgICAgICogTGlzdGVuIGZvciB0aGUgdHJhbnNpdGlvbiBlbmQgb24gYW4gZWxlbWVudCBhbmQgZXhlY3V0ZSB0aGUgaXRlbUNhbGxiYWNrXHJcbiAgICAgICAqIHdoZW4gaXQgZmluaXNoZXMuXHJcbiAgICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBFbGVtZW50IHRvIGxpc3RlbiBvbi5cclxuICAgICAgICogQHBhcmFtIHtmdW5jdGlvbn0gaXRlbUNhbGxiYWNrIENhbGxiYWNrIGZvciB0aGUgaXRlbS5cclxuICAgICAgICogQHBhcmFtIHtmdW5jdGlvbn0gZG9uZSBDYWxsYmFjayB0byBub3RpZnkgYHBhcmFsbGVsYCB0aGF0IHRoaXMgb25lIGlzIGRvbmUuXHJcbiAgICAgICAqL1xyXG5cclxuICAgIH0sIHtcclxuICAgICAga2V5OiBcIl93aGVuVHJhbnNpdGlvbkRvbmVcIixcclxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF93aGVuVHJhbnNpdGlvbkRvbmUoZWxlbWVudCwgaXRlbUNhbGxiYWNrLCBkb25lKSB7XHJcbiAgICAgICAgdmFyIGlkID0gb25UcmFuc2l0aW9uRW5kKGVsZW1lbnQsIGZ1bmN0aW9uIChldnQpIHtcclxuICAgICAgICAgIGl0ZW1DYWxsYmFjaygpO1xyXG4gICAgICAgICAgZG9uZShudWxsLCBldnQpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLl90cmFuc2l0aW9ucy5wdXNoKGlkKTtcclxuICAgICAgfVxyXG4gICAgICAvKipcclxuICAgICAgICogUmV0dXJuIGEgZnVuY3Rpb24gd2hpY2ggd2lsbCBzZXQgQ1NTIHN0eWxlcyBhbmQgY2FsbCB0aGUgYGRvbmVgIGZ1bmN0aW9uXHJcbiAgICAgICAqIHdoZW4gKGlmKSB0aGUgdHJhbnNpdGlvbiBmaW5pc2hlcy5cclxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgVHJhbnNpdGlvbiBvYmplY3QuXHJcbiAgICAgICAqIEByZXR1cm4ge2Z1bmN0aW9ufSBBIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCB3aXRoIGEgYGRvbmVgIGZ1bmN0aW9uLlxyXG4gICAgICAgKi9cclxuXHJcbiAgICB9LCB7XHJcbiAgICAgIGtleTogXCJfZ2V0VHJhbnNpdGlvbkZ1bmN0aW9uXCIsXHJcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0VHJhbnNpdGlvbkZ1bmN0aW9uKG9wdHMpIHtcclxuICAgICAgICB2YXIgX3RoaXM3ID0gdGhpcztcclxuXHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChkb25lKSB7XHJcbiAgICAgICAgICBvcHRzLml0ZW0uYXBwbHlDc3Mob3B0cy5zdHlsZXMpO1xyXG5cclxuICAgICAgICAgIF90aGlzNy5fd2hlblRyYW5zaXRpb25Eb25lKG9wdHMuaXRlbS5lbGVtZW50LCBvcHRzLmNhbGxiYWNrLCBkb25lKTtcclxuICAgICAgICB9O1xyXG4gICAgICB9XHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBFeGVjdXRlIHRoZSBzdHlsZXMgZ2F0aGVyZWQgaW4gdGhlIHN0eWxlIHF1ZXVlLiBUaGlzIGFwcGxpZXMgc3R5bGVzIHRvIGVsZW1lbnRzLFxyXG4gICAgICAgKiB0cmlnZ2VyaW5nIHRyYW5zaXRpb25zLlxyXG4gICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgKi9cclxuXHJcbiAgICB9LCB7XHJcbiAgICAgIGtleTogXCJfcHJvY2Vzc1F1ZXVlXCIsXHJcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfcHJvY2Vzc1F1ZXVlKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmlzVHJhbnNpdGlvbmluZykge1xyXG4gICAgICAgICAgdGhpcy5fY2FuY2VsTW92ZW1lbnQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBoYXNTcGVlZCA9IHRoaXMub3B0aW9ucy5zcGVlZCA+IDA7XHJcbiAgICAgICAgdmFyIGhhc1F1ZXVlID0gdGhpcy5fcXVldWUubGVuZ3RoID4gMDtcclxuXHJcbiAgICAgICAgaWYgKGhhc1F1ZXVlICYmIGhhc1NwZWVkICYmIHRoaXMuaXNJbml0aWFsaXplZCkge1xyXG4gICAgICAgICAgdGhpcy5fc3RhcnRUcmFuc2l0aW9ucyh0aGlzLl9xdWV1ZSk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChoYXNRdWV1ZSkge1xyXG4gICAgICAgICAgdGhpcy5fc3R5bGVJbW1lZGlhdGVseSh0aGlzLl9xdWV1ZSk7XHJcblxyXG4gICAgICAgICAgdGhpcy5fZGlzcGF0Y2goU2h1ZmZsZS5FdmVudFR5cGUuTEFZT1VUKTsgLy8gQSBjYWxsIHRvIGxheW91dCBoYXBwZW5lZCwgYnV0IG5vbmUgb2YgdGhlIG5ld2x5IHZpc2libGUgaXRlbXMgd2lsbFxyXG4gICAgICAgICAgLy8gY2hhbmdlIHBvc2l0aW9uIG9yIHRoZSB0cmFuc2l0aW9uIGR1cmF0aW9uIGlzIHplcm8sIHdoaWNoIHdpbGwgbm90IHRyaWdnZXJcclxuICAgICAgICAgIC8vIHRoZSB0cmFuc2l0aW9uZW5kIGV2ZW50LlxyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdGhpcy5fZGlzcGF0Y2goU2h1ZmZsZS5FdmVudFR5cGUuTEFZT1VUKTtcclxuICAgICAgICB9IC8vIFJlbW92ZSBldmVyeXRoaW5nIGluIHRoZSBzdHlsZSBxdWV1ZVxyXG5cclxuXHJcbiAgICAgICAgdGhpcy5fcXVldWUubGVuZ3RoID0gMDtcclxuICAgICAgfVxyXG4gICAgICAvKipcclxuICAgICAgICogV2FpdCBmb3IgZWFjaCB0cmFuc2l0aW9uIHRvIGZpbmlzaCwgdGhlIGVtaXQgdGhlIGxheW91dCBldmVudC5cclxuICAgICAgICogQHBhcmFtIHtPYmplY3RbXX0gdHJhbnNpdGlvbnMgQXJyYXkgb2YgdHJhbnNpdGlvbiBvYmplY3RzLlxyXG4gICAgICAgKi9cclxuXHJcbiAgICB9LCB7XHJcbiAgICAgIGtleTogXCJfc3RhcnRUcmFuc2l0aW9uc1wiLFxyXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX3N0YXJ0VHJhbnNpdGlvbnModHJhbnNpdGlvbnMpIHtcclxuICAgICAgICB2YXIgX3RoaXM4ID0gdGhpcztcclxuXHJcbiAgICAgICAgLy8gU2V0IGZsYWcgdGhhdCBzaHVmZmxlIGlzIGN1cnJlbnRseSBpbiBtb3Rpb24uXHJcbiAgICAgICAgdGhpcy5pc1RyYW5zaXRpb25pbmcgPSB0cnVlOyAvLyBDcmVhdGUgYW4gYXJyYXkgb2YgZnVuY3Rpb25zIHRvIGJlIGNhbGxlZC5cclxuXHJcbiAgICAgICAgdmFyIGNhbGxiYWNrcyA9IHRyYW5zaXRpb25zLm1hcChmdW5jdGlvbiAob2JqKSB7XHJcbiAgICAgICAgICByZXR1cm4gX3RoaXM4Ll9nZXRUcmFuc2l0aW9uRnVuY3Rpb24ob2JqKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBhcnJheVBhcmFsbGVsKGNhbGxiYWNrcywgdGhpcy5fbW92ZW1lbnRGaW5pc2hlZC5iaW5kKHRoaXMpKTtcclxuICAgICAgfVxyXG4gICAgfSwge1xyXG4gICAgICBrZXk6IFwiX2NhbmNlbE1vdmVtZW50XCIsXHJcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfY2FuY2VsTW92ZW1lbnQoKSB7XHJcbiAgICAgICAgLy8gUmVtb3ZlIHRoZSB0cmFuc2l0aW9uIGVuZCBldmVudCBmb3IgZWFjaCBsaXN0ZW5lci5cclxuICAgICAgICB0aGlzLl90cmFuc2l0aW9ucy5mb3JFYWNoKGNhbmNlbFRyYW5zaXRpb25FbmQpOyAvLyBSZXNldCB0aGUgYXJyYXkuXHJcblxyXG5cclxuICAgICAgICB0aGlzLl90cmFuc2l0aW9ucy5sZW5ndGggPSAwOyAvLyBTaG93IGl0J3Mgbm8gbG9uZ2VyIGFjdGl2ZS5cclxuXHJcbiAgICAgICAgdGhpcy5pc1RyYW5zaXRpb25pbmcgPSBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgICAvKipcclxuICAgICAgICogQXBwbHkgc3R5bGVzIHdpdGhvdXQgYSB0cmFuc2l0aW9uLlxyXG4gICAgICAgKiBAcGFyYW0ge09iamVjdFtdfSBvYmplY3RzIEFycmF5IG9mIHRyYW5zaXRpb24gb2JqZWN0cy5cclxuICAgICAgICogQHByaXZhdGVcclxuICAgICAgICovXHJcblxyXG4gICAgfSwge1xyXG4gICAgICBrZXk6IFwiX3N0eWxlSW1tZWRpYXRlbHlcIixcclxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9zdHlsZUltbWVkaWF0ZWx5KG9iamVjdHMpIHtcclxuICAgICAgICBpZiAob2JqZWN0cy5sZW5ndGgpIHtcclxuICAgICAgICAgIHZhciBlbGVtZW50cyA9IG9iamVjdHMubWFwKGZ1bmN0aW9uIChvYmopIHtcclxuICAgICAgICAgICAgcmV0dXJuIG9iai5pdGVtLmVsZW1lbnQ7XHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICBTaHVmZmxlLl9za2lwVHJhbnNpdGlvbnMoZWxlbWVudHMsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgb2JqZWN0cy5mb3JFYWNoKGZ1bmN0aW9uIChvYmopIHtcclxuICAgICAgICAgICAgICBvYmouaXRlbS5hcHBseUNzcyhvYmouc3R5bGVzKTtcclxuICAgICAgICAgICAgICBvYmouY2FsbGJhY2soKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0sIHtcclxuICAgICAga2V5OiBcIl9tb3ZlbWVudEZpbmlzaGVkXCIsXHJcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfbW92ZW1lbnRGaW5pc2hlZCgpIHtcclxuICAgICAgICB0aGlzLl90cmFuc2l0aW9ucy5sZW5ndGggPSAwO1xyXG4gICAgICAgIHRoaXMuaXNUcmFuc2l0aW9uaW5nID0gZmFsc2U7XHJcblxyXG4gICAgICAgIHRoaXMuX2Rpc3BhdGNoKFNodWZmbGUuRXZlbnRUeXBlLkxBWU9VVCk7XHJcbiAgICAgIH1cclxuICAgICAgLyoqXHJcbiAgICAgICAqIFRoZSBtYWdpYy4gVGhpcyBpcyB3aGF0IG1ha2VzIHRoZSBwbHVnaW4gJ3NodWZmbGUnXHJcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfGZ1bmN0aW9uKEVsZW1lbnQpOmJvb2xlYW59IFtjYXRlZ29yeV0gQ2F0ZWdvcnkgdG8gZmlsdGVyIGJ5LlxyXG4gICAgICAgKiAgICAgQ2FuIGJlIGEgZnVuY3Rpb24sIHN0cmluZywgb3IgYXJyYXkgb2Ygc3RyaW5ncy5cclxuICAgICAgICogQHBhcmFtIHtTb3J0T3B0aW9uc30gW3NvcnRPcHRpb25zXSBBIHNvcnQgb2JqZWN0IHdoaWNoIGNhbiBzb3J0IHRoZSB2aXNpYmxlIHNldFxyXG4gICAgICAgKi9cclxuXHJcbiAgICB9LCB7XHJcbiAgICAgIGtleTogXCJmaWx0ZXJcIixcclxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGZpbHRlcihjYXRlZ29yeSwgc29ydE9wdGlvbnMpIHtcclxuICAgICAgICBpZiAoIXRoaXMuaXNFbmFibGVkKSB7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIWNhdGVnb3J5IHx8IGNhdGVnb3J5ICYmIGNhdGVnb3J5Lmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgY2F0ZWdvcnkgPSBTaHVmZmxlLkFMTF9JVEVNUzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wYXJhbS1yZWFzc2lnblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fZmlsdGVyKGNhdGVnb3J5KTsgLy8gU2hyaW5rIGVhY2ggaGlkZGVuIGl0ZW1cclxuXHJcblxyXG4gICAgICAgIHRoaXMuX3NocmluaygpOyAvLyBIb3cgbWFueSB2aXNpYmxlIGVsZW1lbnRzP1xyXG5cclxuXHJcbiAgICAgICAgdGhpcy5fdXBkYXRlSXRlbUNvdW50KCk7IC8vIFVwZGF0ZSB0cmFuc2Zvcm1zIG9uIHZpc2libGUgZWxlbWVudHMgc28gdGhleSB3aWxsIGFuaW1hdGUgdG8gdGhlaXIgbmV3IHBvc2l0aW9ucy5cclxuXHJcblxyXG4gICAgICAgIHRoaXMuc29ydChzb3J0T3B0aW9ucyk7XHJcbiAgICAgIH1cclxuICAgICAgLyoqXHJcbiAgICAgICAqIEdldHMgdGhlIHZpc2libGUgZWxlbWVudHMsIHNvcnRzIHRoZW0sIGFuZCBwYXNzZXMgdGhlbSB0byBsYXlvdXQuXHJcbiAgICAgICAqIEBwYXJhbSB7U29ydE9wdGlvbnN9IFtzb3J0T3B0aW9uc10gVGhlIG9wdGlvbnMgb2JqZWN0IHRvIHBhc3MgdG8gYHNvcnRlcmAuXHJcbiAgICAgICAqL1xyXG5cclxuICAgIH0sIHtcclxuICAgICAga2V5OiBcInNvcnRcIixcclxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNvcnQoKSB7XHJcbiAgICAgICAgdmFyIHNvcnRPcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB0aGlzLmxhc3RTb3J0O1xyXG5cclxuICAgICAgICBpZiAoIXRoaXMuaXNFbmFibGVkKSB7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9yZXNldENvbHMoKTtcclxuXHJcbiAgICAgICAgdmFyIGl0ZW1zID0gc29ydGVyKHRoaXMuX2dldEZpbHRlcmVkSXRlbXMoKSwgc29ydE9wdGlvbnMpO1xyXG5cclxuICAgICAgICB0aGlzLl9sYXlvdXQoaXRlbXMpOyAvLyBgX2xheW91dGAgYWx3YXlzIGhhcHBlbnMgYWZ0ZXIgYF9zaHJpbmtgLCBzbyBpdCdzIHNhZmUgdG8gcHJvY2VzcyB0aGUgc3R5bGVcclxuICAgICAgICAvLyBxdWV1ZSBoZXJlIHdpdGggc3R5bGVzIGZyb20gdGhlIHNocmluayBtZXRob2QuXHJcblxyXG5cclxuICAgICAgICB0aGlzLl9wcm9jZXNzUXVldWUoKTsgLy8gQWRqdXN0IHRoZSBoZWlnaHQgb2YgdGhlIGNvbnRhaW5lci5cclxuXHJcblxyXG4gICAgICAgIHRoaXMuX3NldENvbnRhaW5lclNpemUoKTtcclxuXHJcbiAgICAgICAgdGhpcy5sYXN0U29ydCA9IHNvcnRPcHRpb25zO1xyXG4gICAgICB9XHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBSZXBvc2l0aW9uIGV2ZXJ5dGhpbmcuXHJcbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzT25seUxheW91dD1mYWxzZV0gSWYgdHJ1ZSwgY29sdW1uIGFuZCBndXR0ZXIgd2lkdGhzIHdvbid0IGJlIHJlY2FsY3VsYXRlZC5cclxuICAgICAgICovXHJcblxyXG4gICAgfSwge1xyXG4gICAgICBrZXk6IFwidXBkYXRlXCIsXHJcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGUoKSB7XHJcbiAgICAgICAgdmFyIGlzT25seUxheW91dCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZmFsc2U7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmlzRW5hYmxlZCkge1xyXG4gICAgICAgICAgaWYgKCFpc09ubHlMYXlvdXQpIHtcclxuICAgICAgICAgICAgLy8gR2V0IHVwZGF0ZWQgY29sQ291bnRcclxuICAgICAgICAgICAgdGhpcy5fc2V0Q29sdW1ucygpO1xyXG4gICAgICAgICAgfSAvLyBMYXlvdXQgaXRlbXNcclxuXHJcblxyXG4gICAgICAgICAgdGhpcy5zb3J0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBVc2UgdGhpcyBpbnN0ZWFkIG9mIGB1cGRhdGUoKWAgaWYgeW91IGRvbid0IG5lZWQgdGhlIGNvbHVtbnMgYW5kIGd1dHRlcnMgdXBkYXRlZFxyXG4gICAgICAgKiBNYXliZSBhbiBpbWFnZSBpbnNpZGUgYHNodWZmbGVgIGxvYWRlZCAoYW5kIG5vdyBoYXMgYSBoZWlnaHQpLCB3aGljaCBtZWFucyBjYWxjdWxhdGlvbnNcclxuICAgICAgICogY291bGQgYmUgb2ZmLlxyXG4gICAgICAgKi9cclxuXHJcbiAgICB9LCB7XHJcbiAgICAgIGtleTogXCJsYXlvdXRcIixcclxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGxheW91dCgpIHtcclxuICAgICAgICB0aGlzLnVwZGF0ZSh0cnVlKTtcclxuICAgICAgfVxyXG4gICAgICAvKipcclxuICAgICAgICogTmV3IGl0ZW1zIGhhdmUgYmVlbiBhcHBlbmRlZCB0byBzaHVmZmxlLiBNaXggdGhlbSBpbiB3aXRoIHRoZSBjdXJyZW50XHJcbiAgICAgICAqIGZpbHRlciBvciBzb3J0IHN0YXR1cy5cclxuICAgICAgICogQHBhcmFtIHtFbGVtZW50W119IG5ld0l0ZW1zIENvbGxlY3Rpb24gb2YgbmV3IGl0ZW1zLlxyXG4gICAgICAgKi9cclxuXHJcbiAgICB9LCB7XHJcbiAgICAgIGtleTogXCJhZGRcIixcclxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFkZChuZXdJdGVtcykge1xyXG4gICAgICAgIHZhciBfdGhpczkgPSB0aGlzO1xyXG5cclxuICAgICAgICB2YXIgaXRlbXMgPSBhcnJheVVuaXF1ZShuZXdJdGVtcykubWFwKGZ1bmN0aW9uIChlbCkge1xyXG4gICAgICAgICAgcmV0dXJuIG5ldyBTaHVmZmxlSXRlbShlbCk7XHJcbiAgICAgICAgfSk7IC8vIEFkZCBjbGFzc2VzIGFuZCBzZXQgaW5pdGlhbCBwb3NpdGlvbnMuXHJcblxyXG4gICAgICAgIHRoaXMuX2luaXRJdGVtcyhpdGVtcyk7IC8vIERldGVybWluZSB3aGljaCBpdGVtcyB3aWxsIGdvIHdpdGggdGhlIGN1cnJlbnQgZmlsdGVyLlxyXG5cclxuXHJcbiAgICAgICAgdGhpcy5fcmVzZXRDb2xzKCk7XHJcblxyXG4gICAgICAgIHZhciBhbGxJdGVtcyA9IHRoaXMuX21lcmdlTmV3SXRlbXMoaXRlbXMpO1xyXG5cclxuICAgICAgICB2YXIgc29ydGVkSXRlbXMgPSBzb3J0ZXIoYWxsSXRlbXMsIHRoaXMubGFzdFNvcnQpO1xyXG5cclxuICAgICAgICB2YXIgYWxsU29ydGVkSXRlbXNTZXQgPSB0aGlzLl9maWx0ZXIodGhpcy5sYXN0RmlsdGVyLCBzb3J0ZWRJdGVtcyk7XHJcblxyXG4gICAgICAgIHZhciBpc05ld0l0ZW0gPSBmdW5jdGlvbiBpc05ld0l0ZW0oaXRlbSkge1xyXG4gICAgICAgICAgcmV0dXJuIGl0ZW1zLmluY2x1ZGVzKGl0ZW0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBhcHBseUhpZGRlblN0YXRlID0gZnVuY3Rpb24gYXBwbHlIaWRkZW5TdGF0ZShpdGVtKSB7XHJcbiAgICAgICAgICBpdGVtLnNjYWxlID0gU2h1ZmZsZUl0ZW0uU2NhbGUuSElEREVOO1xyXG4gICAgICAgICAgaXRlbS5pc0hpZGRlbiA9IHRydWU7XHJcbiAgICAgICAgICBpdGVtLmFwcGx5Q3NzKFNodWZmbGVJdGVtLkNzcy5ISURERU4uYmVmb3JlKTtcclxuICAgICAgICAgIGl0ZW0uYXBwbHlDc3MoU2h1ZmZsZUl0ZW0uQ3NzLkhJRERFTi5hZnRlcik7XHJcbiAgICAgICAgfTsgLy8gTGF5b3V0IGFsbCBpdGVtcyBhZ2FpbiBzbyB0aGF0IG5ldyBpdGVtcyBnZXQgcG9zaXRpb25zLlxyXG4gICAgICAgIC8vIFN5bmNob25vdXNseSBhcHBseSBwb3NpdGlvbnMuXHJcblxyXG5cclxuICAgICAgICB2YXIgaXRlbVBvc2l0aW9ucyA9IHRoaXMuX2dldE5leHRQb3NpdGlvbnMoYWxsU29ydGVkSXRlbXNTZXQudmlzaWJsZSk7XHJcblxyXG4gICAgICAgIGFsbFNvcnRlZEl0ZW1zU2V0LnZpc2libGUuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSwgaSkge1xyXG4gICAgICAgICAgaWYgKGlzTmV3SXRlbShpdGVtKSkge1xyXG4gICAgICAgICAgICBpdGVtLnBvaW50ID0gaXRlbVBvc2l0aW9uc1tpXTtcclxuICAgICAgICAgICAgYXBwbHlIaWRkZW5TdGF0ZShpdGVtKTtcclxuICAgICAgICAgICAgaXRlbS5hcHBseUNzcyhfdGhpczkuZ2V0U3R5bGVzRm9yVHJhbnNpdGlvbihpdGVtLCB7fSkpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGFsbFNvcnRlZEl0ZW1zU2V0LmhpZGRlbi5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgICBpZiAoaXNOZXdJdGVtKGl0ZW0pKSB7XHJcbiAgICAgICAgICAgIGFwcGx5SGlkZGVuU3RhdGUoaXRlbSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7IC8vIENhdXNlIGxheW91dCBzbyB0aGF0IHRoZSBzdHlsZXMgYWJvdmUgYXJlIGFwcGxpZWQuXHJcblxyXG4gICAgICAgIHRoaXMuZWxlbWVudC5vZmZzZXRXaWR0aDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtZXhwcmVzc2lvbnNcclxuICAgICAgICAvLyBBZGQgdHJhbnNpdGlvbiB0byBlYWNoIGl0ZW0uXHJcblxyXG4gICAgICAgIHRoaXMuc2V0SXRlbVRyYW5zaXRpb25zKGl0ZW1zKTsgLy8gVXBkYXRlIHRoZSBsaXN0IG9mIGl0ZW1zLlxyXG5cclxuICAgICAgICB0aGlzLml0ZW1zID0gdGhpcy5fbWVyZ2VOZXdJdGVtcyhpdGVtcyk7IC8vIFVwZGF0ZSBsYXlvdXQvdmlzaWJpbGl0eSBvZiBuZXcgYW5kIG9sZCBpdGVtcy5cclxuXHJcbiAgICAgICAgdGhpcy5maWx0ZXIodGhpcy5sYXN0RmlsdGVyKTtcclxuICAgICAgfVxyXG4gICAgICAvKipcclxuICAgICAgICogRGlzYWJsZXMgc2h1ZmZsZSBmcm9tIHVwZGF0aW5nIGRpbWVuc2lvbnMgYW5kIGxheW91dCBvbiByZXNpemVcclxuICAgICAgICovXHJcblxyXG4gICAgfSwge1xyXG4gICAgICBrZXk6IFwiZGlzYWJsZVwiLFxyXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZGlzYWJsZSgpIHtcclxuICAgICAgICB0aGlzLmlzRW5hYmxlZCA9IGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBFbmFibGVzIHNodWZmbGUgYWdhaW5cclxuICAgICAgICogQHBhcmFtIHtib29sZWFufSBbaXNVcGRhdGVMYXlvdXQ9dHJ1ZV0gaWYgdW5kZWZpbmVkLCBzaHVmZmxlIHdpbGwgdXBkYXRlIGNvbHVtbnMgYW5kIGd1dHRlcnNcclxuICAgICAgICovXHJcblxyXG4gICAgfSwge1xyXG4gICAgICBrZXk6IFwiZW5hYmxlXCIsXHJcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBlbmFibGUoKSB7XHJcbiAgICAgICAgdmFyIGlzVXBkYXRlTGF5b3V0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB0cnVlO1xyXG4gICAgICAgIHRoaXMuaXNFbmFibGVkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgaWYgKGlzVXBkYXRlTGF5b3V0KSB7XHJcbiAgICAgICAgICB0aGlzLnVwZGF0ZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICAvKipcclxuICAgICAgICogUmVtb3ZlIDEgb3IgbW9yZSBzaHVmZmxlIGl0ZW1zLlxyXG4gICAgICAgKiBAcGFyYW0ge0VsZW1lbnRbXX0gZWxlbWVudHMgQW4gYXJyYXkgY29udGFpbmluZyBvbmUgb3IgbW9yZVxyXG4gICAgICAgKiAgICAgZWxlbWVudHMgaW4gc2h1ZmZsZVxyXG4gICAgICAgKiBAcmV0dXJuIHtTaHVmZmxlfSBUaGUgc2h1ZmZsZSBpbnN0YW5jZS5cclxuICAgICAgICovXHJcblxyXG4gICAgfSwge1xyXG4gICAgICBrZXk6IFwicmVtb3ZlXCIsXHJcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmUoZWxlbWVudHMpIHtcclxuICAgICAgICB2YXIgX3RoaXMxMCA9IHRoaXM7XHJcblxyXG4gICAgICAgIGlmICghZWxlbWVudHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgY29sbGVjdGlvbiA9IGFycmF5VW5pcXVlKGVsZW1lbnRzKTtcclxuICAgICAgICB2YXIgb2xkSXRlbXMgPSBjb2xsZWN0aW9uLm1hcChmdW5jdGlvbiAoZWxlbWVudCkge1xyXG4gICAgICAgICAgcmV0dXJuIF90aGlzMTAuZ2V0SXRlbUJ5RWxlbWVudChlbGVtZW50KTtcclxuICAgICAgICB9KS5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICAgIHJldHVybiAhIWl0ZW07XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHZhciBoYW5kbGVMYXlvdXQgPSBmdW5jdGlvbiBoYW5kbGVMYXlvdXQoKSB7XHJcbiAgICAgICAgICBfdGhpczEwLl9kaXNwb3NlSXRlbXMob2xkSXRlbXMpOyAvLyBSZW1vdmUgdGhlIGNvbGxlY3Rpb24gaW4gdGhlIGNhbGxiYWNrXHJcblxyXG5cclxuICAgICAgICAgIGNvbGxlY3Rpb24uZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkge1xyXG4gICAgICAgICAgICBlbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWxlbWVudCk7XHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICBfdGhpczEwLl9kaXNwYXRjaChTaHVmZmxlLkV2ZW50VHlwZS5SRU1PVkVELCB7XHJcbiAgICAgICAgICAgIGNvbGxlY3Rpb246IGNvbGxlY3Rpb25cclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07IC8vIEhpZGUgY29sbGVjdGlvbiBmaXJzdC5cclxuXHJcblxyXG4gICAgICAgIHRoaXMuX3RvZ2dsZUZpbHRlckNsYXNzZXMoe1xyXG4gICAgICAgICAgdmlzaWJsZTogW10sXHJcbiAgICAgICAgICBoaWRkZW46IG9sZEl0ZW1zXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuX3NocmluayhvbGRJdGVtcyk7XHJcblxyXG4gICAgICAgIHRoaXMuc29ydCgpOyAvLyBVcGRhdGUgdGhlIGxpc3Qgb2YgaXRlbXMgaGVyZSBiZWNhdXNlIGByZW1vdmVgIGNvdWxkIGJlIGNhbGxlZCBhZ2FpblxyXG4gICAgICAgIC8vIHdpdGggYW4gaXRlbSB0aGF0IGlzIGluIHRoZSBwcm9jZXNzIG9mIGJlaW5nIHJlbW92ZWQuXHJcblxyXG4gICAgICAgIHRoaXMuaXRlbXMgPSB0aGlzLml0ZW1zLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgICAgcmV0dXJuICFvbGRJdGVtcy5pbmNsdWRlcyhpdGVtKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5fdXBkYXRlSXRlbUNvdW50KCk7XHJcblxyXG4gICAgICAgIHRoaXMub25jZShTaHVmZmxlLkV2ZW50VHlwZS5MQVlPVVQsIGhhbmRsZUxheW91dCk7XHJcbiAgICAgIH1cclxuICAgICAgLyoqXHJcbiAgICAgICAqIFJldHJpZXZlIGEgc2h1ZmZsZSBpdGVtIGJ5IGl0cyBlbGVtZW50LlxyXG4gICAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgRWxlbWVudCB0byBsb29rIGZvci5cclxuICAgICAgICogQHJldHVybiB7P1NodWZmbGVJdGVtfSBBIHNodWZmbGUgaXRlbSBvciB1bmRlZmluZWQgaWYgaXQncyBub3QgZm91bmQuXHJcbiAgICAgICAqL1xyXG5cclxuICAgIH0sIHtcclxuICAgICAga2V5OiBcImdldEl0ZW1CeUVsZW1lbnRcIixcclxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldEl0ZW1CeUVsZW1lbnQoZWxlbWVudCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLml0ZW1zLmZpbmQoZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICAgIHJldHVybiBpdGVtLmVsZW1lbnQgPT09IGVsZW1lbnQ7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgICAgLyoqXHJcbiAgICAgICAqIER1bXAgdGhlIGVsZW1lbnRzIGN1cnJlbnRseSBzdG9yZWQgYW5kIHJlaW5pdGlhbGl6ZSBhbGwgY2hpbGQgZWxlbWVudHMgd2hpY2hcclxuICAgICAgICogbWF0Y2ggdGhlIGBpdGVtU2VsZWN0b3JgLlxyXG4gICAgICAgKi9cclxuXHJcbiAgICB9LCB7XHJcbiAgICAgIGtleTogXCJyZXNldEl0ZW1zXCIsXHJcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiByZXNldEl0ZW1zKCkge1xyXG4gICAgICAgIHZhciBfdGhpczExID0gdGhpcztcclxuXHJcbiAgICAgICAgLy8gUmVtb3ZlIHJlZnMgdG8gY3VycmVudCBpdGVtcy5cclxuICAgICAgICB0aGlzLl9kaXNwb3NlSXRlbXModGhpcy5pdGVtcyk7XHJcblxyXG4gICAgICAgIHRoaXMuaXNJbml0aWFsaXplZCA9IGZhbHNlOyAvLyBGaW5kIG5ldyBpdGVtcyBpbiB0aGUgRE9NLlxyXG5cclxuICAgICAgICB0aGlzLml0ZW1zID0gdGhpcy5fZ2V0SXRlbXMoKTsgLy8gU2V0IGluaXRpYWwgc3R5bGVzIG9uIHRoZSBuZXcgaXRlbXMuXHJcblxyXG4gICAgICAgIHRoaXMuX2luaXRJdGVtcyh0aGlzLml0ZW1zKTtcclxuXHJcbiAgICAgICAgdGhpcy5vbmNlKFNodWZmbGUuRXZlbnRUeXBlLkxBWU9VVCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgLy8gQWRkIHRyYW5zaXRpb24gdG8gZWFjaCBpdGVtLlxyXG4gICAgICAgICAgX3RoaXMxMS5zZXRJdGVtVHJhbnNpdGlvbnMoX3RoaXMxMS5pdGVtcyk7XHJcblxyXG4gICAgICAgICAgX3RoaXMxMS5pc0luaXRpYWxpemVkID0gdHJ1ZTtcclxuICAgICAgICB9KTsgLy8gTGF5IG91dCBhbGwgaXRlbXMuXHJcblxyXG4gICAgICAgIHRoaXMuZmlsdGVyKHRoaXMubGFzdEZpbHRlcik7XHJcbiAgICAgIH1cclxuICAgICAgLyoqXHJcbiAgICAgICAqIERlc3Ryb3lzIHNodWZmbGUsIHJlbW92ZXMgZXZlbnRzLCBzdHlsZXMsIGFuZCBjbGFzc2VzXHJcbiAgICAgICAqL1xyXG5cclxuICAgIH0sIHtcclxuICAgICAga2V5OiBcImRlc3Ryb3lcIixcclxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XHJcbiAgICAgICAgdGhpcy5fY2FuY2VsTW92ZW1lbnQoKTtcclxuXHJcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuX29uUmVzaXplKTsgLy8gUmVzZXQgY29udGFpbmVyIHN0eWxlc1xyXG5cclxuICAgICAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnc2h1ZmZsZScpO1xyXG4gICAgICAgIHRoaXMuZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ3N0eWxlJyk7IC8vIFJlc2V0IGluZGl2aWR1YWwgaXRlbSBzdHlsZXNcclxuXHJcbiAgICAgICAgdGhpcy5fZGlzcG9zZUl0ZW1zKHRoaXMuaXRlbXMpO1xyXG5cclxuICAgICAgICB0aGlzLml0ZW1zLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgdGhpcy5fdHJhbnNpdGlvbnMubGVuZ3RoID0gMDsgLy8gTnVsbCBET00gcmVmZXJlbmNlc1xyXG5cclxuICAgICAgICB0aGlzLm9wdGlvbnMuc2l6ZXIgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuZWxlbWVudCA9IG51bGw7IC8vIFNldCBhIGZsYWcgc28gaWYgYSBkZWJvdW5jZWQgcmVzaXplIGhhcyBiZWVuIHRyaWdnZXJlZCxcclxuICAgICAgICAvLyBpdCBjYW4gZmlyc3QgY2hlY2sgaWYgaXQgaXMgYWN0dWFsbHkgaXNEZXN0cm95ZWQgYW5kIG5vdCBkb2luZyBhbnl0aGluZ1xyXG5cclxuICAgICAgICB0aGlzLmlzRGVzdHJveWVkID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmlzRW5hYmxlZCA9IGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBSZXR1cm5zIHRoZSBvdXRlciB3aWR0aCBvZiBhbiBlbGVtZW50LCBvcHRpb25hbGx5IGluY2x1ZGluZyBpdHMgbWFyZ2lucy5cclxuICAgICAgICpcclxuICAgICAgICogVGhlcmUgYXJlIGEgZmV3IGRpZmZlcmVudCBtZXRob2RzIGZvciBnZXR0aW5nIHRoZSB3aWR0aCBvZiBhbiBlbGVtZW50LCBub25lIG9mXHJcbiAgICAgICAqIHdoaWNoIHdvcmsgcGVyZmVjdGx5IGZvciBhbGwgU2h1ZmZsZSdzIHVzZSBjYXNlcy5cclxuICAgICAgICpcclxuICAgICAgICogMS4gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkgYGxlZnRgIGFuZCBgcmlnaHRgIHByb3BlcnRpZXMuXHJcbiAgICAgICAqICAgLSBBY2NvdW50cyBmb3IgdHJhbnNmb3JtIHNjYWxlZCBlbGVtZW50cywgbWFraW5nIGl0IHVzZWxlc3MgZm9yIFNodWZmbGVcclxuICAgICAgICogICBlbGVtZW50cyB3aGljaCBoYXZlIHNocnVuay5cclxuICAgICAgICogMi4gVGhlIGBvZmZzZXRXaWR0aGAgcHJvcGVydHkuXHJcbiAgICAgICAqICAgLSBUaGlzIHZhbHVlIHN0YXlzIHRoZSBzYW1lIHJlZ2FyZGxlc3Mgb2YgdGhlIGVsZW1lbnRzIHRyYW5zZm9ybSBwcm9wZXJ0eSxcclxuICAgICAgICogICBob3dldmVyLCBpdCBkb2VzIG5vdCByZXR1cm4gc3VicGl4ZWwgdmFsdWVzLlxyXG4gICAgICAgKiAzLiBnZXRDb21wdXRlZFN0eWxlKClcclxuICAgICAgICogICAtIFRoaXMgd29ya3MgZ3JlYXQgQ2hyb21lLCBGaXJlZm94LCBTYWZhcmksIGJ1dCBJRTw9MTEgZG9lcyBub3QgaW5jbHVkZVxyXG4gICAgICAgKiAgIHBhZGRpbmcgYW5kIGJvcmRlciB3aGVuIGJveC1zaXppbmc6IGJvcmRlci1ib3ggaXMgc2V0LCByZXF1aXJpbmcgYSBmZWF0dXJlXHJcbiAgICAgICAqICAgdGVzdCBhbmQgZXh0cmEgd29yayB0byBhZGQgdGhlIHBhZGRpbmcgYmFjayBmb3IgSUUgYW5kIG90aGVyIGJyb3dzZXJzIHdoaWNoXHJcbiAgICAgICAqICAgZm9sbG93IHRoZSBXM0Mgc3BlYyBoZXJlLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgVGhlIGVsZW1lbnQuXHJcbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2luY2x1ZGVNYXJnaW5zPWZhbHNlXSBXaGV0aGVyIHRvIGluY2x1ZGUgbWFyZ2lucy5cclxuICAgICAgICogQHJldHVybiB7e3dpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyfX0gVGhlIHdpZHRoIGFuZCBoZWlnaHQuXHJcbiAgICAgICAqL1xyXG5cclxuICAgIH1dLCBbe1xyXG4gICAgICBrZXk6IFwiZ2V0U2l6ZVwiLFxyXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U2l6ZShlbGVtZW50KSB7XHJcbiAgICAgICAgdmFyIGluY2x1ZGVNYXJnaW5zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmYWxzZTtcclxuICAgICAgICAvLyBTdG9yZSB0aGUgc3R5bGVzIHNvIHRoYXQgdGhleSBjYW4gYmUgdXNlZCBieSBvdGhlcnMgd2l0aG91dCBhc2tpbmcgZm9yIGl0IGFnYWluLlxyXG4gICAgICAgIHZhciBzdHlsZXMgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50LCBudWxsKTtcclxuICAgICAgICB2YXIgd2lkdGggPSBnZXROdW1iZXJTdHlsZShlbGVtZW50LCAnd2lkdGgnLCBzdHlsZXMpO1xyXG4gICAgICAgIHZhciBoZWlnaHQgPSBnZXROdW1iZXJTdHlsZShlbGVtZW50LCAnaGVpZ2h0Jywgc3R5bGVzKTtcclxuXHJcbiAgICAgICAgaWYgKGluY2x1ZGVNYXJnaW5zKSB7XHJcbiAgICAgICAgICB2YXIgbWFyZ2luTGVmdCA9IGdldE51bWJlclN0eWxlKGVsZW1lbnQsICdtYXJnaW5MZWZ0Jywgc3R5bGVzKTtcclxuICAgICAgICAgIHZhciBtYXJnaW5SaWdodCA9IGdldE51bWJlclN0eWxlKGVsZW1lbnQsICdtYXJnaW5SaWdodCcsIHN0eWxlcyk7XHJcbiAgICAgICAgICB2YXIgbWFyZ2luVG9wID0gZ2V0TnVtYmVyU3R5bGUoZWxlbWVudCwgJ21hcmdpblRvcCcsIHN0eWxlcyk7XHJcbiAgICAgICAgICB2YXIgbWFyZ2luQm90dG9tID0gZ2V0TnVtYmVyU3R5bGUoZWxlbWVudCwgJ21hcmdpbkJvdHRvbScsIHN0eWxlcyk7XHJcbiAgICAgICAgICB3aWR0aCArPSBtYXJnaW5MZWZ0ICsgbWFyZ2luUmlnaHQ7XHJcbiAgICAgICAgICBoZWlnaHQgKz0gbWFyZ2luVG9wICsgbWFyZ2luQm90dG9tO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIHdpZHRoOiB3aWR0aCxcclxuICAgICAgICAgIGhlaWdodDogaGVpZ2h0XHJcbiAgICAgICAgfTtcclxuICAgICAgfVxyXG4gICAgICAvKipcclxuICAgICAgICogQ2hhbmdlIGEgcHJvcGVydHkgb3IgZXhlY3V0ZSBhIGZ1bmN0aW9uIHdoaWNoIHdpbGwgbm90IGhhdmUgYSB0cmFuc2l0aW9uXHJcbiAgICAgICAqIEBwYXJhbSB7RWxlbWVudFtdfSBlbGVtZW50cyBET00gZWxlbWVudHMgdGhhdCB3b24ndCBiZSB0cmFuc2l0aW9uZWQuXHJcbiAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIEEgZnVuY3Rpb24gd2hpY2ggd2lsbCBiZSBjYWxsZWQgd2hpbGUgdHJhbnNpdGlvblxyXG4gICAgICAgKiAgICAgaXMgc2V0IHRvIDBtcy5cclxuICAgICAgICogQHByaXZhdGVcclxuICAgICAgICovXHJcblxyXG4gICAgfSwge1xyXG4gICAgICBrZXk6IFwiX3NraXBUcmFuc2l0aW9uc1wiLFxyXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX3NraXBUcmFuc2l0aW9ucyhlbGVtZW50cywgY2FsbGJhY2spIHtcclxuICAgICAgICB2YXIgemVybyA9ICcwbXMnOyAvLyBTYXZlIGN1cnJlbnQgZHVyYXRpb24gYW5kIGRlbGF5LlxyXG5cclxuICAgICAgICB2YXIgZGF0YSA9IGVsZW1lbnRzLm1hcChmdW5jdGlvbiAoZWxlbWVudCkge1xyXG4gICAgICAgICAgdmFyIHN0eWxlID0gZWxlbWVudC5zdHlsZTtcclxuICAgICAgICAgIHZhciBkdXJhdGlvbiA9IHN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbjtcclxuICAgICAgICAgIHZhciBkZWxheSA9IHN0eWxlLnRyYW5zaXRpb25EZWxheTsgLy8gU2V0IHRoZSBkdXJhdGlvbiB0byB6ZXJvIHNvIGl0IGhhcHBlbnMgaW1tZWRpYXRlbHlcclxuXHJcbiAgICAgICAgICBzdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSB6ZXJvO1xyXG4gICAgICAgICAgc3R5bGUudHJhbnNpdGlvbkRlbGF5ID0gemVybztcclxuICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbixcclxuICAgICAgICAgICAgZGVsYXk6IGRlbGF5XHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGNhbGxiYWNrKCk7IC8vIENhdXNlIGZvcmNlZCBzeW5jaHJvbm91cyBsYXlvdXQuXHJcblxyXG4gICAgICAgIGVsZW1lbnRzWzBdLm9mZnNldFdpZHRoOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC1leHByZXNzaW9uc1xyXG4gICAgICAgIC8vIFB1dCB0aGUgZHVyYXRpb24gYmFja1xyXG5cclxuICAgICAgICBlbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50LCBpKSB7XHJcbiAgICAgICAgICBlbGVtZW50LnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IGRhdGFbaV0uZHVyYXRpb247XHJcbiAgICAgICAgICBlbGVtZW50LnN0eWxlLnRyYW5zaXRpb25EZWxheSA9IGRhdGFbaV0uZGVsYXk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH1dKTtcclxuXHJcbiAgICByZXR1cm4gU2h1ZmZsZTtcclxuICB9KHRpbnlFbWl0dGVyKTtcclxuXHJcbiAgU2h1ZmZsZS5TaHVmZmxlSXRlbSA9IFNodWZmbGVJdGVtO1xyXG4gIFNodWZmbGUuQUxMX0lURU1TID0gJ2FsbCc7XHJcbiAgU2h1ZmZsZS5GSUxURVJfQVRUUklCVVRFX0tFWSA9ICdncm91cHMnO1xyXG4gIC8qKiBAZW51bSB7c3RyaW5nfSAqL1xyXG5cclxuICBTaHVmZmxlLkV2ZW50VHlwZSA9IHtcclxuICAgIExBWU9VVDogJ3NodWZmbGU6bGF5b3V0JyxcclxuICAgIFJFTU9WRUQ6ICdzaHVmZmxlOnJlbW92ZWQnXHJcbiAgfTtcclxuICAvKiogQGVudW0ge3N0cmluZ30gKi9cclxuXHJcbiAgU2h1ZmZsZS5DbGFzc2VzID0gQ2xhc3NlcztcclxuICAvKiogQGVudW0ge3N0cmluZ30gKi9cclxuXHJcbiAgU2h1ZmZsZS5GaWx0ZXJNb2RlID0ge1xyXG4gICAgQU5ZOiAnYW55JyxcclxuICAgIEFMTDogJ2FsbCdcclxuICB9OyAvLyBPdmVycmlkZWFibGUgb3B0aW9uc1xyXG5cclxuICBTaHVmZmxlLm9wdGlvbnMgPSB7XHJcbiAgICAvLyBJbml0aWFsIGZpbHRlciBncm91cC5cclxuICAgIGdyb3VwOiBTaHVmZmxlLkFMTF9JVEVNUyxcclxuICAgIC8vIFRyYW5zaXRpb24vYW5pbWF0aW9uIHNwZWVkIChtaWxsaXNlY29uZHMpLlxyXG4gICAgc3BlZWQ6IDI1MCxcclxuICAgIC8vIENTUyBlYXNpbmcgZnVuY3Rpb24gdG8gdXNlLlxyXG4gICAgZWFzaW5nOiAnY3ViaWMtYmV6aWVyKDAuNCwgMC4wLCAwLjIsIDEpJyxcclxuICAgIC8vIGUuZy4gJy5waWN0dXJlLWl0ZW0nLlxyXG4gICAgaXRlbVNlbGVjdG9yOiAnKicsXHJcbiAgICAvLyBFbGVtZW50IG9yIHNlbGVjdG9yIHN0cmluZy4gVXNlIGFuIGVsZW1lbnQgdG8gZGV0ZXJtaW5lIHRoZSBzaXplIG9mIGNvbHVtbnNcclxuICAgIC8vIGFuZCBndXR0ZXJzLlxyXG4gICAgc2l6ZXI6IG51bGwsXHJcbiAgICAvLyBBIHN0YXRpYyBudW1iZXIgb3IgZnVuY3Rpb24gdGhhdCB0ZWxscyB0aGUgcGx1Z2luIGhvdyB3aWRlIHRoZSBndXR0ZXJzXHJcbiAgICAvLyBiZXR3ZWVuIGNvbHVtbnMgYXJlIChpbiBwaXhlbHMpLlxyXG4gICAgZ3V0dGVyV2lkdGg6IDAsXHJcbiAgICAvLyBBIHN0YXRpYyBudW1iZXIgb3IgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgbnVtYmVyIHdoaWNoIHRlbGxzIHRoZSBwbHVnaW5cclxuICAgIC8vIGhvdyB3aWRlIHRoZSBjb2x1bW5zIGFyZSAoaW4gcGl4ZWxzKS5cclxuICAgIGNvbHVtbldpZHRoOiAwLFxyXG4gICAgLy8gSWYgeW91ciBncm91cCBpcyBub3QganNvbiwgYW5kIGlzIGNvbW1hIGRlbGltZXRlZCwgeW91IGNvdWxkIHNldCBkZWxpbWl0ZXJcclxuICAgIC8vIHRvICcsJy5cclxuICAgIGRlbGltaXRlcjogbnVsbCxcclxuICAgIC8vIFVzZWZ1bCBmb3IgcGVyY2VudGFnZSBiYXNlZCBoZWlnaHRzIHdoZW4gdGhleSBtaWdodCBub3QgYWx3YXlzIGJlIGV4YWN0bHlcclxuICAgIC8vIHRoZSBzYW1lIChpbiBwaXhlbHMpLlxyXG4gICAgYnVmZmVyOiAwLFxyXG4gICAgLy8gUmVhZGluZyB0aGUgd2lkdGggb2YgZWxlbWVudHMgaXNuJ3QgcHJlY2lzZSBlbm91Z2ggYW5kIGNhbiBjYXVzZSBjb2x1bW5zIHRvXHJcbiAgICAvLyBqdW1wIGJldHdlZW4gdmFsdWVzLlxyXG4gICAgY29sdW1uVGhyZXNob2xkOiAwLjAxLFxyXG4gICAgLy8gU2h1ZmZsZSBjYW4gYmUgaXNJbml0aWFsaXplZCB3aXRoIGEgc29ydCBvYmplY3QuIEl0IGlzIHRoZSBzYW1lIG9iamVjdFxyXG4gICAgLy8gZ2l2ZW4gdG8gdGhlIHNvcnQgbWV0aG9kLlxyXG4gICAgaW5pdGlhbFNvcnQ6IG51bGwsXHJcbiAgICAvLyBCeSBkZWZhdWx0LCBzaHVmZmxlIHdpbGwgdGhyb3R0bGUgcmVzaXplIGV2ZW50cy4gVGhpcyBjYW4gYmUgY2hhbmdlZCBvclxyXG4gICAgLy8gcmVtb3ZlZC5cclxuICAgIHRocm90dGxlOiB0aHJvdHRsZWl0LFxyXG4gICAgLy8gSG93IG9mdGVuIHNodWZmbGUgY2FuIGJlIGNhbGxlZCBvbiByZXNpemUgKGluIG1pbGxpc2Vjb25kcykuXHJcbiAgICB0aHJvdHRsZVRpbWU6IDMwMCxcclxuICAgIC8vIFRyYW5zaXRpb24gZGVsYXkgb2Zmc2V0IGZvciBlYWNoIGl0ZW0gaW4gbWlsbGlzZWNvbmRzLlxyXG4gICAgc3RhZ2dlckFtb3VudDogMTUsXHJcbiAgICAvLyBNYXhpbXVtIHN0YWdnZXIgZGVsYXkgaW4gbWlsbGlzZWNvbmRzLlxyXG4gICAgc3RhZ2dlckFtb3VudE1heDogMTUwLFxyXG4gICAgLy8gV2hldGhlciB0byB1c2UgdHJhbnNmb3JtcyBvciBhYnNvbHV0ZSBwb3NpdGlvbmluZy5cclxuICAgIHVzZVRyYW5zZm9ybXM6IHRydWUsXHJcbiAgICAvLyBBZmZlY3RzIHVzaW5nIGFuIGFycmF5IHdpdGggZmlsdGVyLiBlLmcuIGBmaWx0ZXIoWydvbmUnLCAndHdvJ10pYC4gV2l0aCBcImFueVwiLFxyXG4gICAgLy8gdGhlIGVsZW1lbnQgcGFzc2VzIHRoZSB0ZXN0IGlmIGFueSBvZiBpdHMgZ3JvdXBzIGFyZSBpbiB0aGUgYXJyYXkuIFdpdGggXCJhbGxcIixcclxuICAgIC8vIHRoZSBlbGVtZW50IG9ubHkgcGFzc2VzIGlmIGFsbCBncm91cHMgYXJlIGluIHRoZSBhcnJheS5cclxuICAgIGZpbHRlck1vZGU6IFNodWZmbGUuRmlsdGVyTW9kZS5BTlksXHJcbiAgICAvLyBBdHRlbXB0IHRvIGNlbnRlciBncmlkIGl0ZW1zIGluIGVhY2ggcm93LlxyXG4gICAgaXNDZW50ZXJlZDogZmFsc2UsXHJcbiAgICAvLyBXaGV0aGVyIHRvIHJvdW5kIHBpeGVsIHZhbHVlcyB1c2VkIGluIHRyYW5zbGF0ZSh4LCB5KS4gVGhpcyB1c3VhbGx5IGF2b2lkc1xyXG4gICAgLy8gYmx1cnJpbmVzcy5cclxuICAgIHJvdW5kVHJhbnNmb3JtczogdHJ1ZVxyXG4gIH07XHJcbiAgU2h1ZmZsZS5Qb2ludCA9IFBvaW50O1xyXG4gIFNodWZmbGUuUmVjdCA9IFJlY3Q7IC8vIEV4cG9zZSBmb3IgdGVzdGluZy4gSGFjayBhdCB5b3VyIG93biByaXNrLlxyXG5cclxuICBTaHVmZmxlLl9fc29ydGVyID0gc29ydGVyO1xyXG4gIFNodWZmbGUuX19nZXRDb2x1bW5TcGFuID0gZ2V0Q29sdW1uU3BhbjtcclxuICBTaHVmZmxlLl9fZ2V0QXZhaWxhYmxlUG9zaXRpb25zID0gZ2V0QXZhaWxhYmxlUG9zaXRpb25zO1xyXG4gIFNodWZmbGUuX19nZXRTaG9ydENvbHVtbiA9IGdldFNob3J0Q29sdW1uO1xyXG4gIFNodWZmbGUuX19nZXRDZW50ZXJlZFBvc2l0aW9ucyA9IGdldENlbnRlcmVkUG9zaXRpb25zO1xyXG5cclxuICByZXR1cm4gU2h1ZmZsZTtcclxuXHJcbn0pKTtcclxuXHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUdBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFIQTtBQURBO0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRkE7QUFLQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUlBO0FBQ0E7QUF4REE7QUEyREE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQU9BO0FBRUE7Ozs7Ozs7OztBQVNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7Ozs7O0FBUUE7QUFDQTtBQUNBO0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7Ozs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FBUUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUpBO0FBQ0E7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7OztBQVVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUFRQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSkE7QUFDQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFKQTtBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUlBO0FBQ0E7Ozs7Ozs7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBUEE7QUFTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVBBO0FBU0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFQQTtBQVNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFSQTtBQVVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFSQTtBQVVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFSQTtBQVVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQU5BO0FBQ0E7QUFRQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUxBO0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUlBO0FBQ0E7QUFEQTtBQUxBO0FBU0E7QUFDQTtBQUNBO0FBREE7QUFHQTtBQUNBO0FBQ0E7QUFGQTtBQUpBO0FBakJBO0FBMkJBO0FBQ0E7QUFDQTtBQUZBO0FBS0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7Ozs7Ozs7OztBQVdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7Ozs7Ozs7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBWEE7QUFhQTs7Ozs7OztBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7Ozs7Ozs7QUFTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7QUFTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7OztBQVdBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7OztBQVNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7Ozs7O0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7Ozs7Ozs7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQTdDQTtBQW9EQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQVBBO0FBZUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUFyQkE7QUE0QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7QUFiQTtBQXdCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FBckJBO0FBOEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUlBO0FBQ0E7Ozs7Ozs7O0FBMUJBO0FBbUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUF6QkE7QUFnQ0E7QUFDQTtBQUNBO0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUFaQTtBQW1CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FBUEE7QUFjQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUFQQTtBQWFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FBTEE7QUFjQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFsQkE7QUFvQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FBWEE7QUFrQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFIQTtBQUtBO0FBVEE7QUFXQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFOQTtBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQVBBO0FBZ0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQXhCQTtBQWdDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQWZBO0FBc0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUFwQkE7QUF5QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FBTEE7QUFZQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUFMQTtBQVlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQUxBO0FBWUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQVpBO0FBa0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQVhBO0FBa0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUhBO0FBQ0E7QUFLQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUF2Q0E7QUFnREE7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FBeEJBO0FBZ0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQU5BO0FBUUE7QUFDQTs7Ozs7Ozs7QUFaQTtBQXFCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUFMQTtBQVlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSEE7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQXhDQTtBQThDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7O0FBVkE7QUFvQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUFqQkE7QUEwQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUFWQTtBQWtCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUFYQTtBQWtCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQTFCQTtBQWdDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFaQTtBQWNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQVhBO0FBa0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQWZBO0FBaUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUFSQTtBQWdCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUF0QkE7QUE0QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQXhCQTtBQThCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQWZBO0FBc0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQUxBO0FBWUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBekRBO0FBOERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FBTEE7QUFXQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQVZBO0FBa0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FBaERBO0FBdURBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQVBBO0FBYUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQXZCQTtBQTRCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF0QkE7QUE4Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBSUE7QUFDQTs7Ozs7Ozs7QUF2QkE7QUFnQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQTFCQTtBQUNBO0FBNEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQWpEQTtBQW1EQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./js/Shuffle.js\n");

/***/ }),

/***/ "./js/jquery.nice-select.min.js":
/*!**************************************!*\
  !*** ./js/jquery.nice-select.min.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/*  jQuery Nice Select - v1.0\r\n    https://github.com/hernansartorio/jquery-nice-select\r\n    Made by HernĂĄn Sartorio  */\n!function (e) {\n  e.fn.niceSelect = function (t) {\n    function s(t) {\n      t.after(e(\"<div></div>\").addClass(\"nice-select\").addClass(t.attr(\"class\") || \"\").addClass(t.attr(\"disabled\") ? \"disabled\" : \"\").attr(\"tabindex\", t.attr(\"disabled\") ? null : \"0\").html('<span class=\"current\"></span><ul class=\"list\"></ul>'));\n      var s = t.next(),\n          n = t.find(\"option\"),\n          i = t.find(\"option:selected\");\n      s.find(\".current\").html(i.data(\"display\") || i.text()), n.each(function (t) {\n        var n = e(this),\n            i = n.data(\"display\");\n        s.find(\"ul\").append(e(\"<li></li>\").attr(\"data-value\", n.val()).attr(\"data-display\", i || null).addClass(\"option\" + (n.is(\":selected\") ? \" selected\" : \"\") + (n.is(\":disabled\") ? \" disabled\" : \"\")).html(n.text()));\n      });\n    }\n\n    if (\"string\" == typeof t) return \"update\" == t ? this.each(function () {\n      var t = e(this),\n          n = e(this).next(\".nice-select\"),\n          i = n.hasClass(\"open\");\n      n.length && (n.remove(), s(t), i && t.next().trigger(\"click\"));\n    }) : \"destroy\" == t ? (this.each(function () {\n      var t = e(this),\n          s = e(this).next(\".nice-select\");\n      s.length && (s.remove(), t.css(\"display\", \"\"));\n    }), 0 == e(\".nice-select\").length && e(document).off(\".nice_select\")) : console.log('Method \"' + t + '\" does not exist.'), this;\n    this.hide(), this.each(function () {\n      var t = e(this);\n      t.next().hasClass(\"nice-select\") || s(t);\n    }), e(document).off(\".nice_select\"), e(document).on(\"click.nice_select\", \".nice-select\", function (t) {\n      var s = e(this);\n      e(\".nice-select\").not(s).removeClass(\"open\"), s.toggleClass(\"open\"), s.hasClass(\"open\") ? (s.find(\".option\"), s.find(\".focus\").removeClass(\"focus\"), s.find(\".selected\").addClass(\"focus\")) : s.focus();\n    }), e(document).on(\"click.nice_select\", function (t) {\n      0 === e(t.target).closest(\".nice-select\").length && e(\".nice-select\").removeClass(\"open\").find(\".option\");\n    }), e(document).on(\"click.nice_select\", \".nice-select .option:not(.disabled)\", function (t) {\n      var s = e(this),\n          n = s.closest(\".nice-select\");\n      n.find(\".selected\").removeClass(\"selected\"), s.addClass(\"selected\");\n      var i = s.data(\"display\") || s.text();\n      n.find(\".current\").text(i), n.prev(\"select\").val(s.data(\"value\")).trigger(\"change\");\n    }), e(document).on(\"keydown.nice_select\", \".nice-select\", function (t) {\n      var s = e(this),\n          n = e(s.find(\".focus\") || s.find(\".list .option.selected\"));\n      if (32 == t.keyCode || 13 == t.keyCode) return s.hasClass(\"open\") ? n.trigger(\"click\") : s.trigger(\"click\"), !1;\n\n      if (40 == t.keyCode) {\n        if (s.hasClass(\"open\")) {\n          var i = n.nextAll(\".option:not(.disabled)\").first();\n          i.length > 0 && (s.find(\".focus\").removeClass(\"focus\"), i.addClass(\"focus\"));\n        } else s.trigger(\"click\");\n\n        return !1;\n      }\n\n      if (38 == t.keyCode) {\n        if (s.hasClass(\"open\")) {\n          var l = n.prevAll(\".option:not(.disabled)\").first();\n          l.length > 0 && (s.find(\".focus\").removeClass(\"focus\"), l.addClass(\"focus\"));\n        } else s.trigger(\"click\");\n\n        return !1;\n      }\n\n      if (27 == t.keyCode) s.hasClass(\"open\") && s.trigger(\"click\");else if (9 == t.keyCode && s.hasClass(\"open\")) return !1;\n    });\n    var n = document.createElement(\"a\").style;\n    return n.cssText = \"pointer-events:auto\", \"auto\" !== n.pointerEvents && e(\"html\").addClass(\"no-csspointerevents\"), this;\n  };\n}(jQuery);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9qcy9qcXVlcnkubmljZS1zZWxlY3QubWluLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vanMvanF1ZXJ5Lm5pY2Utc2VsZWN0Lm1pbi5qcz9jNDQ1Il0sInNvdXJjZXNDb250ZW50IjpbIi8qICBqUXVlcnkgTmljZSBTZWxlY3QgLSB2MS4wXHJcbiAgICBodHRwczovL2dpdGh1Yi5jb20vaGVybmFuc2FydG9yaW8vanF1ZXJ5LW5pY2Utc2VsZWN0XHJcbiAgICBNYWRlIGJ5IEhlcm7DoW4gU2FydG9yaW8gICovXHJcbiFmdW5jdGlvbihlKXtlLmZuLm5pY2VTZWxlY3Q9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gcyh0KXt0LmFmdGVyKGUoXCI8ZGl2PjwvZGl2PlwiKS5hZGRDbGFzcyhcIm5pY2Utc2VsZWN0XCIpLmFkZENsYXNzKHQuYXR0cihcImNsYXNzXCIpfHxcIlwiKS5hZGRDbGFzcyh0LmF0dHIoXCJkaXNhYmxlZFwiKT9cImRpc2FibGVkXCI6XCJcIikuYXR0cihcInRhYmluZGV4XCIsdC5hdHRyKFwiZGlzYWJsZWRcIik/bnVsbDpcIjBcIikuaHRtbCgnPHNwYW4gY2xhc3M9XCJjdXJyZW50XCI+PC9zcGFuPjx1bCBjbGFzcz1cImxpc3RcIj48L3VsPicpKTt2YXIgcz10Lm5leHQoKSxuPXQuZmluZChcIm9wdGlvblwiKSxpPXQuZmluZChcIm9wdGlvbjpzZWxlY3RlZFwiKTtzLmZpbmQoXCIuY3VycmVudFwiKS5odG1sKGkuZGF0YShcImRpc3BsYXlcIil8fGkudGV4dCgpKSxuLmVhY2goZnVuY3Rpb24odCl7dmFyIG49ZSh0aGlzKSxpPW4uZGF0YShcImRpc3BsYXlcIik7cy5maW5kKFwidWxcIikuYXBwZW5kKGUoXCI8bGk+PC9saT5cIikuYXR0cihcImRhdGEtdmFsdWVcIixuLnZhbCgpKS5hdHRyKFwiZGF0YS1kaXNwbGF5XCIsaXx8bnVsbCkuYWRkQ2xhc3MoXCJvcHRpb25cIisobi5pcyhcIjpzZWxlY3RlZFwiKT9cIiBzZWxlY3RlZFwiOlwiXCIpKyhuLmlzKFwiOmRpc2FibGVkXCIpP1wiIGRpc2FibGVkXCI6XCJcIikpLmh0bWwobi50ZXh0KCkpKX0pfWlmKFwic3RyaW5nXCI9PXR5cGVvZiB0KXJldHVyblwidXBkYXRlXCI9PXQ/dGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIHQ9ZSh0aGlzKSxuPWUodGhpcykubmV4dChcIi5uaWNlLXNlbGVjdFwiKSxpPW4uaGFzQ2xhc3MoXCJvcGVuXCIpO24ubGVuZ3RoJiYobi5yZW1vdmUoKSxzKHQpLGkmJnQubmV4dCgpLnRyaWdnZXIoXCJjbGlja1wiKSl9KTpcImRlc3Ryb3lcIj09dD8odGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIHQ9ZSh0aGlzKSxzPWUodGhpcykubmV4dChcIi5uaWNlLXNlbGVjdFwiKTtzLmxlbmd0aCYmKHMucmVtb3ZlKCksdC5jc3MoXCJkaXNwbGF5XCIsXCJcIikpfSksMD09ZShcIi5uaWNlLXNlbGVjdFwiKS5sZW5ndGgmJmUoZG9jdW1lbnQpLm9mZihcIi5uaWNlX3NlbGVjdFwiKSk6Y29uc29sZS5sb2coJ01ldGhvZCBcIicrdCsnXCIgZG9lcyBub3QgZXhpc3QuJyksdGhpczt0aGlzLmhpZGUoKSx0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgdD1lKHRoaXMpO3QubmV4dCgpLmhhc0NsYXNzKFwibmljZS1zZWxlY3RcIil8fHModCl9KSxlKGRvY3VtZW50KS5vZmYoXCIubmljZV9zZWxlY3RcIiksZShkb2N1bWVudCkub24oXCJjbGljay5uaWNlX3NlbGVjdFwiLFwiLm5pY2Utc2VsZWN0XCIsZnVuY3Rpb24odCl7dmFyIHM9ZSh0aGlzKTtlKFwiLm5pY2Utc2VsZWN0XCIpLm5vdChzKS5yZW1vdmVDbGFzcyhcIm9wZW5cIikscy50b2dnbGVDbGFzcyhcIm9wZW5cIikscy5oYXNDbGFzcyhcIm9wZW5cIik/KHMuZmluZChcIi5vcHRpb25cIikscy5maW5kKFwiLmZvY3VzXCIpLnJlbW92ZUNsYXNzKFwiZm9jdXNcIikscy5maW5kKFwiLnNlbGVjdGVkXCIpLmFkZENsYXNzKFwiZm9jdXNcIikpOnMuZm9jdXMoKX0pLGUoZG9jdW1lbnQpLm9uKFwiY2xpY2submljZV9zZWxlY3RcIixmdW5jdGlvbih0KXswPT09ZSh0LnRhcmdldCkuY2xvc2VzdChcIi5uaWNlLXNlbGVjdFwiKS5sZW5ndGgmJmUoXCIubmljZS1zZWxlY3RcIikucmVtb3ZlQ2xhc3MoXCJvcGVuXCIpLmZpbmQoXCIub3B0aW9uXCIpfSksZShkb2N1bWVudCkub24oXCJjbGljay5uaWNlX3NlbGVjdFwiLFwiLm5pY2Utc2VsZWN0IC5vcHRpb246bm90KC5kaXNhYmxlZClcIixmdW5jdGlvbih0KXt2YXIgcz1lKHRoaXMpLG49cy5jbG9zZXN0KFwiLm5pY2Utc2VsZWN0XCIpO24uZmluZChcIi5zZWxlY3RlZFwiKS5yZW1vdmVDbGFzcyhcInNlbGVjdGVkXCIpLHMuYWRkQ2xhc3MoXCJzZWxlY3RlZFwiKTt2YXIgaT1zLmRhdGEoXCJkaXNwbGF5XCIpfHxzLnRleHQoKTtuLmZpbmQoXCIuY3VycmVudFwiKS50ZXh0KGkpLG4ucHJldihcInNlbGVjdFwiKS52YWwocy5kYXRhKFwidmFsdWVcIikpLnRyaWdnZXIoXCJjaGFuZ2VcIil9KSxlKGRvY3VtZW50KS5vbihcImtleWRvd24ubmljZV9zZWxlY3RcIixcIi5uaWNlLXNlbGVjdFwiLGZ1bmN0aW9uKHQpe3ZhciBzPWUodGhpcyksbj1lKHMuZmluZChcIi5mb2N1c1wiKXx8cy5maW5kKFwiLmxpc3QgLm9wdGlvbi5zZWxlY3RlZFwiKSk7aWYoMzI9PXQua2V5Q29kZXx8MTM9PXQua2V5Q29kZSlyZXR1cm4gcy5oYXNDbGFzcyhcIm9wZW5cIik/bi50cmlnZ2VyKFwiY2xpY2tcIik6cy50cmlnZ2VyKFwiY2xpY2tcIiksITE7aWYoNDA9PXQua2V5Q29kZSl7aWYocy5oYXNDbGFzcyhcIm9wZW5cIikpe3ZhciBpPW4ubmV4dEFsbChcIi5vcHRpb246bm90KC5kaXNhYmxlZClcIikuZmlyc3QoKTtpLmxlbmd0aD4wJiYocy5maW5kKFwiLmZvY3VzXCIpLnJlbW92ZUNsYXNzKFwiZm9jdXNcIiksaS5hZGRDbGFzcyhcImZvY3VzXCIpKX1lbHNlIHMudHJpZ2dlcihcImNsaWNrXCIpO3JldHVybiExfWlmKDM4PT10LmtleUNvZGUpe2lmKHMuaGFzQ2xhc3MoXCJvcGVuXCIpKXt2YXIgbD1uLnByZXZBbGwoXCIub3B0aW9uOm5vdCguZGlzYWJsZWQpXCIpLmZpcnN0KCk7bC5sZW5ndGg+MCYmKHMuZmluZChcIi5mb2N1c1wiKS5yZW1vdmVDbGFzcyhcImZvY3VzXCIpLGwuYWRkQ2xhc3MoXCJmb2N1c1wiKSl9ZWxzZSBzLnRyaWdnZXIoXCJjbGlja1wiKTtyZXR1cm4hMX1pZigyNz09dC5rZXlDb2RlKXMuaGFzQ2xhc3MoXCJvcGVuXCIpJiZzLnRyaWdnZXIoXCJjbGlja1wiKTtlbHNlIGlmKDk9PXQua2V5Q29kZSYmcy5oYXNDbGFzcyhcIm9wZW5cIikpcmV0dXJuITF9KTt2YXIgbj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKS5zdHlsZTtyZXR1cm4gbi5jc3NUZXh0PVwicG9pbnRlci1ldmVudHM6YXV0b1wiLFwiYXV0b1wiIT09bi5wb2ludGVyRXZlbnRzJiZlKFwiaHRtbFwiKS5hZGRDbGFzcyhcIm5vLWNzc3BvaW50ZXJldmVudHNcIiksdGhpc319KGpRdWVyeSk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7O0FBR0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQURBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFEQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFEQTtBQUFBO0FBQ0E7QUFEQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFEQTtBQUFBO0FBQ0E7QUFEQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./js/jquery.nice-select.min.js\n");

/***/ }),

/***/ "./js/template.js":
/*!************************!*\
  !*** ./js/template.js ***!
  \************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _MobileMenu__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./MobileMenu */ \"./js/MobileMenu.js\");\n/* harmony import */ var _Shuffle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Shuffle */ \"./js/Shuffle.js\");\n/* harmony import */ var _Shuffle__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_Shuffle__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _jquery_nice_select_min__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./jquery.nice-select.min */ \"./js/jquery.nice-select.min.js\");\n/* harmony import */ var _jquery_nice_select_min__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_jquery_nice_select_min__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  new _MobileMenu__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n  let element = document.querySelector('.sub-products');\n\n  if (element) {\n    let sizer = element.querySelector('.sizer-element');\n    let shuffleInstance = new _Shuffle__WEBPACK_IMPORTED_MODULE_1___default.a(element, {\n      itemSelector: '.sub-product-outer',\n      sizer: sizer\n    });\n    shuffleInstance.filter('rury');\n    [].forEach.call(document.querySelectorAll(\".sub-products-filter-btn\"), function (el) {\n      el.addEventListener(\"click\", ev => {\n        let category = ev.target.dataset.category;\n        let btns = document.querySelectorAll(\".sub-products-filter-btn\");\n        [].forEach.call(btns, function (el) {\n          el.classList.remove(\"sub-products-filter-btn--active\");\n        });\n        ev.target.classList.add(\"sub-products-filter-btn--active\");\n        shuffleInstance.filter(category);\n      });\n    });\n    let subProductsBtns = document.querySelectorAll(\".sub-product_button\");\n    [].forEach.call(subProductsBtns, function (el) {\n      el.addEventListener(\"click\", function (ev) {\n        let el = ev.target;\n        let id = el.dataset.subproductid;\n        jQuery(\".sub-products-outer\").slideUp();\n        jQuery(`#subProductPreview${id}`).slideDown();\n        document.querySelector(`#subProductPreview${id}`).classList.add(\"preview-on\");\n      });\n    });\n    [].forEach.call(document.querySelectorAll(`.sub-product_preview .sub-product_preview-close`), function (el) {\n      el.addEventListener(\"click\", function (ev) {\n        jQuery(ev.target.parentNode).slideUp();\n        jQuery(\".sub-products-outer\").slideDown();\n      });\n    });\n    [].forEach.call(document.querySelectorAll(\".sub-products-filter-btn\"), function (el) {\n      el.addEventListener(\"click\", function () {\n        let $active = jQuery(\".sub-product_preview.preview-on\");\n\n        if ($active.length) {\n          $active.slideUp();\n          $active.removeClass(\"preview-on\");\n          setTimeout(function () {\n            jQuery(\".sub-products-outer\").show();\n            shuffleInstance.filter(el.dataset.category);\n          }, 250);\n        }\n      });\n    });\n  }\n});\njQuery(document).ready(function ($) {\n  function changeClass() {\n    var scroll = $(window).scrollTop();\n\n    if (scroll >= 30) {\n      body.addClass(\"scroll\");\n    } else {\n      body.removeClass(\"scroll\");\n    }\n  }\n\n  ;\n  let scrollTimeout,\n      throttle = 50,\n      body = $(\"body\");\n  changeClass();\n  $(window).on('scroll', function (e) {\n    if (!scrollTimeout) {\n      scrollTimeout = setTimeout(function () {\n        changeClass();\n        scrollTimeout = null;\n      }, throttle);\n    }\n  }); //PRZEĹÄCZANIE POMIÄDZY HASHAMI -- FORCE RELOAD\n\n  $(\".materials .hash-menu + ul > li a\").click(function (ev) {\n    ev.preventDefault();\n    var url = ev.target.href.split(\"/\"),\n        hash = url[url.length - 1];\n    window.location = hash;\n    location.reload();\n  });\n  $(\".menu-sidebar-products ul li.deeper.parent > a\").click(function (ev) {\n    ev.preventDefault();\n  });\n  $(\".menu-sidebar-products ul li.deeper.parent > ul > li > a\").click(function (ev) {\n    ev.stopPropagation();\n  });\n  $(\".menu-sidebar-products ul li.deeper.parent ul\").hide();\n  $(\".menu-sidebar-products ul li.deeper.parent\").click(function () {\n    $(\".menu-sidebar-products ul li.deeper.parent\").not(this).removeClass(\"active\");\n    $(this).toggleClass(\"active\");\n    $(\".menu-sidebar-products ul li.deeper.parent\").not(this).find(\"ul\").slideUp();\n    $(this).find(\"ul\").slideToggle();\n  });\n  $(\".formResponsive label input[type='checkbox']\").change(function () {\n    $(this).parent().toggleClass(\"check\");\n  });\n  let $search = $(\".header .search input[name='searchword']\");\n  let $searches = $(\".header .search input[name='searchword'], .header .search svg\");\n  let $header = $(\".main-menu\");\n  $(\".header .search svg\").click(function () {\n    $header.toggleClass(\"op-0\");\n    $searches.toggleClass(\"active\");\n  });\n  $(\".sidebar svg\").click(function () {\n    $(\".sidebar form\").submit();\n  });\n  $(\"select\").niceSelect();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9qcy90ZW1wbGF0ZS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL2pzL3RlbXBsYXRlLmpzPzkyMGYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IE1vYmlsZU1lbnUgZnJvbSAnLi9Nb2JpbGVNZW51JztcclxuaW1wb3J0IFNodWZmbGUgZnJvbSAnLi9TaHVmZmxlJztcclxuaW1wb3J0IG5pY2VTZWxlY3QgZnJvbSAnLi9qcXVlcnkubmljZS1zZWxlY3QubWluJztcclxuXHJcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCAoKSA9PiB7XHJcbiAgICBuZXcgTW9iaWxlTWVudSgpO1xyXG4gIFxyXG4gICAgbGV0IGVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc3ViLXByb2R1Y3RzJyk7XHJcbiAgICBpZihlbGVtZW50KSB7XHJcbiAgICAgICAgbGV0IHNpemVyID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuc2l6ZXItZWxlbWVudCcpO1xyXG5cclxuICAgICAgICBsZXQgc2h1ZmZsZUluc3RhbmNlID0gbmV3IFNodWZmbGUoZWxlbWVudCwge1xyXG4gICAgICAgICAgICBpdGVtU2VsZWN0b3I6ICcuc3ViLXByb2R1Y3Qtb3V0ZXInLFxyXG4gICAgICAgICAgICBzaXplcjogc2l6ZXJcclxuICAgICAgICB9KTtcclxuICAgICAgICBzaHVmZmxlSW5zdGFuY2UuZmlsdGVyKCdydXJ5Jyk7XHJcbiAgICAgICAgW10uZm9yRWFjaC5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuc3ViLXByb2R1Y3RzLWZpbHRlci1idG5cIiksIGZ1bmN0aW9uKGVsKSB7XHJcbiAgICAgICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXYpID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCBjYXRlZ29yeSA9IGV2LnRhcmdldC5kYXRhc2V0LmNhdGVnb3J5O1xyXG4gICAgICAgICAgICAgICAgbGV0IGJ0bnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnN1Yi1wcm9kdWN0cy1maWx0ZXItYnRuXCIpO1xyXG4gICAgICAgICAgICAgICAgW10uZm9yRWFjaC5jYWxsKGJ0bnMsIGZ1bmN0aW9uKGVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoXCJzdWItcHJvZHVjdHMtZmlsdGVyLWJ0bi0tYWN0aXZlXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgZXYudGFyZ2V0LmNsYXNzTGlzdC5hZGQoXCJzdWItcHJvZHVjdHMtZmlsdGVyLWJ0bi0tYWN0aXZlXCIpO1xyXG4gICAgICAgICAgICAgICAgc2h1ZmZsZUluc3RhbmNlLmZpbHRlcihjYXRlZ29yeSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGxldCBzdWJQcm9kdWN0c0J0bnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnN1Yi1wcm9kdWN0X2J1dHRvblwiKTtcclxuICAgICAgICBbXS5mb3JFYWNoLmNhbGwoc3ViUHJvZHVjdHNCdG5zLCBmdW5jdGlvbihlbCkge1xyXG4gICAgXHJcbiAgICAgICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbihldikge1xyXG4gICAgICAgICAgICAgICAgbGV0IGVsID0gZXYudGFyZ2V0O1xyXG4gICAgICAgICAgICAgICAgbGV0IGlkID0gZWwuZGF0YXNldC5zdWJwcm9kdWN0aWQ7XHJcbiAgICAgICAgICAgICAgICBqUXVlcnkoXCIuc3ViLXByb2R1Y3RzLW91dGVyXCIpLnNsaWRlVXAoKTtcclxuICAgICAgICAgICAgICAgIGpRdWVyeShgI3N1YlByb2R1Y3RQcmV2aWV3JHtpZH1gKS5zbGlkZURvd24oKTtcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCNzdWJQcm9kdWN0UHJldmlldyR7aWR9YCkuY2xhc3NMaXN0LmFkZChcInByZXZpZXctb25cIik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIFtdLmZvckVhY2guY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGAuc3ViLXByb2R1Y3RfcHJldmlldyAuc3ViLXByb2R1Y3RfcHJldmlldy1jbG9zZWApLCBmdW5jdGlvbihlbCkge1xyXG4gICAgICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKGV2KSB7XHJcbiAgICAgICAgICAgICAgICBqUXVlcnkoZXYudGFyZ2V0LnBhcmVudE5vZGUpLnNsaWRlVXAoKTtcclxuICAgICAgICAgICAgICAgIGpRdWVyeShcIi5zdWItcHJvZHVjdHMtb3V0ZXJcIikuc2xpZGVEb3duKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgXHJcbiAgICAgICAgW10uZm9yRWFjaC5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuc3ViLXByb2R1Y3RzLWZpbHRlci1idG5cIiksIGZ1bmN0aW9uIChlbCkge1xyXG4gICAgICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgJGFjdGl2ZSA9IGpRdWVyeShcIi5zdWItcHJvZHVjdF9wcmV2aWV3LnByZXZpZXctb25cIik7XHJcbiAgICAgICAgICAgICAgICBpZiAoJGFjdGl2ZS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkYWN0aXZlLnNsaWRlVXAoKTtcclxuICAgICAgICAgICAgICAgICAgICAkYWN0aXZlLnJlbW92ZUNsYXNzKFwicHJldmlldy1vblwiKTtcclxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBqUXVlcnkoXCIuc3ViLXByb2R1Y3RzLW91dGVyXCIpLnNob3coKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2h1ZmZsZUluc3RhbmNlLmZpbHRlcihlbC5kYXRhc2V0LmNhdGVnb3J5KTtcclxuICAgICAgICAgICAgICAgICAgICB9LCAyNTApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgXHJcbn0pO1xyXG5cclxualF1ZXJ5KGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigkKSB7XHJcbiAgICBmdW5jdGlvbiBjaGFuZ2VDbGFzcygpIHtcclxuICAgICAgICB2YXIgc2Nyb2xsID0gJCh3aW5kb3cpLnNjcm9sbFRvcCgpO1xyXG4gICAgICAgIGlmIChzY3JvbGwgPj0gMzApIHtcclxuICAgICAgICAgICAgYm9keS5hZGRDbGFzcyhcInNjcm9sbFwiKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBib2R5LnJlbW92ZUNsYXNzKFwic2Nyb2xsXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBcclxuICAgIGxldCBzY3JvbGxUaW1lb3V0LFxyXG4gICAgICAgIHRocm90dGxlID0gNTAsXHJcbiAgICAgICAgYm9keSA9ICQoXCJib2R5XCIpO1xyXG4gICAgIGNoYW5nZUNsYXNzKCk7XHJcbiAgICBcclxuICAgICQod2luZG93KS5vbignc2Nyb2xsJywgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICBpZiAoIXNjcm9sbFRpbWVvdXQpIHtcclxuICAgICAgICAgICAgc2Nyb2xsVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgY2hhbmdlQ2xhc3MoKTtcclxuICAgICAgICAgICAgICAgIHNjcm9sbFRpbWVvdXQgPSBudWxsO1xyXG4gICAgICAgICAgICB9LCB0aHJvdHRsZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG5cclxuICAgIC8vUFJaRcWBxIRDWkFOSUUgUE9NScSYRFpZIEhBU0hBTUkgLS0gRk9SQ0UgUkVMT0FEXHJcbiAgICAkKFwiLm1hdGVyaWFscyAuaGFzaC1tZW51ICsgdWwgPiBsaSBhXCIpLmNsaWNrKGZ1bmN0aW9uKGV2KSB7XHJcbiAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICB2YXIgdXJsID0gZXYudGFyZ2V0LmhyZWYuc3BsaXQoXCIvXCIpLFxyXG4gICAgICAgIGhhc2ggPSB1cmxbdXJsLmxlbmd0aC0xXTtcclxuICAgICAgICB3aW5kb3cubG9jYXRpb24gPSBoYXNoO1xyXG4gICAgICAgIGxvY2F0aW9uLnJlbG9hZCgpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgJChcIi5tZW51LXNpZGViYXItcHJvZHVjdHMgdWwgbGkuZGVlcGVyLnBhcmVudCA+IGFcIikuY2xpY2soZnVuY3Rpb24oZXYpe1xyXG4gICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICB9KTtcclxuICAgICQoXCIubWVudS1zaWRlYmFyLXByb2R1Y3RzIHVsIGxpLmRlZXBlci5wYXJlbnQgPiB1bCA+IGxpID4gYVwiKS5jbGljayhmdW5jdGlvbiAoZXYpIHtcclxuICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgIH0pO1xyXG4gICAgJChcIi5tZW51LXNpZGViYXItcHJvZHVjdHMgdWwgbGkuZGVlcGVyLnBhcmVudCB1bFwiKS5oaWRlKCk7XHJcbiAgICAkKFwiLm1lbnUtc2lkZWJhci1wcm9kdWN0cyB1bCBsaS5kZWVwZXIucGFyZW50XCIpLmNsaWNrKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICQoXCIubWVudS1zaWRlYmFyLXByb2R1Y3RzIHVsIGxpLmRlZXBlci5wYXJlbnRcIikubm90KHRoaXMpLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpO1xyXG4gICAgICAgICQodGhpcykudG9nZ2xlQ2xhc3MoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgJChcIi5tZW51LXNpZGViYXItcHJvZHVjdHMgdWwgbGkuZGVlcGVyLnBhcmVudFwiKS5ub3QodGhpcykuZmluZChcInVsXCIpLnNsaWRlVXAoKTtcclxuICAgICAgICAkKHRoaXMpLmZpbmQoXCJ1bFwiKS5zbGlkZVRvZ2dsZSgpO1xyXG4gICAgfSlcclxuICAgXHJcbiAgICAkKFwiLmZvcm1SZXNwb25zaXZlIGxhYmVsIGlucHV0W3R5cGU9J2NoZWNrYm94J11cIikuY2hhbmdlKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICQodGhpcykucGFyZW50KCkudG9nZ2xlQ2xhc3MoXCJjaGVja1wiKTtcclxuICAgIH0pO1xyXG4gICAgbGV0ICRzZWFyY2ggPSAkKFwiLmhlYWRlciAuc2VhcmNoIGlucHV0W25hbWU9J3NlYXJjaHdvcmQnXVwiKTtcclxuICAgIGxldCAkc2VhcmNoZXMgPSAkKFwiLmhlYWRlciAuc2VhcmNoIGlucHV0W25hbWU9J3NlYXJjaHdvcmQnXSwgLmhlYWRlciAuc2VhcmNoIHN2Z1wiKTtcclxuICAgIGxldCAkaGVhZGVyID0gJChcIi5tYWluLW1lbnVcIik7XHJcbiAgICAkKFwiLmhlYWRlciAuc2VhcmNoIHN2Z1wiKS5jbGljayhmdW5jdGlvbigpIHtcclxuICAgICAgICAkaGVhZGVyLnRvZ2dsZUNsYXNzKFwib3AtMFwiKTtcclxuICAgICAgICAkc2VhcmNoZXMudG9nZ2xlQ2xhc3MoXCJhY3RpdmVcIik7XHJcbiAgICB9KTtcclxuICAgICQoXCIuc2lkZWJhciBzdmdcIikuY2xpY2soZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgJChcIi5zaWRlYmFyIGZvcm1cIikuc3VibWl0KCk7XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgJChcInNlbGVjdFwiKS5uaWNlU2VsZWN0KCk7XHJcbn0pOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFBQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRkE7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQURBO0FBRUE7QUFBQTtBQUFBO0FBR0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./js/template.js\n");

/***/ })

/******/ });